scale_color_discrete(values = c('1' = "red",'2' = "white",'3' = "green"), labels = c("lateral","forward","backward")) +
theme_minimal()
## Try some visualizations
##  --->>> Need to determine what is relevant for summary stats!
# step length by age group
ggplot(merged_df, aes(x = as.factor(`Group ( 1-young, 2-older adults)`), y = Full_Step_Length, fill = as.factor(`Step_Type (1 Lat :  2 Fwd : 3 Bwd)`))) +
geom_boxplot() +
labs(x = "Age Group (1 = Younger, 2 = Older)", y = "Full Step Length (m)", title = "Step Length by Age Group") +
theme_minimal() +
scale_fill_discrete(labels = c("Lateral Step", "Forward Step", "Backward Step") # Custom legend labels
)
# step height by age group
ggplot(merged_df, aes(x = as.factor(`Group ( 1-young, 2-older adults)`), y = Step_Height, fill = as.factor(`Step_Type (1 Lat :  2 Fwd : 3 Bwd)`))) +
geom_boxplot() +
labs(x = "Age Group (1 = Younger, 2 = Older)", y = "Step Height (m)", title = "Step Height by Age Group") +
theme_minimal() +
scale_fill_discrete(labels = c("Lateral Step", "Forward Step", "Backward Step") # Custom legend labels
)
# distribution of sample vastus lateralis thickness
ggplot(merged_df, aes(x = `VL_Thickness(cm)`)) +
geom_histogram(binwidth = 0.25, fill = "steelblue", color = "black") +
labs(x = "Vastus Lateralis Thickness (cm)", y = "Count", title = "Distribution of VL Thickness") +
theme_minimal()
# step initiation time by age group
ggplot(merged_df, aes(x = as.factor(`Group ( 1-young, 2-older adults)`) , y = Step_Initiation_Time, fill = as.factor(`Step_Type (1 Lat :  2 Fwd : 3 Bwd)`) )) +
geom_boxplot() +
labs(x = "Age Group (1 = Younger, 2 = Older)", y = "Step Initiation Time", title = "Step Initiation by Age Group") +
theme_minimal() +
scale_fill_discrete(labels = c("Lateral Step", "Forward Step", "Backward Step") # Custom legend labels
)
# Weight Transfer Onset Initiation Time by age group
ggplot(merged_df, aes(x = as.factor(`Group ( 1-young, 2-older adults)`), y = Weight_Transfer_Onset_Initiation_Time, fill = as.factor(`Step_Type (1 Lat :  2 Fwd : 3 Bwd)`))) +
geom_boxplot() +
labs(x = "Age Group (1 = Younger, 2 = Older)", y = "Weight Transfer Onset Initiation Time", title = "Weight Transfer Onset Initiation Time by Age Group") +
theme_minimal() +
scale_fill_discrete(labels = c("Lateral Step", "Forward Step", "Backward Step") # Custom legend labels
)
# Weight Transfer Duration by age group
ggplot(merged_df, aes(x = as.factor(`Group ( 1-young, 2-older adults)`), y = Weight_Transfer_Duration, fill = as.factor(`Step_Type (1 Lat :  2 Fwd : 3 Bwd)`))) +
geom_boxplot() +
labs(x = "Age Group (1 = Younger, 2 = Older)", y = "Weight Transfer Duration", title = "Weight Transfer Duration by Age Group") +
theme_minimal()+
scale_fill_discrete(labels = c("Lateral Step", "Forward Step", "Backward Step") # Custom legend labels
)
ggplot(merged_df, aes(x = as.factor(`Group ( 1-young, 2-older adults)`), y = Full_Step_Length, fill = as.factor(`Step_Type (1 Lat :  2 Fwd : 3 Bwd)`))) +
geom_boxplot() +
labs(x = "Age Group (1 = Younger, 2 = Older)", y = "Full Step Length (m)", title = "Step Length by Age Group") +
theme_minimal() +
scale_fill_discrete(labels = c("Lateral Step", "Forward Step", "Backward Step") # Custom legend labels
)  +
guides(col= guide_legend(title= "Step Type"))
ggplot(merged_df, aes(x = as.factor(`Group ( 1-young, 2-older adults)`), y = Full_Step_Length, fill = as.factor(`Step_Type (1 Lat :  2 Fwd : 3 Bwd)`))) +
geom_boxplot() +
labs(x = "Age Group (1 = Younger, 2 = Older)", y = "Full Step Length (m)", title = "Step Length by Age Group") +
theme_minimal() +
scale_fill_discrete(labels = c("Lateral Step", "Forward Step", "Backward Step") # Custom legend labels
)  +
labs(color = "Step Type")
ggplot(merged_df, aes(x = as.factor(`Group ( 1-young, 2-older adults)`), y = Full_Step_Length, fill = as.factor(`Step_Type (1 Lat :  2 Fwd : 3 Bwd)`))) +
geom_boxplot() +
labs(x = "Age Group (1 = Younger, 2 = Older)", y = "Full Step Length (m)", title = "Step Length by Age Group",
color = "Step Type") +
theme_minimal() +
scale_fill_discrete(labels = c("Lateral Step", "Forward Step", "Backward Step") # Custom legend labels
)
## Try some visualizations
##  --->>> Need to determine what is relevant for summary stats!
# step length by age group
ggplot(merged_df, aes(x = as.factor(`Group ( 1-young, 2-older adults)`), y = Full_Step_Length, fill = as.factor(`Step_Type (1 Lat :  2 Fwd : 3 Bwd)`))) +
geom_boxplot() +
labs(x = "Age Group (1 = Younger, 2 = Older)", y = "Full Step Length (m)", title = "Step Length by Age Group") +
theme_minimal() +
scale_fill_discrete(labels = c("Lateral Step", "Forward Step", "Backward Step") # Custom legend labels
)
# step height by age group
ggplot(merged_df, aes(x = as.factor(`Group ( 1-young, 2-older adults)`), y = Step_Height, fill = as.factor(`Step_Type (1 Lat :  2 Fwd : 3 Bwd)`))) +
geom_boxplot() +
labs(x = "Age Group (1 = Younger, 2 = Older)", y = "Step Height (m)", title = "Step Height by Age Group") +
theme_minimal() +
scale_fill_discrete(labels = c("Lateral Step", "Forward Step", "Backward Step") # Custom legend labels
)
# distribution of sample vastus lateralis thickness
ggplot(merged_df, aes(x = `VL_Thickness(cm)`)) +
geom_histogram(binwidth = 0.25, fill = "steelblue", color = "black") +
labs(x = "Vastus Lateralis Thickness (cm)", y = "Count", title = "Distribution of VL Thickness") +
theme_minimal()
# step initiation time by age group
ggplot(merged_df, aes(x = as.factor(`Group ( 1-young, 2-older adults)`) , y = Step_Initiation_Time, fill = as.factor(`Step_Type (1 Lat :  2 Fwd : 3 Bwd)`) )) +
geom_boxplot() +
labs(x = "Age Group (1 = Younger, 2 = Older)", y = "Step Initiation Time", title = "Step Initiation by Age Group") +
theme_minimal() +
scale_fill_discrete(labels = c("Lateral Step", "Forward Step", "Backward Step") # Custom legend labels
)
# Weight Transfer Onset Initiation Time by age group
ggplot(merged_df, aes(x = as.factor(`Group ( 1-young, 2-older adults)`), y = Weight_Transfer_Onset_Initiation_Time, fill = as.factor(`Step_Type (1 Lat :  2 Fwd : 3 Bwd)`))) +
geom_boxplot() +
labs(x = "Age Group (1 = Younger, 2 = Older)", y = "Weight Transfer Onset Initiation Time", title = "Weight Transfer Onset Initiation Time by Age Group") +
theme_minimal() +
scale_fill_discrete(labels = c("Lateral Step", "Forward Step", "Backward Step") # Custom legend labels
)
# Weight Transfer Duration by age group
ggplot(merged_df, aes(x = as.factor(`Group ( 1-young, 2-older adults)`), y = Weight_Transfer_Duration, fill = as.factor(`Step_Type (1 Lat :  2 Fwd : 3 Bwd)`))) +
geom_boxplot() +
labs(x = "Age Group (1 = Younger, 2 = Older)", y = "Weight Transfer Duration", title = "Weight Transfer Duration by Age Group") +
theme_minimal()+
scale_fill_discrete(labels = c("Lateral Step", "Forward Step", "Backward Step") # Custom legend labels
)
ggplot(merged_df, aes(x = as.factor(`Group ( 1-young, 2-older adults)`), y = Full_Step_Length, fill = as.factor(`Step_Type (1 Lat :  2 Fwd : 3 Bwd)`))) +
geom_boxplot() +
labs(x = "Age Group (1 = Younger, 2 = Older)", y = "Full Step Length (m)", title = "Step Length by Age Group") +
theme_minimal(legend.title = element_text("Step Type")) +
scale_fill_discrete(labels = c("Lateral Step", "Forward Step", "Backward Step") # Custom legend labels
)
ggplot(merged_df, aes(x = as.factor(`Group ( 1-young, 2-older adults)`), y = Full_Step_Length, fill = as.factor(`Step_Type (1 Lat :  2 Fwd : 3 Bwd)`))) +
geom_boxplot() +
labs(x = "Age Group (1 = Younger, 2 = Older)", y = "Full Step Length (m)", title = "Step Length by Age Group") +
scale_fill_manual("step type")
# step length by age group
ggplot(merged_df, aes(x = as.factor(`Group ( 1-young, 2-older adults)`), y = Full_Step_Length, fill = as.factor(`Step_Type (1 Lat :  2 Fwd : 3 Bwd)`))) +
geom_boxplot() +
labs(x = "Age Group (1 = Younger, 2 = Older)", y = "Full Step Length (m)", title = "Step Length by Age Group") +
scale_fill_manual("step type") +
#  scale_fill_discrete("step type") +
scale_fill_discrete(labels = c("Lateral Step", "Forward Step", "Backward Step") # Custom legend labels
)
# step length by age group
ggplot(merged_df, aes(x = as.factor(`Group ( 1-young, 2-older adults)`), y = Full_Step_Length, fill = as.factor(`Step_Type (1 Lat :  2 Fwd : 3 Bwd)`))) +
geom_boxplot() +
labs(x = "Age Group (1 = Younger, 2 = Older)", y = "Full Step Length (m)", title = "Step Length by Age Group") +
scale_fill_discrete("Step Type", labels = c("Lateral Step", "Forward Step", "Backward Step") # Custom legend labels
)
## Try some visualizations
##  --->>> Need to determine what is relevant for summary stats!
# step length by age group
ggplot(merged_df, aes(x = as.factor(`Group ( 1-young, 2-older adults)`), y = Full_Step_Length, fill = as.factor(`Step_Type (1 Lat :  2 Fwd : 3 Bwd)`))) +
geom_boxplot() +
labs(x = "Age Group (1 = Younger, 2 = Older)", y = "Full Step Length (m)", title = "Step Length by Age Group") +
scale_fill_discrete("Step Type", labels = c("Lateral Step", "Forward Step", "Backward Step") # Custom legend labels
)
# step height by age group
ggplot(merged_df, aes(x = as.factor(`Group ( 1-young, 2-older adults)`), y = Step_Height, fill = as.factor(`Step_Type (1 Lat :  2 Fwd : 3 Bwd)`))) +
geom_boxplot() +
labs(x = "Age Group (1 = Younger, 2 = Older)", y = "Step Height (m)", title = "Step Height by Age Group") +
theme_minimal() +
scale_fill_discrete("Step Type",labels = c("Lateral Step", "Forward Step", "Backward Step") # Custom legend labels
)
# distribution of sample vastus lateralis thickness
ggplot(merged_df, aes(x = `VL_Thickness(cm)`)) +
geom_histogram(binwidth = 0.25, fill = "steelblue", color = "black") +
labs(x = "Vastus Lateralis Thickness (cm)", y = "Count", title = "Distribution of VL Thickness") +
theme_minimal()
# step initiation time by age group
ggplot(merged_df, aes(x = as.factor(`Group ( 1-young, 2-older adults)`) , y = Step_Initiation_Time, fill = as.factor(`Step_Type (1 Lat :  2 Fwd : 3 Bwd)`) )) +
geom_boxplot() +
labs(x = "Age Group (1 = Younger, 2 = Older)", y = "Step Initiation Time", title = "Step Initiation by Age Group") +
theme_minimal() +
scale_fill_discrete("Step Type",labels = c("Lateral Step", "Forward Step", "Backward Step") # Custom legend labels
)
# Weight Transfer Onset Initiation Time by age group
ggplot(merged_df, aes(x = as.factor(`Group ( 1-young, 2-older adults)`), y = Weight_Transfer_Onset_Initiation_Time, fill = as.factor(`Step_Type (1 Lat :  2 Fwd : 3 Bwd)`))) +
geom_boxplot() +
labs(x = "Age Group (1 = Younger, 2 = Older)", y = "Weight Transfer Onset Initiation Time", title = "Weight Transfer Onset Initiation Time by Age Group") +
theme_minimal() +
scale_fill_discrete("Step Type",labels = c("Lateral Step", "Forward Step", "Backward Step") # Custom legend labels
)
# Weight Transfer Duration by age group
ggplot(merged_df, aes(x = as.factor(`Group ( 1-young, 2-older adults)`), y = Weight_Transfer_Duration, fill = as.factor(`Step_Type (1 Lat :  2 Fwd : 3 Bwd)`))) +
geom_boxplot() +
labs(x = "Age Group (1 = Younger, 2 = Older)", y = "Weight Transfer Duration", title = "Weight Transfer Duration by Age Group") +
theme_minimal()+
scale_fill_discrete("Step Type",labels = c("Lateral Step", "Forward Step", "Backward Step") # Custom legend labels
)
## Try some visualizations
##  --->>> Need to determine what is relevant for summary stats!
# step length by age group
ggplot(merged_df, aes(x = as.factor(`Group ( 1-young, 2-older adults)`), y = Full_Step_Length, fill = as.factor(`Step_Type (1 Lat :  2 Fwd : 3 Bwd)`))) +
geom_boxplot() +
labs(x = "Age Group (1 = Younger, 2 = Older)", y = "Full Step Length (m)", title = "Step Length by Age Group") +
scale_fill_discrete("Step Type", labels = c("Lateral Step", "Forward Step", "Backward Step") # Custom legend labels
) + theme_minimal()
# step height by age group
ggplot(merged_df, aes(x = as.factor(`Group ( 1-young, 2-older adults)`), y = Step_Height, fill = as.factor(`Step_Type (1 Lat :  2 Fwd : 3 Bwd)`))) +
geom_boxplot() +
labs(x = "Age Group (1 = Younger, 2 = Older)", y = "Step Height (m)", title = "Step Height by Age Group") +
theme_minimal() +
scale_fill_discrete("Step Type",labels = c("Lateral Step", "Forward Step", "Backward Step") # Custom legend labels
)
# distribution of sample vastus lateralis thickness
ggplot(merged_df, aes(x = `VL_Thickness(cm)`)) +
geom_histogram(binwidth = 0.25, fill = "steelblue", color = "black") +
labs(x = "Vastus Lateralis Thickness (cm)", y = "Count", title = "Distribution of VL Thickness") +
theme_minimal()
# step initiation time by age group
ggplot(merged_df, aes(x = as.factor(`Group ( 1-young, 2-older adults)`) , y = Step_Initiation_Time, fill = as.factor(`Step_Type (1 Lat :  2 Fwd : 3 Bwd)`) )) +
geom_boxplot() +
labs(x = "Age Group (1 = Younger, 2 = Older)", y = "Step Initiation Time", title = "Step Initiation by Age Group") +
theme_minimal() +
scale_fill_discrete("Step Type",labels = c("Lateral Step", "Forward Step", "Backward Step") # Custom legend labels
)
# Weight Transfer Onset Initiation Time by age group
ggplot(merged_df, aes(x = as.factor(`Group ( 1-young, 2-older adults)`), y = Weight_Transfer_Onset_Initiation_Time, fill = as.factor(`Step_Type (1 Lat :  2 Fwd : 3 Bwd)`))) +
geom_boxplot() +
labs(x = "Age Group (1 = Younger, 2 = Older)", y = "Weight Transfer Onset Initiation Time", title = "Weight Transfer Onset Initiation Time by Age Group") +
theme_minimal() +
scale_fill_discrete("Step Type",labels = c("Lateral Step", "Forward Step", "Backward Step") # Custom legend labels
)
# Weight Transfer Duration by age group
ggplot(merged_df, aes(x = as.factor(`Group ( 1-young, 2-older adults)`), y = Weight_Transfer_Duration, fill = as.factor(`Step_Type (1 Lat :  2 Fwd : 3 Bwd)`))) +
geom_boxplot() +
labs(x = "Age Group (1 = Younger, 2 = Older)", y = "Weight Transfer Duration", title = "Weight Transfer Duration by Age Group") +
theme_minimal()+
scale_fill_discrete("Step Type",labels = c("Lateral Step", "Forward Step", "Backward Step") # Custom legend labels
)
View(Kine.dat)
View(Kine.dat)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
######################################################
#####   EDA/Data Summary and Data Visualization  #####
######################################################
## Load necessary libraries
library(readxl)
library(dplyr)
library(ggplot2)
## Load data from excel files provided by client
demographics <- read_excel("Demographics_.xlsx", sheet = "Sheet1")
muscle_data <- read_excel("Muscle_data.xlsx", sheet = "Muscledata_")
kinematic_data <- read_excel("Kinematic_Data_EMG.xlsx", sheet = "Kinematic")
## Clean up datasets and merge them
# Standardize subject IDs across the data files
muscle_data$ParticipantID[1:9] <- gsub("Pepper", "Pepper0",    # NOT ALL NEED A LEADING 0
muscle_data$ParticipantID[1:9])
# Drop EMG columns from kinematic data for now? (Can undo this if we get this data)
kinematic_data_clean <- kinematic_data %>% select(-matches("Electric Potential"))
# get rid of 0 in Step Type
kinematic_data_clean$`Step_Type (1 Lat :  2 Fwd : 3 Bwd)` <- gsub(0,1,kinematic_data_clean$`Step_Type (1 Lat :  2 Fwd : 3 Bwd)`)
## Merge all datasets into one
# Sort demographic data by Subject before left joining
demographics <- arrange(demographics, Subject) # first make sure these are in order
# Merge into one by left joining dataframes
merged_df <- demographics %>%
left_join(muscle_data, by = c("Subject" = "ParticipantID")) %>%
left_join(kinematic_data_clean, by = c("Subject" = "PID"))
## Find missing data
missing_summary <- colSums(is.na(merged_df))
# Display columns with missing values
missing_summary[missing_summary>0]
## Try some summary statistics for data exploration and visualization to follow
##  --->>> Need to determine what is relevant for summary stats!
summary_stats <- merged_df %>%
summarise(
Mean_Age = mean(`Age (years old)`, na.rm = TRUE),
Mean_Step_Length = mean(Full_Step_Length, na.rm = TRUE),
Mean_Step_Height = mean(Step_Height, na.rm = TRUE),
Mean_Step_Initiation_Time = mean(Step_Initiation_Time, na.rm = TRUE),
Mean_Weight_Transfer_Duration = mean(Weight_Transfer_Duration, na.rm = TRUE)
)
print(summary_stats)
View(demographics)
View(muscle_data)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
# read data
Kine.dat = read.csv("Kinematic_Data_EMG.csv",header = T)
# split into books
Kine.df = split(Kine.dat, Kine.dat$PID)
# initialize the dataframes (we will store our bootstraps in)
duration.bs <- onset.bs <- step.init.bs <- full.step.bs <- step.height.bs <-data.frame(NULL)
# initialize the xbar vectors
xbar.duration <- xbar.onset <- xbar.step.init <- xbar.full.step <-  xbar.step.height <- c()
# being loop
for(i in 1:20){
for(j in 1:5000){
# sample indices
k = sample(1:18,replace = T, size = 18)
# take means of the kth samples and store into the xbars
take = (Kine.df[[i]][["Weight_Transfer_Duration"]])[k]
xbar.duration[j] = mean(take)
take = (Kine.df[[i]][["Weight_Transfer_Onset_Initiation_Time"]])[k]
xbar.onset[j] = mean(take)
take = (Kine.df[[i]][["Step_Initiation_Time"]])[k]
xbar.step.init[j] = mean(take)
take = (Kine.df[[i]][["Full_Step_Length"]])[k]
xbar.full.step[j] = mean(take)
take = (Kine.df[[i]][["Step_Height"]])[k]
xbar.step.height[j] = mean(take)
}
# fill the BS data.frames row-by-row
duration.bs = rbind(duration.bs,xbar.duration)
onset.bs = rbind(onset.bs,xbar.onset)
step.init.bs = rbind(step.init.bs,xbar.step.init)
full.step.bs = rbind(full.step.bs,xbar.full.step)
step.height.bs = rbind(step.height.bs,xbar.step.height)
}
######################################################
#####   EDA/Data Summary and Data Visualization  #####
######################################################
## Load necessary libraries
library(readxl)
library(dplyr)
library(ggplot2)
## Load data from excel files provided by client
demographics <- read_excel("Demographics_.xlsx", sheet = "Sheet1")
muscle_data <- read_excel("Muscle_data.xlsx", sheet = "Muscledata_")
kinematic_data <- read_excel("Kinematic_Data_EMG.xlsx", sheet = "Kinematic")
## Clean up datasets and merge them
# Standardize subject IDs across the data files
muscle_data$ParticipantID[1:9] <- gsub("Pepper", "Pepper0",    # NOT ALL NEED A LEADING 0
muscle_data$ParticipantID[1:9])
# Drop EMG columns from kinematic data for now? (Can undo this if we get this data)
kinematic_data_clean <- kinematic_data %>% select(-matches("Electric Potential"))
# get rid of 0 in Step Type
kinematic_data_clean$`Step_Type (1 Lat :  2 Fwd : 3 Bwd)` <- gsub(0,1,kinematic_data_clean$`Step_Type (1 Lat :  2 Fwd : 3 Bwd)`)
## Merge all datasets into one
# Sort demographic data by Subject before left joining
demographics <- arrange(demographics, Subject) # first make sure these are in order
# Merge into one by left joining dataframes
merged_df <- demographics %>%
left_join(muscle_data, by = c("Subject" = "ParticipantID")) %>%
left_join(kinematic_data_clean, by = c("Subject" = "PID"))
## Find missing data
missing_summary <- colSums(is.na(merged_df))
# Display columns with missing values
missing_summary[missing_summary>0]
## Try some visualizations
##  --->>> Need to determine what is relevant for summary stats!
# step length by age group
ggplot(merged_df, aes(x = as.factor(`Group ( 1-young, 2-older adults)`), y = Full_Step_Length, fill = as.factor(`Step_Type (1 Lat :  2 Fwd : 3 Bwd)`))) +
geom_boxplot() +
labs(x = "Age Group (1 = Younger, 2 = Older)", y = "Full Step Length (m)", title = "Step Length by Age Group") +
theme_minimal() +
scale_fill_discrete(labels = c("Lateral Step", "Forward Step", "Backward Step") # Custom legend labels
)
# step height by age group
ggplot(merged_df, aes(x = as.factor(`Group ( 1-young, 2-older adults)`), y = Step_Height, fill = as.factor(`Step_Type (1 Lat :  2 Fwd : 3 Bwd)`))) +
geom_boxplot() +
labs(x = "Age Group (1 = Younger, 2 = Older)", y = "Step Height (m)", title = "Step Height by Age Group") +
theme_minimal() +
scale_fill_discrete(labels = c("Lateral Step", "Forward Step", "Backward Step") # Custom legend labels
)
# distribution of sample vastus lateralis thickness
ggplot(merged_df, aes(x = `VL_Thickness(cm)`)) +
geom_histogram(binwidth = 0.25, fill = "steelblue", color = "black") +
labs(x = "Vastus Lateralis Thickness (cm)", y = "Count", title = "Distribution of VL Thickness") +
theme_minimal()
# step initiation time by age group
ggplot(merged_df, aes(x = as.factor(`Group ( 1-young, 2-older adults)`) , y = Step_Initiation_Time, fill = as.factor(`Step_Type (1 Lat :  2 Fwd : 3 Bwd)`) )) +
geom_boxplot() +
labs(x = "Age Group (1 = Younger, 2 = Older)", y = "Step Initiation Time", title = "Step Initiation by Age Group") +
theme_minimal() +
scale_fill_discrete(labels = c("Lateral Step", "Forward Step", "Backward Step") # Custom legend labels
)
# Weight Transfer Onset Initiation Time by age group
ggplot(merged_df, aes(x = as.factor(`Group ( 1-young, 2-older adults)`), y = Weight_Transfer_Onset_Initiation_Time, fill = as.factor(`Step_Type (1 Lat :  2 Fwd : 3 Bwd)`))) +
geom_boxplot() +
labs(x = "Age Group (1 = Younger, 2 = Older)", y = "Weight Transfer Onset Initiation Time", title = "Weight Transfer Onset Initiation Time by Age Group") +
theme_minimal() +
scale_fill_discrete(labels = c("Lateral Step", "Forward Step", "Backward Step") # Custom legend labels
)
# Weight Transfer Duration by age group
ggplot(merged_df, aes(x = as.factor(`Group ( 1-young, 2-older adults)`), y = Weight_Transfer_Duration, fill = as.factor(`Step_Type (1 Lat :  2 Fwd : 3 Bwd)`))) +
geom_boxplot() +
labs(x = "Age Group (1 = Younger, 2 = Older)", y = "Weight Transfer Duration", title = "Weight Transfer Duration by Age Group") +
theme_minimal()+
scale_fill_discrete(labels = c("Lateral Step", "Forward Step", "Backward Step") # Custom legend labels
)
library(tidyverse)
plot(muscle_data$AgeGroup1Younger2Older, muscle_data$`TFL_Quality(au)`+muscle_data$`GM_quality(au)`)
plot(muscle_data$AgeGroup1Younger2Older, (muscle_data$`TFL_Quality(au)`+muscle_data$`GM_quality(au)`))
plot(muscle_data$AgeGroup1Younger2Older, (muscle_data$`TFL_Quality(au)`+muscle_data$`GM_quality(au)`))
plot(muscle_data$AgeGroup1Younger2Older, muscle_data$`VL_Quality(au)` + muscle_data$`VI_Quality(au)`)
plot(muscle_data$AgeGroup1Younger2Older, muscle_data$`BF_Quality(au)`)
boxplot(muscle_data$AgeGroup1Younger2Older, (muscle_data$`TFL_Quality(au)`+muscle_data$`GM_quality(au)`))
plot(muscle_data$AgeGroup1Younger2Older, muscle_data$`VL_Quality(au)` + muscle_data$`VI_Quality(au)`)
boxplot(muscle_data$AgeGroup1Younger2Older, (muscle_data$`TFL_Quality(au)`+muscle_data$`GM_quality(au)`))
boxplot(muscle_data$AgeGroup1Younger2Older, muscle_data$`VL_Quality(au)` + muscle_data$`VI_Quality(au)`)
boxplot(muscle_data$AgeGroup1Younger2Older, muscle_data$`BF_Quality(au)`)
?boxplot()
boxplot(muscle_data$AgeGroup1Younger2Older~ (muscle_data$`TFL_Quality(au)`+muscle_data$`GM_quality(au)`))
boxplot(muscle_data$AgeGroup1Younger2Older~ muscle_data$`VL_Quality(au)` + muscle_data$`VI_Quality(au)`)
boxplot(muscle_data$AgeGroup1Younger2Older~ muscle_data$`BF_Quality(au)`)
View(merged_df)
View(muscle_data)
?qnorm
pnorm(0.1, mean = mean(muscle_data$`VL_Thickness(cm)`), sd = sd(muscle_data$`VL_Thickness(cm)`))
pnorm(.5, mean = mean(muscle_data$`VL_Thickness(cm)`), sd = sd(muscle_data$`VL_Thickness(cm)`))
v <- pnorm(muscle_data$`VL_Thickness(cm)`, mean = mean(muscle_data$`VL_Thickness(cm)`), sd = sd(muscle_data$`VL_Thickness(cm)`))
v
muscle_data$Z_VL_Thickness <- (muscle_data$`VL_Thickness(cm)` - mean(muscle_data$`VL_Thickness(cm)`))/sd(muscle_data$`VL_Thickness(cm)`)
muscle_data$`VL_Thickness(cm)`
muscle_data$Z_VL_Thickness
mean(muscle_data$`VL_Thickness(cm)`)
# do the same for quality
muscle_data$Z_VL_Quality <- -(muscle_data$`VL_Quality(au)`-  mean(muscle_data$`VL_Quality(au)`))/sd(muscle_data$`VL_Quality(au)`)
muscle_data$Z_VL_Quality
muscle_data$`VL_Quality(au)`
mean(muscle_data$`VL_quality(au)`)
mean(muscle_data$`VL_Quality(au)`)
muscle_data$Z_VL_Thickness <- (muscle_data$`VL_Thickness(cm)` - mean(muscle_data$`VL_Thickness(cm)`))/sd(muscle_data$`VL_Thickness(cm)`)
muscle_data$Z_VI_Thickness <- (muscle_data$`VI_Thickness(cm)` - mean(muscle_data$`VI_Thickness(cm)`))/sd(muscle_data$`VI_Thickness(cm)`)
muscle_data$Z_BF_Thickness <- (muscle_data$`BF_Thickness(cm)` - mean(muscle_data$`BF_Thickness(cm)`))/sd(muscle_data$`BF_Thickness(cm)`)
muscle_data$Z_GM_Thickness <- (muscle_data$`GM_Thickness(cm)` - mean(muscle_data$`GM_Thickness(cm)`))/sd(muscle_data$`GM_Thickness(cm)`)
muscle_data$Z_TFL_Thickness <- (muscle_data$`TFL_Thickness(cm)` - mean(muscle_data$`TFL_Thickness(cm)`))/sd(muscle_data$`TFL_Thickness(cm)`)
muscle_data$Z_MG_Thickness <- (muscle_data$`MG_Thickness(cm)` - mean(muscle_data$`MG_Thickness(cm)`))/sd(muscle_data$`MG_Thickness(cm)`)
muscle_data$Z_SOL_Thickness <- (muscle_data$`Sol_Thickness(cm)` - mean(muscle_data$`Sol_Thickness(cm)`))/sd(muscle_data$`Sol_Thickness(cm)`)
muscle_data$Z_TA_Thickness <- (muscle_data$`TA_Thickness(cm)` - mean(muscle_data$`TA_Thickness(cm)`))/sd(muscle_data$`TA_Thickness(cm)`)
# do the same for quality
muscle_data$Z_VL_Quality <- -(muscle_data$`VL_Quality(au)` - mean(muscle_data$`VL_Quality(au)`))/sd(muscle_data$`VL_Quality(au)`)
muscle_data$Z_VI_Quality <- -(muscle_data$`VI_Quality(au)` - mean(muscle_data$`VI_Quality(au)`))/sd(muscle_data$`VI_Quality(au)`)
muscle_data$Z_BF_Quality <- -(muscle_data$`BF_Quality(au)` - mean(muscle_data$`BF_Quality(au)`))/sd(muscle_data$`BF_Quality(au)`)
muscle_data$Z_GM_Quality <- -(muscle_data$`GM_quality(au)` - mean(muscle_data$`GM_quality(au)`))/sd(muscle_data$`GM_quality(au)`)
muscle_data$Z_TFL_Quality <- -(muscle_data$`TFL_Quality(au)` - mean(muscle_data$`TFL_Quality(au)`))/sd(muscle_data$`TFL_Quality(au)`)
muscle_data$Z_MG_Quality <- -(muscle_data$`MG_Quality(au)` - mean(muscle_data$`MG_Quality(au)`))/sd(muscle_data$`MG_Quality(au)`)
muscle_data$Z_SOL_Quality <- -(muscle_data$`SOL_quality(au)` - mean(muscle_data$`SOL_quality(au)`))/sd(muscle_data$`SOL_quality(au)`)
muscle_data$Z_TA_Quality <- -(muscle_data$`TA_quality(au)` - mean(muscle_data$`TA_quality(au)`))/sd(muscle_data$`TA_quality(au)`)
sd(muscle_data$`Sol_Thickness(cm)`)
sd(muscle_data$`Sol_Thickness(cm)`,na.rm = 1)
muscle_data$Z_VL_Thickness <- (muscle_data$`VL_Thickness(cm)` - mean(muscle_data$`VL_Thickness(cm)`, na.rm =1))/sd(muscle_data$`VL_Thickness(cm)`, na.rm =1)
muscle_data$Z_VI_Thickness <- (muscle_data$`VI_Thickness(cm)` - mean(muscle_data$`VI_Thickness(cm)`, na.rm =1))/sd(muscle_data$`VI_Thickness(cm)`, na.rm =1)
muscle_data$Z_BF_Thickness <- (muscle_data$`BF_Thickness(cm)` - mean(muscle_data$`BF_Thickness(cm)`, na.rm =1))/sd(muscle_data$`BF_Thickness(cm)`, na.rm =1)
muscle_data$Z_GM_Thickness <- (muscle_data$`GM_Thickness(cm)` - mean(muscle_data$`GM_Thickness(cm)`, na.rm =1))/sd(muscle_data$`GM_Thickness(cm)`, na.rm =1)
muscle_data$Z_TFL_Thickness <- (muscle_data$`TFL_Thickness(cm)` - mean(muscle_data$`TFL_Thickness(cm)`, na.rm =1))/sd(muscle_data$`TFL_Thickness(cm)`, na.rm =1)
muscle_data$Z_MG_Thickness <- (muscle_data$`MG_Thickness(cm)` - mean(muscle_data$`MG_Thickness(cm)`, na.rm =1))/sd(muscle_data$`MG_Thickness(cm)`, na.rm =1)
muscle_data$Z_SOL_Thickness <- (muscle_data$`Sol_Thickness(cm)` - mean(muscle_data$`Sol_Thickness(cm)`, na.rm =1))/sd(muscle_data$`Sol_Thickness(cm)`, na.rm =1)
muscle_data$Z_TA_Thickness <- (muscle_data$`TA_Thickness(cm)` - mean(muscle_data$`TA_Thickness(cm)`, na.rm =1))/sd(muscle_data$`TA_Thickness(cm)`, na.rm =1)
# do the same for quality
muscle_data$Z_VL_Quality <- -(muscle_data$`VL_Quality(au)` - mean(muscle_data$`VL_Quality(au)`,na.rm = 1))/sd(muscle_data$`VL_Quality(au)`,na.rm = 1)
muscle_data$Z_VI_Quality <- -(muscle_data$`VI_Quality(au)` - mean(muscle_data$`VI_Quality(au)`,na.rm = 1))/sd(muscle_data$`VI_Quality(au)`,na.rm = 1)
muscle_data$Z_BF_Quality <- -(muscle_data$`BF_Quality(au)` - mean(muscle_data$`BF_Quality(au)`,na.rm = 1))/sd(muscle_data$`BF_Quality(au)`,na.rm = 1)
muscle_data$Z_GM_Quality <- -(muscle_data$`GM_quality(au)` - mean(muscle_data$`GM_quality(au)`,na.rm = 1))/sd(muscle_data$`GM_quality(au)`,na.rm = 1)
muscle_data$Z_TFL_Quality <- -(muscle_data$`TFL_Quality(au)` - mean(muscle_data$`TFL_Quality(au)`,na.rm = 1))/sd(muscle_data$`TFL_Quality(au)`,na.rm = 1)
muscle_data$Z_MG_Quality <- -(muscle_data$`MG_Quality(au)` - mean(muscle_data$`MG_Quality(au)`,na.rm = 1))/sd(muscle_data$`MG_Quality(au)`,na.rm = 1)
muscle_data$Z_SOL_Quality <- -(muscle_data$`SOL_quality(au)` - mean(muscle_data$`SOL_quality(au)`,na.rm = 1))/sd(muscle_data$`SOL_quality(au)`,na.rm = 1)
muscle_data$Z_TA_Quality <- -(muscle_data$`TA_quality(au)` - mean(muscle_data$`TA_quality(au)`,na.rm = 1))/sd(muscle_data$`TA_quality(au)`,na.rm = 1)
# do the same for quality
muscle_data$Z_VL_Quality <- -(muscle_data$`VL_Quality(au)` - mean(muscle_data$`VL_Quality(au)`,na.rm = 1))/sd(muscle_data$`VL_Quality(au)`,na.rm = 1)
muscle_data$Z_VI_Quality <- -(muscle_data$`VI_Quality(au)` - mean(muscle_data$`VI_Quality(au)`,na.rm = 1))/sd(muscle_data$`VI_Quality(au)`,na.rm = 1)
muscle_data$Z_BF_Quality <- -(muscle_data$`BF_Quality(au)` - mean(muscle_data$`BF_Quality(au)`,na.rm = 1))/sd(muscle_data$`BF_Quality(au)`,na.rm = 1)
muscle_data$Z_GM_Quality <- -(muscle_data$`GM_quality(au)` - mean(muscle_data$`GM_quality(au)`,na.rm = 1))/sd(muscle_data$`GM_quality(au)`,na.rm = 1)
muscle_data$Z_TFL_Quality <- -(muscle_data$`TFL_Quality(au)` - mean(muscle_data$`TFL_Quality(au)`,na.rm = 1))/sd(muscle_data$`TFL_Quality(au)`,na.rm = 1)
muscle_data$Z_MG_Quality <- -(muscle_data$`MG_Quality(au)` - mean(muscle_data$`MG_Quality(au)`,na.rm = 1))/sd(muscle_data$`MG_Quality(au)`,na.rm = 1)
muscle_data$Z_SOL_Quality <- -(muscle_data$`SOL_quality(au)` - mean(muscle_data$`SOL_quality(au)`,na.rm = 1))/sd(muscle_data$`SOL_quality(au)`,na.rm = 1)
muscle_data$Z_TA_Quality <- -(muscle_data$`TA_quality(au)` - mean(muscle_data$`TA_quality(au)`,na.rm = 1))/sd(muscle_data$`TA_quality(au)`,na.rm = 1)
View(muscle_data)
View(muscle_data)
muscle_data$Z_SOL_Thickness <- (muscle_data$`Sol_Thickness(cm)` - mean(muscle_data$`Sol_Thickness(cm)`, na.rm =1))/sd(muscle_data$`Sol_Thickness(cm)`, na.rm =1)
muscle_data$Z_SOL_Thickness <- (muscle_data$`Sol_Thickness(cm)` - mean(muscle_data$`Sol_Thickness(cm)`, na.rm =1))/sd(muscle_data$`Sol_Thickness(cm)`, na.rm =1)
(muscle_data$`VL_Thickness(cm)` - mean(muscle_data$`VL_Thickness(cm)`, na.rm =1))/sd(muscle_data$`VL_Thickness(cm)`, na.rm =1)
(muscle_data$`Sol_Thickness(cm)` - mean(muscle_data$`Sol_Thickness(cm)`, na.rm =1))/sd(muscle_data$`Sol_Thickness(cm)`, na.rm =1)
muscle_data$`Sol_Thickness(cm)
`
muscle_data$`Sol_Thickness(cm)`
mean(muscle_data$`Sol_Thickness(cm)`, na.rm =1)
mean(muscle_data$`Sol_Thickness(cm)`, na.rm = TRUE)
muscle_data$Z_SOL_Quality <- -(muscle_data$`SOL_quality(au)` - mean(muscle_data$`SOL_quality(au)`,na.rm = 1))/sd(muscle_data$`SOL_quality(au)`,na.rm = 1)
-(muscle_data$`SOL_quality(au)` - mean(muscle_data$`SOL_quality(au)`,na.rm = 1))/sd(muscle_data$`SOL_quality(au)`,na.rm = 1)
(muscle_data$`Sol_Thickness(cm)` - mean(muscle_data$`Sol_Thickness(cm)`, na.rm =TRUE))/sd(muscle_data$`Sol_Thickness(cm)`, na.rm =TRUE)
# do the same for quality
muscle_data$Z_VL_Quality <- -(muscle_data$`VL_Quality(au)` - mean(muscle_data$`VL_Quality(au)`,na.rm =TRUE))/sd(muscle_data$`VL_Quality(au)`,na.rm =TRUE)
muscle_data$Z_VI_Quality <- -(muscle_data$`VI_Quality(au)` - mean(muscle_data$`VI_Quality(au)`,na.rm =TRUE))/sd(muscle_data$`VI_Quality(au)`,na.rm =TRUE)
muscle_data$Z_BF_Quality <- -(muscle_data$`BF_Quality(au)` - mean(muscle_data$`BF_Quality(au)`,na.rm =TRUE))/sd(muscle_data$`BF_Quality(au)`,na.rm =TRUE)
muscle_data$Z_GM_Quality <- -(muscle_data$`GM_quality(au)` - mean(muscle_data$`GM_quality(au)`,na.rm =TRUE))/sd(muscle_data$`GM_quality(au)`,na.rm =TRUE)
muscle_data$Z_TFL_Quality <- -(muscle_data$`TFL_Quality(au)` - mean(muscle_data$`TFL_Quality(au)`,na.rm =TRUE))/sd(muscle_data$`TFL_Quality(au)`,na.rm =TRUE)
muscle_data$Z_MG_Quality <- -(muscle_data$`MG_Quality(au)` - mean(muscle_data$`MG_Quality(au)`,na.rm =TRUE))/sd(muscle_data$`MG_Quality(au)`,na.rm =TRUE)
muscle_data$Z_SOL_Quality <- -(muscle_data$`SOL_quality(au)` - mean(muscle_data$`SOL_quality(au)`,na.rm =TRUE))/sd(muscle_data$`SOL_quality(au)`,na.rm =TRUE)
muscle_data$Z_TA_Quality <- -(muscle_data$`TA_quality(au)` - mean(muscle_data$`TA_quality(au)`,na.rm =TRUE))/sd(muscle_data$`TA_quality(au)`,na.rm =TRUE)
muscle_data$Z_VL_Thickness <- (muscle_data$`VL_Thickness(cm)` - mean(muscle_data$`VL_Thickness(cm)`, na.rm =TRUE))/sd(muscle_data$`VL_Thickness(cm)`, na.rm =TRUE)
muscle_data$Z_VI_Thickness <- (muscle_data$`VI_Thickness(cm)` - mean(muscle_data$`VI_Thickness(cm)`, na.rm =TRUE))/sd(muscle_data$`VI_Thickness(cm)`, na.rm =TRUE)
muscle_data$Z_BF_Thickness <- (muscle_data$`BF_Thickness(cm)` - mean(muscle_data$`BF_Thickness(cm)`, na.rm =TRUE))/sd(muscle_data$`BF_Thickness(cm)`, na.rm =TRUE)
muscle_data$Z_GM_Thickness <- (muscle_data$`GM_Thickness(cm)` - mean(muscle_data$`GM_Thickness(cm)`, na.rm =TRUE))/sd(muscle_data$`GM_Thickness(cm)`, na.rm =TRUE)
muscle_data$Z_TFL_Thickness <- (muscle_data$`TFL_Thickness(cm)` - mean(muscle_data$`TFL_Thickness(cm)`, na.rm =TRUE))/sd(muscle_data$`TFL_Thickness(cm)`, na.rm =TRUE)
muscle_data$Z_MG_Thickness <- (muscle_data$`MG_Thickness(cm)` - mean(muscle_data$`MG_Thickness(cm)`, na.rm =TRUE))/sd(muscle_data$`MG_Thickness(cm)`, na.rm =TRUE)
muscle_data$Z_SOL_Thickness <- (muscle_data$`Sol_Thickness(cm)` - mean(muscle_data$`Sol_Thickness(cm)`, na.rm =TRUE))/sd(muscle_data$`Sol_Thickness(cm)`, na.rm =TRUE)
muscle_data$Z_TA_Thickness <- (muscle_data$`TA_Thickness(cm)` - mean(muscle_data$`TA_Thickness(cm)`, na.rm =TRUE))/sd(muscle_data$`TA_Thickness(cm)`, na.rm =TRUE)
muscle_data$Z_VL <- muscle_data$Z_VL_Quality + muscle_data$Z_VL_Thickness
muscle_data$Z_VL <- muscle_data$Z_VL_Quality + muscle_data$Z_VL_Thickness
muscle_data$Z_VI <- muscle_data$Z_VI_Quality + muscle_data$Z_VI_Thickness
muscle_data$Z_GM <- muscle_data$Z_GM_Quality + muscle_data$Z_GM_Thickness
muscle_data$Z_TFL <- muscle_data$Z_TFL_Quality + muscle_data$Z_TFL_Thickness
muscle_data$Z_MG <- muscle_data$Z_MG_Quality + muscle_data$Z_MG_Thickness
muscle_data$Z_SOL <- muscle_data$Z_SOL_Quality + muscle_data$Z_SOL_Thickness
muscle_data$Z_TA <- muscle_data$Z_TA_Quality + muscle_data$Z_TA_Thickness
muscle_data$Z_GM
muscle_data$Z_SOL
muscle_data$Z_MG_Quality
muscle_data$Z_SOL_Quality
muscle_data$Z_SOL_Thickness
muscle_data$Z_SOL
muscle_data$Z_VL <- mean(muscle_data$Z_VL_Quality , muscle_data$Z_VL_Thickness, na.rm = T)
mean((1,2),na.rm =T)
mean(c(1,2),na.rm =T)
muscle_data$Z_VL <- mean(c(muscle_data$Z_VL_Quality , muscle_data$Z_VL_Thickness), na.rm = T)
muscle_data$Z_VI <- mean(c(muscle_data$Z_VI_Quality , muscle_data$Z_VI_Thickness), na.rm = T)
muscle_data$Z_GM <- mean(c(muscle_data$Z_GM_Quality , muscle_data$Z_GM_Thickness), na.rm = T)
muscle_data$Z_TFL <- mean(c(muscle_data$Z_TFL_Quality , muscle_data$Z_TFL_Thickness), na.rm = T)
muscle_data$Z_MG <- mean(c(muscle_data$Z_MG_Quality , muscle_data$Z_MG_Thickness), na.rm = T)
muscle_data$Z_SOL <-mean( c(muscle_data$Z_SOL_Quality , muscle_data$Z_SOL_Thickness), na.rm = T)
muscle_data$Z_TA <- mean(c(muscle_data$Z_TA_Quality , muscle_data$Z_TA_Thickness), na.rm = T)
muscle_data$Z_VL
muscle_data$Z_VL <- mean(cbind(muscle_data$Z_VL_Quality , muscle_data$Z_VL_Thickness), na.rm = T)
muscle_data$Z_VL
muscle_data$Z_VL <- rowMeans(cbind(muscle_data$Z_VL_Quality , muscle_data$Z_VL_Thickness), na.rm = T)
muscle_data$Z_VL
(muscle_data$Z_VL_Quality + muscle_data$Z_VL_Thickness)/2
muscle_data$Z_VL <- rowMeans(cbind(muscle_data$Z_VL_Quality , muscle_data$Z_VL_Thickness), na.rm = T)
muscle_data$Z_VI <- rowMeans(cbind(muscle_data$Z_VI_Quality , muscle_data$Z_VI_Thickness), na.rm = T)
muscle_data$Z_GM <- rowMeans(cbind(muscle_data$Z_GM_Quality , muscle_data$Z_GM_Thickness), na.rm = T)
muscle_data$Z_TFL <- rowMeans(cbind(muscle_data$Z_TFL_Quality , muscle_data$Z_TFL_Thickness), na.rm = T)
muscle_data$Z_MG <- rowMeans(cbind(muscle_data$Z_MG_Quality , muscle_data$Z_MG_Thickness), na.rm = T)
muscle_data$Z_SOL <-rowMeans(cbind(muscle_data$Z_SOL_Quality , muscle_data$Z_SOL_Thickness), na.rm = T)
muscle_data$Z_TA <- rowMeans(cbind(muscle_data$Z_TA_Quality , muscle_data$Z_TA_Thickness), na.rm = T)
View(muscle_data)
