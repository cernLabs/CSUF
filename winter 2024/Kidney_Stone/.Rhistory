knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
# loading packages
library(caret)
library(yardstick)
library(dplyr)
library(modelr)
library(ggplot2)
# loading data into dataframes
train <- read.csv('train.csv')
test <- read.csv('test.csv')
View(train)
# loading packages
library(caret)
library(yardstick)
library(dplyr)
library(modelr)
library(ggplot2)
# loading data into dataframes
train <- read.csv('train.csv')
test <- read.csv('test.csv')
View(test)
# get the names of all the variables to copy + paste easier
# Iterate over column names and apply unique() to each variable
for (col in names(train)) {
unique_entries <- unique(df[[col]])
# Print the unique entries for each variable
cat("Unique entries for", col, ":\n")
print(unique_entries)
cat("\n")
}
names(train)
# get the names of all the variables to copy + paste easier
# Iterate over column names and apply unique() to each variable
for (col in names(train)) {
unique_entries <- unique(train[[col]])
# Print the unique entries for each variable
cat("Unique entries for", col, ":\n")
print(unique_entries)
cat("\n")
}
# make bar graphs for each variable
for (col in names(train)) {
ooo <- ggplot(train, aes(x = .data[[col]])) + geom_bar(stat = "count", fill = "skyblue")
plot(ooo)
}
geom_point(?)
library(GGally)
ggpairs(train,aes(color = target))
knitr::opts_chunk$set(echo = TRUE)
# loading packages
library(caret)
library(yardstick)
library(dplyr)
library(modelr)
library(ggplot2)
library(GGally)
# loading data into dataframes
train <- read.csv('train.csv')
test <- read.csv('test.csv')
ggpairs(train,aes(color = target))
dim(train[["target"]])
dim(train$target)
length(train$target)
1 + length(train$target)
for (i in 1:length(train$target)){
if (train$target[[i]] == 1){
'yes' <- train$target[[i]]
}
else{
'no' <- train$target[[i]]
}
}
View(train)
View(train)
View(train)
View(train)
train$target[[1]]
train$target <- as.character(train$target)
ggpairs(train,aes(color = target))
ggpairs(train[-id],aes(color = target))
ggpairs(train[,-id],aes(color = target))
ggpairs(train,aes(color = target))
ggpairs(train,aes(color = target))
train <-  train[,-id]
train <-  train[,!id]
train <-  train[-id]
train <-  train[!id]
# train a logistic model
fit_logit <- train(target ~ gravity + osmo + cond + urea + calc,
data = train,
method = "glm",
family = "binomial",
trControl = trainControl(method = 'LOOCV'))
# train a logistic model
fit_logit <- train(target ~ gravity + osmo + cond + urea + calc,
data = train,
method = "glm",
family = "binomial",
trControl = trainControl(method = 'LOOCV'))
# train a logistic model
fit_logit <- train(target ~ gravity + osmo + cond + urea + calc,
data = train,
method = "glmnet",
family = "binomial",
trControl = trainControl(method = 'LOOCV'))
# train a logistic model
fit_logit <- train(target ~ gravity + osmo + cond + urea + calc,
data = train,
method = "glmn",
family = "binomial",
trControl = trainControl(method = 'LOOCV'))
# train a logistic model
fit_logit <- train(target ~ gravity + osmo + cond + urea + calc,
data = train,
method = "glm",
family = "binomial",
trControl = trainControl(method = 'LOOCV'))
# making new columns
train <- train %>%
mutate(logit_yhat = predict(fit_logit,newdata=.,type="raw")) %>%
mutate(logit_prob = predict(fit_logit, newdata = .,type="prob")$'1')
accuracy(train,truth=target,estimate=logit_yhat)
train$target <- as.integer(train$target)
accuracy(train,truth=target,estimate=logit_yhat)
train$target <- as.factor(train$target)
accuracy(train,truth=target,estimate=logit_yhat)
knitr::opts_chunk$set(echo = TRUE)
# loading data into dataframes
stone <- read.csv("kindey stone urine analysis.csv")
#split data for train and testing
set.seed(530)
#building a new column called "train"
stone <- stone %>% mutate(train = FALSE)
# loading packages
library(caret)
library(yardstick)
library(dplyr)
library(modelr)
library(ggplot2)
library(GGally)
# loading data into dataframes
stone <- read.csv("kindey stone urine analysis.csv")
#split data for train and testing
set.seed(530)
#building a new column called "train"
stone <- stone %>% mutate(train = FALSE)
trainIndex <- createDataPartition(stone$target, p = 0.7, list = FALSE, times = 1)
stone$train[trainIndex] <- TRUE
#rename the new test a train sets
stone_train <- stone %>%  filter(train == TRUE)
stone_test <- stone %>% filter(train == FALSE)
View(stone_test)
View(stone_train)
View(stone)
View(stone_test)
ggpairs(train,aes(color = target))
ggpairs(stone_train,aes(color = target))
train$target <- as.character(train$target)
ggpairs(stone_train,aes(color = target))
train$target <- as.character(train$target)
ggpairs(stone_train,aes(color = target))
stone_train$target <- as.character(stone_train$target)
stone_train$target <- as.character(stone_train$target)
ggpairs(stone_train,aes(color = target))
# train a logistic model
fit_logit <- train(target ~ gravity + osmo + cond + urea + calc,
data = stone_train,
method = "glm",
family = "binomial",
trControl = trainControl(method = 'LOOCV'))
# train a logistic model
fit_logit <- train(target ~ gravity + osmo + cond + urea + calc,
data = stone_train,
method = "glm",
family = "binomial",
trControl = trainControl(method = 'LOOCV'))
# making new columns
stone_train  <- stone_train %>%
mutate(logit_yhat = predict(fit_logit,newdata=.,type="raw")) %>%
mutate(logit_prob = predict(fit_logit, newdata = .,type="prob")$'1')
train$target <- as.factor(train$target)
accuracy(train,truth=target,estimate=logit_yhat)
# making new columns
stone_train  <- stone_train %>%
mutate(logit_yhat = predict(fit_logit,newdata=.,type="raw")) %>%
mutate(logit_prob = predict(fit_logit, newdata = .,type="prob")$'1')
stone_train$target <- as.factor(stone_train$target)
accuracy(stone_train,truth=target,estimate=logit_yhat)
View(stone_train)
View(stone_train)
View(stone_test)
View(stone_train)
# making new columns on the test set
stone_test  <- stone_test %>%
mutate(logit_yhat = predict(fit_logit,newdata=.,type="raw")) %>%
mutate(logit_prob = predict(fit_logit, newdata = .,type="prob")$'1')
stone_train$target <- as.factor(stone_train$target)
accuracy(stone_train,truth=target,estimate=logit_yhat)
stone_train$target <- as.factor(stone_train$target)
accuracy(stone_test,truth=target,estimate=logit_yhat)
stone_test$target <- as.factor(stone_test$target)
accuracy(stone_test,truth=target,estimate=logit_yhat)
# train a naives-bayes model
fit_nb <- train(target ~ gravity + osmo + cond + urea + calc,
data = stone_train,
method = "naive_bayes")
# train a naives-bayes model
fit_nb <- train(target ~ gravity + osmo + cond + urea + calc,
data = stone_train,
method = "naive_bayes")
# train a LDA model
fit_lda <- train(target ~ gravity + osmo + cond + urea + calc,
data = stone_train,
method = "lda",)
# train a LDA model
fit_lda <- train(target ~ gravity + osmo + cond + urea + calc,
data = stone_train,
method = "lda")
# train a QDA model
fit_qda <- train(target ~ gravity + osmo + cond + urea + calc,
data = stone_train,
method = "qda")
# train a QDA model
fit_qda <- train(target ~ gravity + osmo + cond + urea + calc,
data = stone_train,
method = "qda")
# making even more new columns on the test set
# columns for naive_bayes predictions
stone_test <- stone_test %>%
mutate(nb_yhat = predict(fit_nb, newdata =., type = "raw")) %>%
mutate(nb_prob = predict(fit_nb, newdata=., type = "raw"))
# columns for LDA predictions
stone_test <- stone_test %>%
mutate(lda_yhat = predict(fit_lda, newdata=., type="raw")) %>%
mutate(lda_prob = predict(fit_lda, newdata=., type="raw"))
# columns for QDA predictions
stone_test %>% stone_test %>%
mutate(qda_yhat = predict(fit_qda, newdata=., type = "raw")) %>%
mutate(qda_prob = predict(fit_qda, newdata=., type = "raw"))
# making even more new columns on the test set
# columns for naive_bayes predictions
stone_test <- stone_test %>%
mutate(nb_yhat = predict(fit_nb, newdata =., type = "raw")) %>%
mutate(nb_prob = predict(fit_nb, newdata=., type = "raw")$'1')
knitr::opts_chunk$set(echo = TRUE)
# loading packages
library(caret)
library(yardstick)
library(dplyr)
library(modelr)
library(ggplot2)
library(GGally)
# loading data into dataframes
stone <- read.csv("kindey stone urine analysis.csv")
#split data for train and testing
set.seed(530)
#building a new column called "train"
stone <- stone %>% mutate(train = FALSE)
trainIndex <- createDataPartition(stone$target, p = 0.7, list = FALSE, times = 1)
stone$train[trainIndex] <- TRUE
#rename the new test a train sets
stone_train <- stone %>%  filter(train == TRUE)
stone_test <- stone %>% filter(train == FALSE)
stone_train$target <- as.character(stone_train$target)
ggpairs(stone_train,aes(color = target))
# train a logistic model
fit_logit <- train(target ~ gravity + osmo + cond + urea + calc,
data = stone_train,
method = "glm",
family = "binomial",
trControl = trainControl(method = 'LOOCV'))
# train a naives-bayes model
fit_nb <- train(target ~ gravity + osmo + cond + urea + calc,
data = stone_train,
method = "naive_bayes")
# train a LDA model
fit_lda <- train(target ~ gravity + osmo + cond + urea + calc,
data = stone_train,
method = "lda")
# train a QDA model
fit_qda <- train(target ~ gravity + osmo + cond + urea + calc,
data = stone_train,
method = "qda")
# making new columns on the test set
stone_test  <- stone_test %>%
mutate(logit_yhat = predict(fit_logit,newdata=.,type="raw")) %>%
mutate(logit_prob = predict(fit_logit, newdata = .,type="prob")$'1')
# making even more new columns on the test set
# columns for naive_bayes predictions
stone_test <- stone_test %>%
mutate(nb_yhat = predict(fit_nb, newdata =., type = "raw")) %>%
mutate(nb_prob = predict(fit_nb, newdata=., type = "raw")$'1')
# making even more new columns on the test set
# columns for naive_bayes predictions
stone_test <- stone_test %>%
mutate(nb_yhat = predict(fit_nb, newdata =., type = "raw")) %>%
mutate(nb_prob = predict(fit_nb, newdata=., type = "prob")$'1')
# columns for LDA predictions
stone_test <- stone_test %>%
mutate(lda_yhat = predict(fit_lda, newdata=., type="raw")) %>%
mutate(lda_prob = predict(fit_lda, newdata=., type="prob")$'1')
# columns for QDA predictions
stone_test %>% stone_test %>%
mutate(qda_yhat = predict(fit_qda, newdata=., type = "raw")) %>%
mutate(qda_prob = predict(fit_qda, newdata=., type = "prob")$'1')
# columns for QDA predictions
stone_test <- stone_test %>%
mutate(qda_yhat = predict(fit_qda, newdata=., type = "raw")) %>%
mutate(qda_prob = predict(fit_qda, newdata=., type = "prob")$'1')
stone_test %>% accuracy(truth=target,estimate=logit_yhat) %>%
accuracy(truth = target, estimate = nb_yhat) %>%
accuracy(truth = target, estimate = lda_yhat) %>%
accuracy(truth = target, estimate = qda_yhat)
stone_test %>% accuracy(truth=target,estimate=logit_yhat)
stone_test$target <- as.factor(stone_test$target)
stone_test %>% accuracy(truth=target,estimate=logit_yhat)
stone_test %>% accuracy(truth = target, estimate = nb_yhat)
stone_test %>% accuracy(truth = target, estimate = lda_yhat)
stone_test %>% accuracy(truth = target, estimate = qda_yhat)
stone_test %>% accuracy(truth=target,estimate=logit_yhat) %>%
accuracy(truth = target, estimate = nb_yhat) %>%
accuracy(truth = target, estimate = lda_yhat) %>%
accuracy(truth = target, estimate = qda_yhat)
stone_test %>% accuracy(truth=target,estimate=logit_yhat)
stone_test %>% accuracy(truth = target, estimate = nb_yhat)
stone_test %>% accuracy(truth = target, estimate = lda_yhat)
stone_test %>% accuracy(truth = target, estimate = qda_yhat)
# for logistic
stone %>% filter(train == FALSE) %>% conf_mat(target,logit_yhat)
View(stone_train)
# for logistic
stone_test %>% conf_mat(target,logit_yhat)
# for naive-bayes
stone_test %>% conf_mat(target,nb_yhat)
#for lda
stone_test %>% conf_mat(target,lda_yhat)
# for qda
stone_test %>% conf_mat(target,qda_yhat)
#ROC for logistic
stone_test %>%
roc_curve(truth = target,
estimate = logit_prob,
event_level = "Second") %>%
autoplot()
#ROC for logistic
stone_test %>%
roc_curve(truth = target,
estimate = logit_prob,
event_level = "second") %>%
autoplot()
# ROC for naive-bayes
stone_test %>%
roc_curve(truth = target,
estimate = nb_prob,
event_level = "second") %>%
autoplot()
# ROC for LDA
stone_test %>%
roc_curve(truth = target,
estimate = lda_prob,
event_level = "second") %>%
autoplot()
# ROC for QDA
stone_test %>%
roc_curve(truth = target,
estimate = qda_prob,
event_level = "second") %>%
autoplot()
#ROC for logistic
stone_test %>%
roc_curve(truth = target,
estimate = logit_prob,
event_level = "second") %>%
autoplot()
# ROC for naive-bayes
stone_test %>%
roc_curve(truth = target,
estimate = nb_prob,
event_level = "second") %>%
autoplot()
# ROC for LDA
stone_test %>%
roc_curve(truth = target,
estimate = lda_prob,
event_level = "second") %>%
autoplot()
# ROC for QDA
stone_test %>%
roc_curve(truth = target,
estimate = qda_prob,
event_level = "second") %>%
autoplot()
#ROC for logistic
stone_test %>%
roc_curve(truth = target,
estimate = logit_prob,
event_level = "second") %>%
autoplot()
roc_logit <- roc_curve(data = stone_test,
truth = target,
estimate = logit_prob,
event_level = "second")
autoplot(roc_logit)
# ROC for naive-bayes
stone_test %>%
roc_curve(truth = target,
estimate = nb_prob,
event_level = "second") %>%
autoplot()
# ROC for LDA
stone_test %>%
roc_curve(truth = target,
estimate = lda_prob,
event_level = "second") %>%
autoplot()
# ROC for QDA
stone_test %>%
roc_curve(truth = target,
estimate = qda_prob,
event_level = "second") %>%
autoplot()
#for logistic
stone_test %>% roc_auc(target,logit_prob, event_level = 'second')
# for nai-bayes
stone_test %>% roc_auc(target,nb_prob, event_level = 'second')
# for lda
stone_test %>% roc_auc(target,lda_prob, event_level = 'second')
# for qda
stone_test %>% roc_auc(target,qda_prob, event_level = 'second')
#ROC for logistic
stone_test %>%
roc_curve(truth = target,
estimate = logit_prob,
event_level = "second") %>%
autoplot()
# ROC for naive-bayes
stone_test %>%
roc_curve(truth = target,
estimate = nb_prob,
event_level = "second") %>%
autoplot()
# ROC for LDA
stone_test %>%
roc_curve(truth = target,
estimate = lda_prob,
event_level = "second") %>%
autoplot()
# ROC for QDA
stone_test %>%
roc_curve(truth = target,
estimate = qda_prob,
event_level = "second") %>%
autoplot()
