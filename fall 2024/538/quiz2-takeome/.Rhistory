}
# MH step for alpha/beta
phi.star = rProposal(1, c(log(alpha0),log(beta0)), 1*S)
alpha.star = exp(phi.star[1])
beta.star = exp(phi.star[2])
r = exp(
LLh(theta.c, alpha.star, beta.star)
+ log(Prior(alpha.star, beta.star))
+ log(Proposal(alpha0, beta0))
- LLh(theta0, alpha0, beta0)
- log(Prior(alpha0, beta0))
- log(Proposal(alpha.star, beta.star))
)
# logic selection
if(runif(1) < min(1,r)){
alpha0 = alpha.star
beta0 = beta.star
accept = accept + 1
}
# drop off
alpha.post[b] = alpha0
beta.post[b] = beta0
theta.post2[,b] = theta0
}
# output
return(list("alpha"=alpha.post,"beta"=beta.post,"theta"=theta.post2,"AR"=accept/B))
}
Algo(yin,Nin,5000,Stune) -> obj2
nrow(yin)
length(yin)
# The Algorithm
Algo <- function(y,N,B,S){
# initials
n = length(y)
accept = 0
alpha.post <- beta.post <- numeric()
theta.post.2 = matrix(0,ncol = B, nrow = n)
# intial variables
alpha0 = 4.1112
beta0 = 7
theta0 = numeric(length = n)
# LOOP
for(b in 1:B){
# Gibbss step for thetas
for(j in 1:n){
shp1 = alpha0 + y[j]
shp2 = beta0 + N[j] - y[j]
theta0[j] = rbeta(1,shp1,shp2)
}
# MH step for alpha/beta
phi.star = rProposal(1, c(log(alpha0),log(beta0)), 1*S)
alpha.star = exp(phi.star[1])
beta.star = exp(phi.star[2])
r = exp(
LLh(theta.c, alpha.star, beta.star)
+ log(Prior(alpha.star, beta.star))
+ log(Proposal(alpha0, beta0))
- LLh(theta0, alpha0, beta0)
- log(Prior(alpha0, beta0))
- log(Proposal(alpha.star, beta.star))
)
# logic selection
if(runif(1) < min(1,r)){
alpha0 = alpha.star
beta0 = beta.star
accept = accept + 1
}
# drop off
alpha.post[b] = alpha0
beta.post[b] = beta0
theta.post2[,b] = theta0
}
# output
return(list("alpha"=alpha.post,"beta"=beta.post,"theta"=theta.post2,"AR"=accept/B))
}
Algo(yin,Nin,5000,Stune) -> obj2
# The Algorithm
Algo <- function(y,N,B,S){
# initials
n = length(y)
accept = 0
alpha.post <- beta.post <- numeric()
theta.post.2 = matrix(0,ncol = B, nrow = n)
# intial variables
alpha0 = 4.1112
beta0 = 7
theta0 = numeric(length = n)
# LOOP
for(b in 1:B){
# Gibbss step for thetas
for(j in 1:n){
shp1 = alpha0 + y[j]
shp2 = beta0 + N[j] - y[j]
theta0[j] = rbeta(1,shp1,shp2)
}
# MH step for alpha/beta
phi.star = rProposal(1, c(log(alpha0),log(beta0)), 1*S)
alpha.star = exp(phi.star[1])
beta.star = exp(phi.star[2])
r = exp(
LLh(theta0, alpha.star, beta.star)
+ log(Prior(alpha.star, beta.star))
+ log(Proposal(alpha0, beta0))
- LLh(theta0, alpha0, beta0)
- log(Prior(alpha0, beta0))
- log(Proposal(alpha.star, beta.star))
)
# logic selection
if(runif(1) < min(1,r)){
alpha0 = alpha.star
beta0 = beta.star
accept = accept + 1
}
# drop off
alpha.post[b] = alpha0
beta.post[b] = beta0
theta.post2[,b] = theta0
}
# output
return(list("alpha"=alpha.post,"beta"=beta.post,"theta"=theta.post2,"AR"=accept/B))
}
Algo(yin,Nin,5000,Stune) -> obj2
# The Algorithm
Algo <- function(y,N,B,S){
# initials
n = length(y)
accept = 0
alpha.post <- beta.post <- numeric()
theta.post2 = matrix(0,ncol = B, nrow = n)
# intial variables
alpha0 = 4.1112
beta0 = 7
theta0 = numeric(length = n)
# LOOP
for(b in 1:B){
# Gibbss step for thetas
for(j in 1:n){
shp1 = alpha0 + y[j]
shp2 = beta0 + N[j] - y[j]
theta0[j] = rbeta(1,shp1,shp2)
}
# MH step for alpha/beta
phi.star = rProposal(1, c(log(alpha0),log(beta0)), 1*S)
alpha.star = exp(phi.star[1])
beta.star = exp(phi.star[2])
r = exp(
LLh(theta0, alpha.star, beta.star)
+ log(Prior(alpha.star, beta.star))
+ log(Proposal(alpha0, beta0))
- LLh(theta0, alpha0, beta0)
- log(Prior(alpha0, beta0))
- log(Proposal(alpha.star, beta.star))
)
# logic selection
if(runif(1) < min(1,r)){
alpha0 = alpha.star
beta0 = beta.star
accept = accept + 1
}
# drop off
alpha.post[b] = alpha0
beta.post[b] = beta0
theta.post2[,b] = theta0
}
# output
return(list("alpha"=alpha.post,"beta"=beta.post,"theta"=theta.post2,"AR"=accept/B))
}
Algo(yin,Nin,5000,Stune) -> obj2
View(obj2)
# retune with posterior
a11  = var(obj2$alpha)
a12 <- cov(obj2$alpha,obj2$beta)
a22 <- var(obj2$beta)
Stune = matrix(c(a11,a12,a12,a22),2,2, byrow = T)
# rerun algorithm
Algo(yin,Nin,5000,Stune) -> obj2
View(obj2)
Stune = matrix(c(a11,a12,a12,a22),2,2, byrow = T)
# retune with posterior
a11  = var(obj2$alpha)
a12 <- cov(obj2$alpha,obj2$beta)
a22 <- var(obj2$beta)
Stune = matrix(c(a11,a12,a12,a22),2,2, byrow = T)
# rerun algorithm
Algo(yin,Nin,5000,Stune) -> obj2
View(obj2)
Stune
# rerun algorithm
Algo(yin,Nin,50000,Stune) -> obj2
View(row)
View(obj2)
Stune = diag(2)
contr$y -> yin
contr$N -> Nin
Algo(yin,Nin,50000,Stune) -> obj2
obj2$AR
a11  = var(obj2$alpha)
a12 <- cov(obj2$alpha,obj2$beta)
a22 <- var(obj2$beta)
Stune = matrix(c(a11,a12,a12,a22),2,2, byrow = T)
Stune
# rerun algorithm
Algo(yin,Nin,50000,Stune) -> obj2
View(obj2)
a11  = var(obj2$alpha)
a12 <- cov(obj2$alpha,obj2$beta)
a22 <- var(obj2$beta)
Stune = matrix(c(a11,a12,a12,a22),2,2, byrow = T)
Stune
# rerun algorithm
Algo(yin,Nin,5000,Stune) -> obj2
View(obj2)
# visualizations
trace(obj2$alpha)
# visualizations
plot.ts(obj2$alpha)
acf(obj2$alpha)
par(mfrow = c(1,2))
# visualizations
plot.ts(obj2$alpha)
acf(obj2$alpha)
plot.ts(obj2$beta)
acf(obj2$beta)
# rerun algorithm
Algo(yin,Nin,50000,Stune) -> obj2
par(mfrow = c(1,2))
# visualizations
plot.ts(obj2$alpha)
acf(obj2$alpha)
plot.ts(obj2$beta)
acf(obj2$beta)
B = length(obj2$alpha)
1:B*40 -> k
k = k[burn < k < B]
k = k[burn < k & k< B]
burn = 20000
1:B*40 -> k
k = k[burn < k & k< B]
alpha.thin = obj2$alpha[k]
beta.thin = obj2$beta[k]
# burned/thinned visualizations
par(mfrow = c(1,2))
par(mfrow = c(1,2))
plot.ts(alpha.thin)
acf(alpha.thin)
plot.ts(beta.thin)
acf(beta.thin)
dens = density(alpha.thin)
plot(dens)
abline(v = MAP(alpha.thin))
dens = density(beta.thin)
plot(dens)
abline(v = MAP(beta.thin))
# visuals
dens = density(alpha.thin)
plot(dens)
abline(v = MAP(alpha.thin))
dens = density(beta.thin)
plot(dens)
abline(v = MAP(beta.thin))
# table
cred.map = rbind(
c(quantile(alpha.thin,0.025),MAP(alpha.thin),quantile(alpha.thin,.975)),
c(quantile(alpha.thin,0.025),MAP(beta.thin),quantile(beta.thin,.975))
)
rownames(cred.map) = c("alpha", "beta")
colnames(cred.map) = c("Lower","MAP","Upper")
kable(cred.map, caption = "95% cred. interval and MAP")
ev = alpha.thin(alpha.thin+beta.thin)
ev = alpha.thin/(alpha.thin+beta.thin)
# visuals
dens = density(alpha.thin)
plot(dens)
abline(v = MAP(alpha.thin))
dens = density(beta.thin)
plot(dens)
abline(v = MAP(beta.thin))
ev = alpha.thin/(alpha.thin+beta.thin)
dens = density(ev)
plot(dens)
abline(v = MAP(ev))
# table
cred.map = rbind(
c(quantile(alpha.thin,0.025),MAP(alpha.thin),quantile(alpha.thin,.975)),
c(quantile(alpha.thin,0.025),MAP(beta.thin),quantile(beta.thin,.975)),
c(quantile(ev,0.025),MAP(ev),quantile(ev,.975))
)
rownames(cred.map) = c("alpha", "beta", "E[theta]")
colnames(cred.map) = c("Lower","MAP","Upper")
kable(cred.map, caption = "95% cred. interval and MAP")
# visuals
dens = density(alpha.thin)
plot(dens)
abline(v = MAP(alpha.thin))
dens = density(beta.thin)
plot(dens)
abline(v = MAP(beta.thin))
ev = alpha.thin/(alpha.thin+beta.thin)
dens = density(ev)
plot(dens, main = "E[theta]")
abline(v = MAP(ev))
# table
cred.map = rbind(
c(quantile(alpha.thin,0.025),MAP(alpha.thin),quantile(alpha.thin,.975)),
c(quantile(alpha.thin,0.025),MAP(beta.thin),quantile(beta.thin,.975)),
c(quantile(ev,0.025),MAP(ev),quantile(ev,.975))
)
rownames(cred.map) = c("alpha", "beta", "E[theta]")
colnames(cred.map) = c("Lower","MAP","Upper")
kable(cred.map, caption = "95% cred. interval and MAP")
# define bayesians funcs
Prior <-  function(alpha,beta){
(alpha + beta)^(-5/2)
}
LLh <- function(theta,alpha,beta){
sum(log(dbeta(theta, alpha, beta)))
}
Proposal <- function(alpha,beta){
1/(alpha*beta)
}
rProposal <- function(n,mean,cov){
rmvnorm(n,mean,cov)
}
# The Algorithm
Algo <- function(y,N,B,S){
set.seed(538)
# initials
n = length(y)
accept = 0
alpha.post <- beta.post <- numeric()
theta.post2 = matrix(0,ncol = B, nrow = n)
# intial variables
alpha0 = 4.1112
beta0 = 7
theta0 = numeric(length = n)
# LOOP
for(b in 1:B){
# Gibbss step for thetas
for(j in 1:n){
shp1 = alpha0 + y[j]
shp2 = beta0 + N[j] - y[j]
theta0[j] = rbeta(1,shp1,shp2)
}
# MH step for alpha/beta
phi.star = rProposal(1, c(log(alpha0),log(beta0)), 1*S)
alpha.star = exp(phi.star[1])
beta.star = exp(phi.star[2])
r = exp(
LLh(theta0, alpha.star, beta.star)
+ log(Prior(alpha.star, beta.star))
+ log(Proposal(alpha0, beta0))
- LLh(theta0, alpha0, beta0)
- log(Prior(alpha0, beta0))
- log(Proposal(alpha.star, beta.star))
)
# logic selection
if(runif(1) < min(1,r)){
alpha0 = alpha.star
beta0 = beta.star
accept = accept + 1
}
# drop off
alpha.post[b] = alpha0
beta.post[b] = beta0
theta.post2[,b] = theta0
}
# output
return(list("alpha"=alpha.post,"beta"=beta.post,"theta"=theta.post2,"AR"=accept/B))
}
# run the algorithm
Stune = diag(2)
contr$y -> yin
contr$N -> Nin
Algo(yin,Nin,50000,Stune) -> obj2
obj2$AR
# retune with posterior
a11  = var(obj2$alpha)
a12 <- cov(obj2$alpha,obj2$beta)
a22 <- var(obj2$beta)
Stune = matrix(c(a11,a12,a12,a22),2,2, byrow = T)
Stune
# rerun algorithm
Algo(yin,Nin,50000,Stune) -> obj2
par(mfrow = c(1,2))
# visualizations
plot.ts(obj2$alpha,xlab = "index")
acf(obj2$alpha)
plot.ts(obj2$beta,xlab = "index")
acf(obj2$beta)
B = length(obj2$alpha)
obj2$AR
par(mfrow = c(1,2))
# visualizations
plot.ts(obj2$alpha,xlab = "index")
acf(obj2$alpha)
plot.ts(obj2$beta,xlab = "index")
acf(obj2$beta)
B = length(obj2$alpha)
burn = 20000
1:B*40 -> k
k = k[burn < k & k< B]
alpha.thin = obj2$alpha[k]
beta.thin = obj2$beta[k]
# burned/thinned visualizations
par(mfrow = c(1,2))
plot.ts(alpha.thin,xlab = "index")
acf(alpha.thin)
plot.ts(beta.thin,xlab = "index")
acf(beta.thin)
# visuals
dens = density(alpha.thin)
plot(dens)
abline(v = MAP(alpha.thin))
dens = density(beta.thin)
plot(dens)
abline(v = MAP(beta.thin))
ev = alpha.thin/(alpha.thin+beta.thin)
dens = density(ev)
plot(dens, main = "E[theta]")
abline(v = MAP(ev))
# table
cred.map = rbind(
c(quantile(alpha.thin,0.025),MAP(alpha.thin),quantile(alpha.thin,.975)),
c(quantile(alpha.thin,0.025),MAP(beta.thin),quantile(beta.thin,.975)),
c(quantile(ev,0.025),MAP(ev),quantile(ev,.975))
)
rownames(cred.map) = c("alpha", "beta", "E[theta]")
colnames(cred.map) = c("Lower","MAP","Upper")
kable(cred.map, caption = "95% cred. interval and MAP")
#------------------ Displaying the theta's
CI = matrix(0, ncol = 3, nrow = 15)
for (j in 1:15) {
CI[j, ] = quantile(theta.thin[j, ], probs = c(0.025,0.5, 0.975))}
View(obj2)
theta.thin = obj2$theta[,k]
#------------------ Displaying the theta's
CI = matrix(0, ncol = 3, nrow = 15)
for (j in 1:15) {
CI[j, ] = quantile(theta.thin[j, ], probs = c(0.025,0.5, 0.975))}
plot(contr$p.hat, contr$p.hat, type = "l")
points(y/N, CI[, 2], pch = 19, col = 3)
theta.thin = obj2$theta[,k]
#------------------ Displaying the theta's
CI = matrix(0, ncol = 3, nrow = 15)
for (j in 1:15) {
CI[j, ] = quantile(theta.thin[j, ], probs = c(0.025,0.5, 0.975))}
plot(contr$p.hat, contr$p.hat, type = "l")
points(contr$p.hat, CI[, 2], pch = 19, col = 3)
for (j in 1:15) {
points(c(contr$p.hat, contr$p.hat), c(CI[j, 1], CI[j,3]), type = "l", col = 4)}
points(c(contr$p.hat[j], contr$p.hat[j]), c(CI[j, 1], CI[j,3]), type = "l", col = 4)}
theta.thin = obj2$theta[,k]
#------------------ Displaying the theta's
CI = matrix(0, ncol = 3, nrow = 15)
for (j in 1:15) {
CI[j, ] = quantile(theta.thin[j, ], probs = c(0.025,0.5, 0.975))}
plot(contr$p.hat, contr$p.hat, type = "l")
points(contr$p.hat, CI[, 2], pch = 19, col = 3)
for (j in 1:15) {
points(c(contr$p.hat[j], contr$p.hat[j]), c(CI[j, 1], CI[j,3]), type = "l", col = 4)}
cred.map = NULL
?quantile()
cred.map = NULL
for(i in 1:15){
v = quantile(theta.post[i,],probs = c(0.025,.5,.975))
rbind(cred.map,v)
}
cred.map = NULL
for(i in 1:15){
v = quantile(theta.thin[i,],probs = c(0.025,.5,.975))
rbind(cred.map,v)
}
colnames(cred.map) = c("Lower", "MAP", "Upper")
quantile(theta.thin[1,],probs = c(0.025,.5,.975))
as.vector(quantile(theta.thin[1,],probs = c(0.025,.5,.975)))
cred.map = NULL
for(i in 1:15){
v = as.vector(quantile(theta.thin[1,],probs = c(0.025,.5,.975)))
rbind(cred.map,v)
}
colnames(cred.map) = c("Lower", "MAP", "Upper")
cred.map
cred.map = c()
for(i in 1:15){
v = as.vector(quantile(theta.thin[1,],probs = c(0.025,.5,.975)))
rbind(cred.map,v)
}
colnames(cred.map) = c("Lower", "MAP", "Upper")
cred.map
cred.map = matrix(0,15,3)
for(i in 1:15){
v = as.vector(quantile(theta.thin[1,],probs = c(0.025,.5,.975)))
cred[i,] =v
}
cred.map = matrix(0,15,3)
for(i in 1:15){
v = as.vector(quantile(theta.thin[1,],probs = c(0.025,.5,.975)))
cred.map[i,] =v
}
colnames(cred.map) = c("Lower", "MAP", "Upper")
kable(cred.map)
cred.map = matrix(0,15,3)
for(i in 1:15){
v = as.vector(quantile(theta.thin[i,],probs = c(0.025,.5,.975)))
cred.map[i,] =v
}
colnames(cred.map) = c("Lower", "MAP", "Upper")
kable(cred.map)
kable(t(contr$W))
kable(contr$W)
kable(cred.map)
kable(contr$W)
