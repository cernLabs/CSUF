library(dplyr)
library(caret)
install.packages("caret")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
data <- cs.read("income20train-2.csv", header = T)
data <- read.csv("income20train-2.csv", header = T)
?read.csv()
hist(data[,2])
hist(data[,2], breaks = 100)
plot.ts(data[,2])
par(mfrow = c(1,2))
hist(data[,2], breaks = 100)
par(mfrow = c(1,2))
hist(data[,2], breaks = 100)
plot.ts(data[,2])
boxplot(data[,2])
par(mfrow = c(1,2))
hist(data[,2], breaks = 100)
boxplot(data[,2])
par(mfrow = c(1,2))
hist(data[,2], breaks = 100)
boxplot(x = data[,2])
?boxplot
par(mfrow = c(1,2))
hist(data[,2], breaks = 100)
boxplot(y = data[,2])
par(mfrow = c(1,2))
hist(data[,2], breaks = 100)
boxplot(data[,2])
summary(data[,2])
par(mfrow = c(1,2))
hist(data[,2], breaks = 100)
boxplot(data[,2])
summary(data[,2])
plot(data$X,data$x)
par(mfrow = c(2,2))
hist(data[,2], breaks = 100)
boxplot(data[,2])
summary(data[,2])
plot(data$X,data$x)
par(mfrow = c(1,2))
hist(data[,2], breaks = 100)
boxplot(data[,2])
summary(data[,2])
plot(data$X,data$x)
par(mfrow = c(1,2))
plot(data$X,data$x)
hist(data[,2], breaks = 100)
boxplot(data[,2])
summary(data[,2])
par(mfrow = c(2,2))
plot(data$X,data$x)
hist(data[,2], breaks = 100)
boxplot(data[,2])
summary(data[,2])
plot(data$X,data$x)
hist(data[,2], breaks = 100)
boxplot(data[,2])
summary(data[,2])
plot(data$X,data$x)
boxplot(data[,2])
hist(data[,2], breaks = 100)
summary(data[,2])
summary(data[,2])$Min
summary(data[,2])$"Min"
summary(data[,2])
summary(data[,2])[1]
summary(data[,2])[1:5]
plot(data$X,data$x)
boxplot(data[,2])
hist(data[,2], breaks = 100)
summary(data[,2])[1:6]
plot(data$X,data$x)
boxplot(data[,2])
hist(data[,2], breaks = 100)
summary(data[,2])
plot(data$X,data$x)
boxplot(data[,2])
hist(data[,2], breaks = 100)
summary(data[,2])
mean(data[,2])
install.packages("envstat")
install.packages("EnvStats")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(EnvStats)
par(mfrow = c(2,2))
plot(data$X,data$x)
boxplot(data[,2])
hist(data[,2], breaks = 100)
summary(data[,2])
mean(data[,2])
data[,2] -> y
# prep the mono sample function
rmono = function(n,alpha,beta){
u = runif(n)
x = exp(log(beta) + (log(u)/alpha))
return(x)
}
?rmono
?rpareto
# prep the mono sample function
rmono = function(n,alpha,beta){
u = runif(n)
x = exp(log(beta) + (log(u)/alpha))
return(x)
}
# make this the last this
GIBBS1 <- function(B,data,alpha.init){
# define n
n = length(data)
# make vector spaces
alpha.post <- beta.post <- rep(0,B)
# apply initials
alpha.post[1] = alpha.init
beta.post[1] = rmono(1,n*alpha.init + 1, min(data))
#loop
for(b in 2:B){
rgamma(1,n+1,sum(log(data)) - n*log(beta.post[b-1])) -> alpha.post[b]
rmono(1,n*alpha[b] + 1, min(data)) -> beta.post[b]
}
# output
theta = cbind(alpha.post,beta.post)
return(theta)
}
GIBBS1(2000,y,1)
# prep the mono sample function
rmono = function(n,alpha,beta){
u = runif(n)
x = exp(log(beta) + (log(u)/alpha))
return(x)
}
# make this the last this
GIBBS1 <- function(B,data,alpha.init){
# define n
n = length(data)
# make vector spaces
alpha.post <- beta.post <- rep(0,B)
# apply initials
alpha.post[1] = alpha.init
beta.post[1] = rmono(1,n*alpha.init + 1, min(data))
#loop
for(b in 2:B){
rgamma(1,n+1,sum(log(data)) - n*log(beta.post[b-1])) -> alpha.post[b]
rmono(1,n*alpha.post[b] + 1, min(data)) -> beta.post[b]
}
# output
theta = cbind(alpha.post,beta.post)
return(theta)
}
GIBBS1(2000,y,1)
# prep the mono sample function
rmono = function(n,alpha,beta){
u = runif(n)
x = exp(log(beta) + (log(u)/alpha))
return(x)
}
# make this the last this
GIBBS1 <- function(B,data,alpha.init){
# define n
n = length(data)
# make vector spaces
alpha <- beta <- rep(0,B)
# apply initials
alpha[1] = alpha.init
beta[1] = rmono(1,n*alpha.init + 1, min(data))
#loop
for(b in 2:B){
rgamma(1,n+1,sum(log(data)) - n*log(beta[b-1])) -> alpha[b]
rmono(1,n*alpha[b] + 1, min(data)) -> beta[b]
}
# output
theta = cbind(alpha,beta)
return(theta)
}
GIBBS1(2000,y,1)
GIBBS1(2000,y,1) -> theta
plot.ts(theta$alpha)
theta
theta$alpha
thetap[,1]
theta[,1]
plot.ts(theta[,1], main = "alpha posterior trace plot")
plot.ts(theta[,1], main = "alpha posterior trace plot")
plot.ts(theta[,2], main = "beta posterior trace plot")
plot.ts(theta[,1], main = "alpha posterior trace plot", ylab = "alpha")
plot.ts(theta[,2], main = "beta posterior trace plot", ylab = "beta")
par(mfrow = c(2,2))
plot.ts(theta[,1], main = "alpha posterior trace plot", ylab = "alpha")
plot.ts(theta[,2], main = "beta posterior trace plot", ylab = "beta")
acf(theta[,1])
acf(theta[,2])
par(mfrow = c(1,2))
plot.ts(theta[,1], main = "alpha posterior trace plot", ylab = "alpha")
plot.ts(theta[,2], main = "beta posterior trace plot", ylab = "beta")
acf(theta[,1])
acf(theta[,2])
par(mfrow = c(1,2))
plot.ts(theta[,1], main = "alpha posterior trace plot", ylab = "alpha")
plot.ts(theta[,2], main = "beta posterior trace plot", ylab = "beta")
acf(theta[100:2000,1], main = "alpha Autocorrelation")
acf(theta[100:2000,2], main = "beta Autocorrelation")
par(mfrow = c(1,2))
plot.ts(theta[,1], main = "alpha posterior trace plot", ylab = "alpha")
plot.ts(theta[,2], main = "beta posterior trace plot", ylab = "beta")
acf(theta[,1], main = "alpha Autocorrelation")
acf(theta[,2], main = "beta Autocorrelation")
# thinning
B = length(theta[,1])
k = 13*(1:B)
k = k[k < B]
theta.thin = theta[-k,]
# burning
B = length(theta.thin[,1])
theta.thin = theta.thin[50:B,]
# visuals
plot.ts(theta.thin[,1], main = "alpha posterior burned/thinned trace plot", ylab = "alpha")
par(mfrow = c(1,2))
plot.ts(theta.thin[,1], main = "alpha posterior burned/thinned trace plot", ylab = "alpha")
plot.ts(theta.thin[,2], main = "beta posterior burned/thinned trace plot", ylab = "beta")
acf(theta.thin[,1], main = "alpha burned/thinned")
acf(theta.thin[,2], main = "beta burned/thinned")
# thinning
# B = length(theta[,1])
# k = 13*(1:B)
# k = k[k < B]
theta.thin = theta
# burning
B = length(theta.thin[,1])
theta.thin = theta.thin[50:B,]
# visuals
par(mfrow = c(1,2))
plot.ts(theta.thin[,1], main = "alpha posterior burned/thinned trace plot", ylab = "alpha")
plot.ts(theta.thin[,2], main = "beta posterior burned/thinned trace plot", ylab = "beta")
acf(theta.thin[,1], main = "alpha burned/thinned")
# thinning
# B = length(theta[,1])
# k = 13*(1:B)
# k = k[k < B]
theta.thin = theta
# burning
B = length(theta.thin[,1])
theta.thin = theta.thin[50:B,]
# visuals
par(mfrow = c(1,2))
plot.ts(theta.thin[,1], main = "alpha posterior burned/thinned trace plot", ylab = "alpha")
plot.ts(theta.thin[,2], main = "beta posterior burned/thinned trace plot", ylab = "beta")
acf(theta.thin[,1], main = "alpha burned/thinned")
acf(theta.thin[,2], main = "beta burned/thinned")
# burning
B = length(theta[,1])
theta.burn = theta[50:B,]
# visuals
par(mfrow = c(1,2))
plot.ts(theta.burn[,1], main = "alpha posterior burned trace plot", ylab = "alpha")
plot.ts(theta.burn[,2], main = "beta posterior burned trace plot", ylab = "beta")
acf(theta.burn[,1], main = "alpha burned")
acf(theta.burn[,2], main = "beta burned")
# generate bivariate scatterplot
post <- data.frame(theta.burn)
View(post)
library(ggplot2)
# generate bivariate scatterplot
post <- data.frame(theta.burn)
ggplot(post, aes(x = alpha, y = beta)) + geom_point() + geom_density2d()
# plot alpha|data
plot(theta.burn[,1])
# plot alpha|data
plot(density(theta.burn[,1]))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(EnvStats)
library(ggplot2)
data <- read.csv("income20train-2.csv", header = T)
data[,2] -> y
plot(data$X,data$x)
boxplot(y)
hist(y, breaks = 100)
summary(y)
mean(y)
# prep the mono sample function
rmono = function(n,alpha,beta){
u = runif(n)
x = exp(log(beta) + (log(u)/alpha))
return(x)
}
# make this the last this
GIBBS1 <- function(B,data,alpha.init){
set.seed(90909)
# define n
n = length(data)
# make vector spaces
alpha <- beta <- rep(0,B)
# apply initials
alpha[1] = alpha.init
beta[1] = rmono(1,n*alpha.init + 1, min(data))
#loop
for(b in 2:B){
rgamma(1,n+1,sum(log(data)) - n*log(beta[b-1])) -> alpha[b]
rmono(1,n*alpha[b] + 1, min(data)) -> beta[b]
}
# output
theta = cbind(alpha,beta)
return(theta)
}
GIBBS1(2000,y,1) -> theta
par(mfrow = c(1,2))
plot.ts(theta[,1], main = "alpha posterior trace plot", ylab = "alpha")
plot.ts(theta[,2], main = "beta posterior trace plot", ylab = "beta")
acf(theta[,1], main = "alpha Autocorrelation")
acf(theta[,2], main = "beta Autocorrelation")
# burning
B = length(theta[,1])
theta.burn = theta[50:B,]
# visuals
par(mfrow = c(1,2))
plot.ts(theta.burn[,1], main = "alpha posterior burned trace plot", ylab = "alpha")
plot.ts(theta.burn[,2], main = "beta posterior burned trace plot", ylab = "beta")
acf(theta.burn[,1], main = "alpha burned")
acf(theta.burn[,2], main = "beta burned")
# generate bivariate scatterplot
post <- data.frame(theta.burn)
ggplot(post, aes(x = alpha, y = beta)) + geom_point() + geom_density2d()
# plot alpha|data
plot(density(theta.burn[,1]))
