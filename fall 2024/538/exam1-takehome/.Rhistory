beta0.post[b] = beta0.post[(b-1)]
beta1.post[b] = beta1.post[(b-1)]
}
}
# return
beta0 = beta0.post
beta1 = beta1.post
beta.post = cbind(beta0,beta1)
list("beta" = beta.post,"AR" = accept/B)
}
# running the program
MH2(rat[,1],rat[,2],beta.init = c(30,30),tuning.param = 1) -> mh.obj
beta.post = mh.obj$beta
ar = mh.obj$AR
tuncov = matrix(c(1,.6,.6,1))
MH2(rat[,1],rat[,2],beta.init = c(7,11),tuning.param = .1, cov.mat =tuncov ) -> mh.obj
tuncov
tuncov = matrix(c(1,.6,.6,1),2,2)
tuncov = matrix(c(1,.6,.6,1),2,2)
tuncov
tuncov = matrix(c(1,.6,.6,1),2,2)
MH2(rat[,1],rat[,2],beta.init = c(7,11),tuning.param = .1, cov.mat =tuncov ) -> mh.obj
beta.post = mh.obj$beta
ar = mh.obj$AR
#traceplots
par(mfrow = c(1,2))
ts.plot(beta.post[,1], main = "beta0 trace", xlab = "index", ylab = "beta0")
ts.plot(beta.post[,2], main = "beta1 trace", xlab = "index", ylab = "beta1")
# autocorrelation
acf(beta.post[,1], main = "beta0")
acf(beta.post[,2], main = "beta1")
if(ar > .75){print("YAY!")}
tuncov = matrix(c(1,.6,.6,1),2,2)
MH2(rat[,1],rat[,2],beta.init = c(7,11),tuning.param = 1, cov.mat =tuncov ) -> mh.obj
beta.post = mh.obj$beta
ar = mh.obj$AR
#traceplots
par(mfrow = c(1,2))
ts.plot(beta.post[,1], main = "beta0 trace", xlab = "index", ylab = "beta0")
ts.plot(beta.post[,2], main = "beta1 trace", xlab = "index", ylab = "beta1")
# autocorrelation
acf(beta.post[,1], main = "beta0")
acf(beta.post[,2], main = "beta1")
if(ar > .75){print("YAY!")}
tuncov = matrix(c(1,1,1,1),2,2)
MH2(rat[,1],rat[,2],beta.init = c(7,11),tuning.param = 1, cov.mat =tuncov ) -> mh.obj
beta.post = mh.obj$beta
ar = mh.obj$AR
#traceplots
par(mfrow = c(1,2))
ts.plot(beta.post[,1], main = "beta0 trace", xlab = "index", ylab = "beta0")
ts.plot(beta.post[,2], main = "beta1 trace", xlab = "index", ylab = "beta1")
# autocorrelation
acf(beta.post[,1], main = "beta0")
acf(beta.post[,2], main = "beta1")
if(ar > .75){print("YAY!")}
tuncov = matrix(c(1,2,2,1),2,2)
MH2(rat[,1],rat[,2],beta.init = c(7,11),tuning.param = 1, cov.mat =tuncov ) -> mh.obj
beta.post = mh.obj$beta
ar = mh.obj$AR
#traceplots
par(mfrow = c(1,2))
ts.plot(beta.post[,1], main = "beta0 trace", xlab = "index", ylab = "beta0")
ts.plot(beta.post[,2], main = "beta1 trace", xlab = "index", ylab = "beta1")
# autocorrelation
acf(beta.post[,1], main = "beta0")
acf(beta.post[,2], main = "beta1")
if(ar > .75){print("YAY!")}
tuncov = matrix(c(1,1.5,1.5,1),2,2)
MH2(rat[,1],rat[,2],beta.init = c(7,11),tuning.param = 1, cov.mat =tuncov ) -> mh.obj
beta.post = mh.obj$beta
ar = mh.obj$AR
#traceplots
par(mfrow = c(1,2))
ts.plot(beta.post[,1], main = "beta0 trace", xlab = "index", ylab = "beta0")
ts.plot(beta.post[,2], main = "beta1 trace", xlab = "index", ylab = "beta1")
# autocorrelation
acf(beta.post[,1], main = "beta0")
acf(beta.post[,2], main = "beta1")
if(ar > .75){print("YAY!")}
tuncov = matrix(c(1,.9,.9,1),2,2)
MH2(rat[,1],rat[,2],beta.init = c(7,11),tuning.param = 1, cov.mat =tuncov ) -> mh.obj
beta.post = mh.obj$beta
ar = mh.obj$AR
#traceplots
par(mfrow = c(1,2))
ts.plot(beta.post[,1], main = "beta0 trace", xlab = "index", ylab = "beta0")
ts.plot(beta.post[,2], main = "beta1 trace", xlab = "index", ylab = "beta1")
# autocorrelation
acf(beta.post[,1], main = "beta0")
acf(beta.post[,2], main = "beta1")
if(ar > .75){print("YAY!")}
tuncov = matrix(c(1,1,1,1),2,2)
MH2(rat[,1],rat[,2],beta.init = c(7,11),tuning.param = 1, cov.mat =tuncov ) -> mh.obj
beta.post = mh.obj$beta
ar = mh.obj$AR
#traceplots
par(mfrow = c(1,2))
ts.plot(beta.post[,1], main = "beta0 trace", xlab = "index", ylab = "beta0")
ts.plot(beta.post[,2], main = "beta1 trace", xlab = "index", ylab = "beta1")
# autocorrelation
acf(beta.post[,1], main = "beta0")
acf(beta.post[,2], main = "beta1")
if(ar > .75){print("YAY!")}
tuncov = matrix(c(1,1,1,1),2,2)
MH2(rat[,1],rat[,2],beta.init = c(7,11),tuning.param = 3, cov.mat =tuncov ) -> mh.obj
beta.post = mh.obj$beta
ar = mh.obj$AR
#traceplots
par(mfrow = c(1,2))
ts.plot(beta.post[,1], main = "beta0 trace", xlab = "index", ylab = "beta0")
ts.plot(beta.post[,2], main = "beta1 trace", xlab = "index", ylab = "beta1")
# autocorrelation
acf(beta.post[,1], main = "beta0")
acf(beta.post[,2], main = "beta1")
if(ar > .75){print("YAY!")}
tuncov = matrix(c(1,1,1,1),2,2)
MH2(rat[,1],rat[,2],beta.init = c(7,11),tuning.param = 3, cov.mat =tuncov ) -> mh.obj
beta.post = mh.obj$beta
ar = mh.obj$AR
#traceplots
par(mfrow = c(1,2))
ts.plot(beta.post[,1], main = "beta0 trace", xlab = "index", ylab = "beta0")
ts.plot(beta.post[,2], main = "beta1 trace", xlab = "index", ylab = "beta1")
# autocorrelation
acf(beta.post[,1], main = "beta0")
acf(beta.post[,2], main = "beta1")
if(ar > .75){print("YAY!")}
tuncov = matrix(c(1,1,1,1),2,2)
MH2(rat[,1],rat[,2],beta.init = c(7,11),tuning.param = .9, cov.mat =tuncov ) -> mh.obj
beta.post = mh.obj$beta
ar = mh.obj$AR
#traceplots
par(mfrow = c(1,2))
ts.plot(beta.post[,1], main = "beta0 trace", xlab = "index", ylab = "beta0")
ts.plot(beta.post[,2], main = "beta1 trace", xlab = "index", ylab = "beta1")
# autocorrelation
acf(beta.post[,1], main = "beta0")
acf(beta.post[,2], main = "beta1")
if(ar > .75){print("YAY!")}
tuncov = matrix(c(10,1,1,10),2,2)
MH2(rat[,1],rat[,2],beta.init = c(7,11),tuning.param = .9, cov.mat =tuncov ) -> mh.obj
beta.post = mh.obj$beta
ar = mh.obj$AR
#traceplots
par(mfrow = c(1,2))
ts.plot(beta.post[,1], main = "beta0 trace", xlab = "index", ylab = "beta0")
ts.plot(beta.post[,2], main = "beta1 trace", xlab = "index", ylab = "beta1")
# autocorrelation
acf(beta.post[,1], main = "beta0")
acf(beta.post[,2], main = "beta1")
if(ar > .75){print("YAY!")}
tuncov = matrix(c(1,1,1,1),2,2)
MH2(rat[,1],rat[,2],beta.init = c(7,11),tuning.param = .9, cov.mat =tuncov ) -> mh.obj
beta.post = mh.obj$beta
ar = mh.obj$AR
#traceplots
par(mfrow = c(1,2))
ts.plot(beta.post[,1], main = "beta0 trace", xlab = "index", ylab = "beta0")
ts.plot(beta.post[,2], main = "beta1 trace", xlab = "index", ylab = "beta1")
# autocorrelation
acf(beta.post[,1], main = "beta0")
acf(beta.post[,2], main = "beta1")
if(ar > .75){print("YAY!")}
tuncov = matrix(c(1,1,1,1),2,2)
MH2(rat[,1],rat[,2],beta.init = c(7,11),tuning.param = 1, cov.mat =tuncov ) -> mh.obj
beta.post = mh.obj$beta
ar = mh.obj$AR
#traceplots
par(mfrow = c(1,2))
ts.plot(beta.post[,1], main = "beta0 trace", xlab = "index", ylab = "beta0")
ts.plot(beta.post[,2], main = "beta1 trace", xlab = "index", ylab = "beta1")
# autocorrelation
acf(beta.post[,1], main = "beta0")
acf(beta.post[,2], main = "beta1")
if(ar > .75){print("YAY!")}
tuncov = matrix(c(1,1,1,1),2,2)
MH2(rat[,1],rat[,2],beta.init = c(7,11),tuning.param = .8, cov.mat =tuncov ) -> mh.obj
beta.post = mh.obj$beta
ar = mh.obj$AR
#traceplots
par(mfrow = c(1,2))
ts.plot(beta.post[,1], main = "beta0 trace", xlab = "index", ylab = "beta0")
ts.plot(beta.post[,2], main = "beta1 trace", xlab = "index", ylab = "beta1")
# autocorrelation
acf(beta.post[,1], main = "beta0")
acf(beta.post[,2], main = "beta1")
if(ar > .75){print("YAY!")}
tuncov = matrix(c(1,1,1,1),2,2)
MH2(rat[,1],rat[,2],beta.init = c(7,11),tuning.param = .82, cov.mat =tuncov ) -> mh.obj
beta.post = mh.obj$beta
ar = mh.obj$AR
#traceplots
par(mfrow = c(1,2))
ts.plot(beta.post[,1], main = "beta0 trace", xlab = "index", ylab = "beta0")
ts.plot(beta.post[,2], main = "beta1 trace", xlab = "index", ylab = "beta1")
# autocorrelation
acf(beta.post[,1], main = "beta0")
acf(beta.post[,2], main = "beta1")
if(ar > .75){print("YAY!")}
tuncov = matrix(c(1,1,1,1),2,2)
MH2(rat[,1],rat[,2],beta.init = c(7,11),tuning.param = .83, cov.mat =tuncov ) -> mh.obj
beta.post = mh.obj$beta
ar = mh.obj$AR
#traceplots
par(mfrow = c(1,2))
ts.plot(beta.post[,1], main = "beta0 trace", xlab = "index", ylab = "beta0")
ts.plot(beta.post[,2], main = "beta1 trace", xlab = "index", ylab = "beta1")
# autocorrelation
acf(beta.post[,1], main = "beta0")
acf(beta.post[,2], main = "beta1")
if(ar > .75){print("YAY!")}
tuncov = matrix(c(1,1,1,1),2,2)
MH2(rat[,1],rat[,2],beta.init = c(7,11),tuning.param = .84, cov.mat =tuncov ) -> mh.obj
beta.post = mh.obj$beta
ar = mh.obj$AR
#traceplots
par(mfrow = c(1,2))
ts.plot(beta.post[,1], main = "beta0 trace", xlab = "index", ylab = "beta0")
ts.plot(beta.post[,2], main = "beta1 trace", xlab = "index", ylab = "beta1")
# autocorrelation
acf(beta.post[,1], main = "beta0")
acf(beta.post[,2], main = "beta1")
if(ar > .75){print("YAY!")}
tuncov = matrix(c(1,1,1,1),2,2)
MH2(rat[,1],rat[,2],beta.init = c(7,11),tuning.param = .833, cov.mat =tuncov ) -> mh.obj
beta.post = mh.obj$beta
ar = mh.obj$AR
#traceplots
par(mfrow = c(1,2))
ts.plot(beta.post[,1], main = "beta0 trace", xlab = "index", ylab = "beta0")
ts.plot(beta.post[,2], main = "beta1 trace", xlab = "index", ylab = "beta1")
# autocorrelation
acf(beta.post[,1], main = "beta0")
acf(beta.post[,2], main = "beta1")
if(ar > .75){print("YAY!")}
tuncov = matrix(c(1,1,1,1),2,2)
MH2(rat[,1],rat[,2],beta.init = c(7,11),tuning.param = .83, cov.mat =tuncov ) -> mh.obj
beta.post = mh.obj$beta
ar = mh.obj$AR
#traceplots
par(mfrow = c(1,2))
ts.plot(beta.post[,1], main = "beta0 trace", xlab = "index", ylab = "beta0")
ts.plot(beta.post[,2], main = "beta1 trace", xlab = "index", ylab = "beta1")
# autocorrelation
acf(beta.post[,1], main = "beta0")
acf(beta.post[,2], main = "beta1")
if(ar > .75){print("YAY!")}
tuncov = matrix(c(1,1,1,1),2,2)
MH2(rat[,1],rat[,2],beta.init = c(7,11),tuning.param = .82, cov.mat =tuncov ) -> mh.obj
beta.post = mh.obj$beta
ar = mh.obj$AR
#traceplots
par(mfrow = c(1,2))
ts.plot(beta.post[,1], main = "beta0 trace", xlab = "index", ylab = "beta0")
ts.plot(beta.post[,2], main = "beta1 trace", xlab = "index", ylab = "beta1")
# autocorrelation
acf(beta.post[,1], main = "beta0")
acf(beta.post[,2], main = "beta1")
if(ar > .75){print("YAY!")}
# establish functions
# prior
prior = function(beta0,beta1){1}
# likelihood
like = function(X,Y,beta0,beta1){
sigma = log(beta0 + beta1*X)
D = dweibull(Y,shape = 4, scale = sigma)
D = D[!is.na(D) == 1]
prod(D)
}
# log-likelihood
llike = function(X,Y,beta0,beta1){
sigma = log(beta0 + beta1*X)
D = log(dweibull(Y,shape = 4, scale = sigma))
return(sum(D))
}
# proposal
rPro = function(beta0,beta1,s,S){
rmvnorm(1,mean = c(beta0,beta1), sigma = s*S)
}
MH2 <- function(data,group,B = 10000,beta.init = c(1,1), tuning.param = 1, cov.mat = diag(2)){
# initialize
accept = 0
s = tuning.param # tuning param
S = cov.mat
y = data
x = group
# posterior params.
beta0.post <- beta1.post <- numeric()
beta0.post[1] = beta.init[1]
beta1.post[1] = beta.init[2]
# loop
for(b in 2:(B+1)){
# proposal
beta.star = rPro(beta0.post[b-1],beta1.post[b-1],s,S)
# Ratio of Densities
# r.num = like(x,y,beta.star[1],beta.star[2]) * prior(beta.star[1],beta.star[2])
# r.den = like(x,y,beta0.post[b-1],beta1.post[b-1]) * prior(beta0.post[b-1],beta1.post[b-1])
# r = r.num/r.den
# Ratio of Densities log method
# because the prior is uniform, we can just disregard it
alpha = llike(x,y,beta.star[1],beta.star[2]) - llike(x,y,beta0.post[b-1],beta1.post[b-1])
r = exp(alpha)
# Accept/Reject
if(runif(1) < min(1, r)){
beta0.post[b] = beta.star[1]
beta1.post[b] = beta.star[2]
accept = accept + 1
}else{
beta0.post[b] = beta0.post[(b-1)]
beta1.post[b] = beta1.post[(b-1)]
}
}
# return
beta0 = beta0.post
beta1 = beta1.post
beta.post = cbind(beta0,beta1)
list("beta" = beta.post,"AR" = accept/B)
}
# running the program
MH2(rat[,1],rat[,2],beta.init = c(30,30),tuning.param = 1) -> mh.obj
beta.post = mh.obj$beta
ar = mh.obj$AR
tuncov = matrix(c(1,1,1,1),2,2)
MH2(rat[,1],rat[,2],beta.init = c(7,11),tuning.param = .82, cov.mat =tuncov ) -> mh.obj
beta.post = mh.obj$beta
ar = mh.obj$AR
#traceplots
par(mfrow = c(1,2))
ts.plot(beta.post[,1], main = "beta0 trace", xlab = "index", ylab = "beta0")
ts.plot(beta.post[,2], main = "beta1 trace", xlab = "index", ylab = "beta1")
# autocorrelation
acf(beta.post[,1], main = "beta0")
acf(beta.post[,2], main = "beta1")
if(ar > .75){print("YAY!")}
tuncov = matrix(c(1,1,1,1),2,2)
MH2(rat[,1],rat[,2],beta.init = c(7,11),tuning.param = 4, cov.mat =tuncov ) -> mh.obj
tuncov = matrix(c(1,1,1,1),2,2)
MH2(rat[,1],rat[,2],beta.init = c(7,11),tuning.param = 3, cov.mat =tuncov ) -> mh.obj
tuncov = matrix(c(1,1,1,1),2,2)
MH2(rat[,1],rat[,2],beta.init = c(7,11),tuning.param = 2, cov.mat =tuncov ) -> mh.obj
tuncov = matrix(c(1,1,1,1),2,2)
MH2(rat[,1],rat[,2],beta.init = c(7,11),tuning.param = .84, cov.mat =tuncov ) -> mh.obj
beta.post = mh.obj$beta
ar = mh.obj$AR
#traceplots
par(mfrow = c(1,2))
ts.plot(beta.post[,1], main = "beta0 trace", xlab = "index", ylab = "beta0")
ts.plot(beta.post[,2], main = "beta1 trace", xlab = "index", ylab = "beta1")
# autocorrelation
acf(beta.post[,1], main = "beta0")
acf(beta.post[,2], main = "beta1")
if(ar > .75){print("YAY!")}
# generate bivariate scatterplot
post <- data.frame(beta.post)
ggplot(post, aes(x = beta0, y = beta1)) + geom_point() + geom_density2d()
# plot alpha|data
plot(density(beta.post[,1]),
main = "P(beta0|data)")
dens = density(beta.post[,1])
point.est.0 = dens$x[dens$y == max(dens$y)]
abline(v = point.est.0,lty=2)
# confidence interval
c(quantile(beta.post[,1],.025),quantile(beta.post[,1],.975))
# plot beta|data
plot(density(beta.post[,2]),
main = "P(beta1|data)")
dens = density(beta.post[,2])
point.est.1 = dens$x[dens$y == max(dens$y)]
abline(v = point.est.1,lty=2)
# confidence interval
c(quantile(beta.post[,2],.025),quantile(beta.post[,2],.975))
# plot alpha|data
plot(density(beta.post[,1]),
main = "P(beta0|data)")
dens = density(beta.post[,1])
point.est.0 = dens$x[dens$y == max(dens$y)]
abline(v = point.est.0,lty=2)
# confidence interval
c(quantile(beta.post[,1],.025),quantile(beta.post[,1],.975))
# plot beta|data
plot(density(beta.post[,2]),
main = "P(beta1|data)")
dens = density(beta.post[,2])
point.est.1 = dens$x[dens$y == max(dens$y)]
abline(v = point.est.1,lty=2)
# confidence interval
c(quantile(beta.post[,2],.025),quantile(beta.post[,2],.975))
# generate bivariate scatterplot
post <- data.frame(beta.post)
ggplot(post, aes(x = beta0, y = beta1)) + geom_point() + geom_density2d()
# generate bivariate scatterplot
samp = sample(1:length(beta.post[,1]), size = 2000, rep = F)
beta.post = beta.post[samp,]
post <- data.frame(beta.post)
ggplot(post, aes(x = beta0, y = beta1)) + geom_point() + geom_density2d()
# plot alpha|data
plot(density(beta.post[,1]),
main = "P(beta0|data)")
dens = density(beta.post[,1])
point.est.0 = dens$x[dens$y == max(dens$y)]
abline(v = point.est.0,lty=2)
# confidence interval
c(quantile(beta.post[,1],.025),quantile(beta.post[,1],.975))
# plot beta|data
plot(density(beta.post[,2]),
main = "P(beta1|data)")
dens = density(beta.post[,2])
point.est.1 = dens$x[dens$y == max(dens$y)]
abline(v = point.est.1,lty=2)
# confidence interval
c(quantile(beta.post[,2],.025),quantile(beta.post[,2],.975))
# generate bivariate scatterplot
samp = sample(1:length(beta.post[,1]), size = 2000, rep = F)
beta.post = beta.post[samp,]
post <- data.frame(beta.post)
ggplot(post, aes(x = beta0, y = beta1)) + geom_jitter() + geom_density2d()
sig0 = beta.post[,1]
sig1 = beta.post[,1] + beta.post[,2]
summary(sig0)
summary(sig1)
# sigmas
sig0 = log(beta.post[,1])
sig1 = log(beta.post[,1] + beta.post[,2])
summary(sig0)
summary(sig1)
# sigmas
sig0 = log(beta.post[,1])
sig1 = log(beta.post[,1] + beta.post[,2])
summary(sig0)
summary(sig1)
# plot sigma where x = 0
plot(density(sig0),
main = "sigma_i where X_i = 0")
dens = density(sig0)
point.est.0 = dens$x[dens$y == max(dens$y)]
abline(v = point.est.0,lty=2)
# confidence interval
c(quantile(sig0,.025),quantile(sig0,.975))
# plot beta|data
plot(density(sig1),
main = "sigma_i where X_i = 1")
dens = density(sig1)
point.est.1 = dens$x[dens$y == max(dens$y)]
abline(v = point.est.1,lty=2)
# confidence interval
c(quantile(sig1,.025),quantile(sig1,.975))
# confidence interval
c(quantile(sig1,.025),quantile(sig1,.975))
# confidence interval
c(quantile(sig0,.025),quantile(sig0,.975))
# confidence interval
c(quantile(sig1,.025),quantile(sig1,.975))
# sigmas
sig0 = log(beta.post[,1])
sig1 = log(beta.post[,1] + beta.post[,2])
summary(sig0)
summary(sig1)
# plot sigma where x = 0
plot(density(sig0),
main = "sigma_i where X_i = 0")
dens = density(sig0)
point.est.0 = dens$x[dens$y == max(dens$y)]
abline(v = point.est.0,lty=2)
# confidence interval
c(quantile(sig0,.025),quantile(sig0,.975))
# plot beta|data
plot(density(sig1),
main = "sigma_i where X_i = 1")
dens = density(sig1)
point.est.1 = dens$x[dens$y == max(dens$y)]
abline(v = point.est.1,lty=2)
# confidence interval
c(quantile(sig1,.025),quantile(sig1,.975))
# plot sigma where x = 0
plot(density(sig0),
main = "sigma_i where X_i = 0")
dens = density(sig0)
point.est.0 = dens$x[dens$y == max(dens$y)]
abline(v = point.est.0,lty=2)
# plot beta|data
plot(density(sig1),
main = "sigma_i where X_i = 1")
dens = density(sig1)
point.est.1 = dens$x[dens$y == max(dens$y)]
abline(v = point.est.1,lty=2)
# confidence interval
sprintf("Conf. Interval for sigma when x = 0 : ( %f , %f )",quantile(sig0,.025),quantile(sig0,.975))
sprintf("MAP : %f",point.est.0)
sprintf("Conf. Interval for sigma when x = 1 : ( %f , %f )",quantile(sig1,.025),quantile(sig1,.975))
sprintf("MAP : %f",point.est.1)
# HR function
HazRat = function(sigma0,sigma1){
(sigma1/sigma0)^4
}
# get credible interval
HazRat(sig0,sig1) -> HRvec
dens = density(HRvec)
dens = density(HRvec)
hrmap = dens$x[dens$y == max(dens$y)]
sprintf("Credible Interval for sigma when x = 0 : ( %f , %f )",quantile(HRvec,.025),quantile(HRvec,.975))
sprintf("MAP : %f",hrmap)
# HR function
HazRat = function(sigma0,sigma1){
(sigma0/sigma1)^4
}
# get credible interval
HazRat(sig0,sig1) -> HRvec
dens = density(HRvec)
hrmap = dens$x[dens$y == max(dens$y)]
sprintf("Credible Interval for sigma when x = 0 : ( %f , %f )",quantile(HRvec,.025),quantile(HRvec,.975))
sprintf("MAP : %f",hrmap)
