Xtrain$Survived <-as.factor(Xtrain$Survived)
# train the logit
fitLogit <- train(Survived ~ .,
data= Xtrain,
method = "glm",
family = "binomial")
# print summary
summary(fitLogit)
# doing this to get the accuracy
Xtest <- Xtest %>%
mutate(logityhat = predict(fitLogit, newdata =., type = "response"))
library(dplyr)
library(caret)
library(forecast)
library(naivebayes)
library(MASS)
X <- read.csv("train.csv",header = T)
X <- X %>% dplyr::select(Survived,Pclass,Sex,Age,Fare,SibSp,Parch)
meanAge = mean(X$Age[!is.na(X$Age)])
for(i in 1:length(X$Age)){
if(is.na(X$Age[i]) == 1){X$Age[i] = meanAge}
}
for(i in 1:891){
if(X$Sex[i] == "male"){X$Sex[i] = 1}
else{X$Sex[i] = 0}
}
X$Survived <- as.integer(X$Survived)
X$Sex <- as.integer(X$Sex)
set.seed(533)
trainIndex <- sample(1:891, size = 713, replace = F)
Xtrain <- X[trainIndex,]
Xtest <- X[-trainIndex,]
# make sure Survived is a factor
Xtrain$Survived <-as.factor(Xtrain$Survived)
# train the logit
fitLogit <- train(Survived ~ .,
data= Xtrain,
method = "glm",
family = "binomial")
# print summary
summary(fitLogit)
# doing this to get the accuracy
Xtest <- Xtest %>%
mutate(logityhat = predict(fitLogit, newdata =., type = "prob"))
# confusion matrix
Xtest$Survived <- as.factor(Xtest$Survived)
confusionMatrix(Xtest$logityhat,Xtest$Survived)$table -> cm.log
# training on the QDA
fitQda <- (train(method = "qda", Survived ~ ., data = Xtrain))
# accuracy
Xtest <- Xtest %>%
mutate(qdayhat = predict(fitQda, newdata =., type = "prob"))
# comparing accuracy
confusionMatrix(Xtest$logityhat,Xtest$Survived)$overall["Accuracy"]
library(dplyr)
library(caret)
library(forecast)
library(naivebayes)
library(MASS)
X <- read.csv("train.csv",header = T)
X <- X %>% dplyr::select(Survived,Pclass,Sex,Age,Fare,SibSp,Parch)
meanAge = mean(X$Age[!is.na(X$Age)])
for(i in 1:length(X$Age)){
if(is.na(X$Age[i]) == 1){X$Age[i] = meanAge}
}
for(i in 1:891){
if(X$Sex[i] == "male"){X$Sex[i] = 1}
else{X$Sex[i] = 0}
}
X$Survived <- as.integer(X$Survived)
X$Sex <- as.integer(X$Sex)
set.seed(533)
trainIndex <- sample(1:891, size = 713, replace = F)
Xtrain <- X[trainIndex,]
Xtest <- X[-trainIndex,]
# make sure Survived is a factor
Xtrain$Survived <-as.factor(Xtrain$Survived)
# train the logit
fitLogit <- train(Survived ~ .,
data= Xtrain,
method = "glm",
family = "binomial")
# print summary
summary(fitLogit)
# doing this to get the accuracy
Xtest <- Xtest %>%
mutate(logityhat = predict(fitLogit, newdata =., type = "raw"))
# confusion matrix
Xtest$Survived <- as.factor(Xtest$Survived)
confusionMatrix(Xtest$logityhat,Xtest$Survived)$table -> cm.log
# display for accuracy, precision, recall, f1score
table1 <- function(tab,name, printtnr = F){
tab[1,1] -> tn
tab[2,2] -> tp
tab[1,2] -> fp
tab[2,1] -> fn
a = (tp+tn)/(tp+tn+fp+fn)
p = tp/(tp+fp)
r = tp/(tp+fn)
f1 = 2*p*r/(p+r)
tnr = tn/(tn+fp)
if(printtnr == 0){
sprintf("%s || Accuracy: %f | Precision: %f | Recall(TPR): %f | F1: %f",name,a,p,r,f1)
} else{
sprintf("%s || Accuracy: %f | Precision: %f | Recall(TPR): %f | F1: %f | TNR: %f",name,a,p,r,f1,tnr)
}
}
table1(cm.log,"Logistic Regression")
# training on the QDA
fitQda <- (train(method = "qda", Survived ~ ., data = Xtrain))
# accuracy
Xtest <- Xtest %>%
mutate(qdayhat = predict(fitQda, newdata =., type = "raw"))
# comparing accuracy
confusionMatrix(Xtest$logityhat,Xtest$Survived)$overall["Accuracy"]
confusionMatrix(Xtest$qdayhat,Xtest$Survived) -> cm.qda
cm.qda$overall["Accuracy"]
# doing this to get the accuracy
Xtest <- Xtest %>%
mutate(logityhat = predict(fitLogit, newdata =., type = "raw")) %>%
mutate(logitPr = predict(fitLogit, newdata =., type = "prob"))
# confusion matrix
Xtest$Survived <- as.factor(Xtest$Survived)
confusionMatrix(Xtest$logityhat,Xtest$Survived)$table -> cm.log
# display for accuracy, precision, recall, f1score
table1 <- function(tab,name, printtnr = F){
tab[1,1] -> tn
tab[2,2] -> tp
tab[1,2] -> fp
tab[2,1] -> fn
a = (tp+tn)/(tp+tn+fp+fn)
p = tp/(tp+fp)
r = tp/(tp+fn)
f1 = 2*p*r/(p+r)
tnr = tn/(tn+fp)
if(printtnr == 0){
sprintf("%s || Accuracy: %f | Precision: %f | Recall(TPR): %f | F1: %f",name,a,p,r,f1)
} else{
sprintf("%s || Accuracy: %f | Precision: %f | Recall(TPR): %f | F1: %f | TNR: %f",name,a,p,r,f1,tnr)
}
}
table1(cm.log,"Logistic Regression")
library(dplyr)
library(caret)
library(forecast)
library(naivebayes)
library(MASS)
X <- read.csv("train.csv",header = T)
X <- X %>% dplyr::select(Survived,Pclass,Sex,Age,Fare,SibSp,Parch)
meanAge = mean(X$Age[!is.na(X$Age)])
for(i in 1:length(X$Age)){
if(is.na(X$Age[i]) == 1){X$Age[i] = meanAge}
}
for(i in 1:891){
if(X$Sex[i] == "male"){X$Sex[i] = 1}
else{X$Sex[i] = 0}
}
X$Survived <- as.integer(X$Survived)
X$Sex <- as.integer(X$Sex)
set.seed(533)
trainIndex <- sample(1:891, size = 713, replace = F)
Xtrain <- X[trainIndex,]
Xtest <- X[-trainIndex,]
# make sure Survived is a factor
Xtrain$Survived <-as.factor(Xtrain$Survived)
# train the logit
fitLogit <- train(Survived ~ .,
data= Xtrain,
method = "glm",
family = "binomial")
# print summary
summary(fitLogit)
# doing this to get the accuracy
Xtest <- Xtest %>%
mutate(logityhat = predict(fitLogit, newdata =., type = "raw")) %>%
mutate(logitPr = predict(fitLogit, newdata =., type = "prob"))$'1'
library(dplyr)
library(caret)
library(forecast)
library(naivebayes)
library(MASS)
X <- read.csv("train.csv",header = T)
X <- X %>% dplyr::select(Survived,Pclass,Sex,Age,Fare,SibSp,Parch)
meanAge = mean(X$Age[!is.na(X$Age)])
for(i in 1:length(X$Age)){
if(is.na(X$Age[i]) == 1){X$Age[i] = meanAge}
}
for(i in 1:891){
if(X$Sex[i] == "male"){X$Sex[i] = 1}
else{X$Sex[i] = 0}
}
X$Survived <- as.integer(X$Survived)
X$Sex <- as.integer(X$Sex)
set.seed(533)
trainIndex <- sample(1:891, size = 713, replace = F)
Xtrain <- X[trainIndex,]
Xtest <- X[-trainIndex,]
# make sure Survived is a factor
Xtrain$Survived <-as.factor(Xtrain$Survived)
# train the logit
fitLogit <- train(Survived ~ .,
data= Xtrain,
method = "glm",
family = "binomial")
# print summary
summary(fitLogit)
# doing this to get the accuracy
Xtest <- Xtest %>%
mutate(logityhat = predict(fitLogit, newdata =., type = "raw")) %>%
mutate(logitPr = predict(fitLogit, newdata =., type = "prob"))[2]
# doing this to get the accuracy
Xtest <- Xtest %>%
mutate(logityhat = predict(fitLogit, newdata =., type = "raw")) %>%
mutate(logitPr = predict(fitLogit, newdata =., type = "prob"))
# confusion matrix
Xtest$Survived <- as.factor(Xtest$Survived)
confusionMatrix(Xtest$logityhat,Xtest$Survived)$table -> cm.log
# display for accuracy, precision, recall, f1score
table1 <- function(tab,name, printtnr = F){
tab[1,1] -> tn
tab[2,2] -> tp
tab[1,2] -> fp
tab[2,1] -> fn
a = (tp+tn)/(tp+tn+fp+fn)
p = tp/(tp+fp)
r = tp/(tp+fn)
f1 = 2*p*r/(p+r)
tnr = tn/(tn+fp)
if(printtnr == 0){
sprintf("%s || Accuracy: %f | Precision: %f | Recall(TPR): %f | F1: %f",name,a,p,r,f1)
} else{
sprintf("%s || Accuracy: %f | Precision: %f | Recall(TPR): %f | F1: %f | TNR: %f",name,a,p,r,f1,tnr)
}
}
table1(cm.log,"Logistic Regression")
library(dplyr)
library(caret)
library(forecast)
library(naivebayes)
library(MASS)
X <- read.csv("train.csv",header = T)
X <- X %>% dplyr::select(Survived,Pclass,Sex,Age,Fare,SibSp,Parch)
meanAge = mean(X$Age[!is.na(X$Age)])
for(i in 1:length(X$Age)){
if(is.na(X$Age[i]) == 1){X$Age[i] = meanAge}
}
for(i in 1:891){
if(X$Sex[i] == "male"){X$Sex[i] = 1}
else{X$Sex[i] = 0}
}
X$Survived <- as.integer(X$Survived)
X$Sex <- as.integer(X$Sex)
set.seed(533)
trainIndex <- sample(1:891, size = 713, replace = F)
Xtrain <- X[trainIndex,]
Xtest <- X[-trainIndex,]
# make sure Survived is a factor
Xtrain$Survived <-as.factor(Xtrain$Survived)
# train the logit
fitLogit <- train(Survived ~ .,
data= Xtrain,
method = "glm",
family = "binomial")
# print summary
summary(fitLogit)
# doing this to get the accuracy
Xtest <- Xtest %>%
mutate(logityhat = predict(fitLogit, newdata =., type = "raw")) %>%
mutate(logitPr = predict(fitLogit, newdata =., type = "prob"))$1
# doing this to get the accuracy
Xtest <- Xtest %>%
mutate(logityhat = predict(fitLogit, newdata =., type = "raw")) %>%
mutate(logitPr = predict(fitLogit, newdata =., type = "prob"))$"1"
# doing this to get the accuracy
Xtest <- Xtest %>%
mutate(logityhat = predict(fitLogit, newdata =., type = "raw")) %>%
mutate(logitPr = predict(fitLogit, newdata =., type = "prob")$"1")
# confusion matrix
Xtest$Survived <- as.factor(Xtest$Survived)
confusionMatrix(Xtest$logityhat,Xtest$Survived)$table -> cm.log
# display for accuracy, precision, recall, f1score
table1 <- function(tab,name, printtnr = F){
tab[1,1] -> tn
tab[2,2] -> tp
tab[1,2] -> fp
tab[2,1] -> fn
a = (tp+tn)/(tp+tn+fp+fn)
p = tp/(tp+fp)
r = tp/(tp+fn)
f1 = 2*p*r/(p+r)
tnr = tn/(tn+fp)
if(printtnr == 0){
sprintf("%s || Accuracy: %f | Precision: %f | Recall(TPR): %f | F1: %f",name,a,p,r,f1)
} else{
sprintf("%s || Accuracy: %f | Precision: %f | Recall(TPR): %f | F1: %f | TNR: %f",name,a,p,r,f1,tnr)
}
}
table1(cm.log,"Logistic Regression")
# training on the QDA
fitQda <- (train(method = "qda", Survived ~ ., data = Xtrain))
# accuracy
Xtest <- Xtest %>%
mutate(qdayhat = predict(fitQda, newdata =., type = "raw"))%>%
mutate(qdaPr = predict(fitQogit, newdata =., type = "prob")$'1')
# training on the QDA
fitQda <- (train(method = "qda", Survived ~ ., data = Xtrain))
# accuracy
Xtest <- Xtest %>%
mutate(qdayhat = predict(fitQda, newdata =., type = "raw"))%>%
mutate(qdaPr = predict(fitQda, newdata =., type = "prob")$'1')
# comparing accuracy
confusionMatrix(Xtest$logityhat,Xtest$Survived)$overall["Accuracy"]
confusionMatrix(Xtest$qdayhat,Xtest$Survived) -> cm.qda
cm.qda$overall["Accuracy"]
hist(logitPr = predict(fitLogit, newdata =Xtest, type = "prob"))
logitPr = predict(fitLogit, newdata =Xtest, type = "prob")
View(logitPr)
hist(logitPr[Xtest$Survived == 1,1])
logitPr = predict(fitLogit, newdata =Xtest, type = "prob")
hist(logitPr[Xtest$Survived == 1,1])
hist(logitPr[Xtest$Survived == 0,2], add = 1)
hist(logitPr[Xtest$Survived == 1,1], col = rgb("pink",alpha = .5))
hist(logitPr[Xtest$Survived == 1,1], col = "pink", alpha = .5)
?col
?color
logitPr = predict(fitLogit, newdata =Xtest, type = "prob")
hist(logitPr[Xtest$Survived == 1,1], col = "pink", alpha = .5)
hist(logitPr[Xtest$Survived == 0,2], col = "forestgreen", alpha = .5,add = 1)
hist(logitPr[Xtest$Survived == 0,2], col = "forestgreen", a = .5,add = 1)
logitPr = predict(fitLogit, newdata =Xtest, type = "prob")
hist(logitPr[Xtest$Survived == 1,1], col = rgb(alpha = .5))
logitPr = predict(fitLogit, newdata =Xtest, type = "prob")
hist(logitPr[Xtest$Survived == 1,1], col = rgb(225,203 ,164 ,alpha = .5))
logitPr = predict(fitLogit, newdata =Xtest, type = "prob")
hist(logitPr[Xtest$Survived == 1,1], col = rgb(0,1 ,0,alpha = .5))
hist(logitPr[Xtest$Survived == 0,2], col = rgb(1,0,0,alpha = .5),add = 1)
logitPr = predict(fitLogit, newdata =Xtest, type = "prob")
hist(logitPr[Xtest$Survived == 1,1], col = rgb(0,1 ,0,alpha = .5))
hist(logitPr[Xtest$Survived == 0,2], col = rgb(1,0,0,alpha = .5),add = 1)
v = mean(mean(logitPr[Xtest$Survived == 1,1]),mean(logitPr[Xtest$Survived == 0,2]))
line(v=v, add = T)
logitPr = predict(fitLogit, newdata =Xtest, type = "prob")
hist(logitPr[Xtest$Survived == 1,1], col = rgb(0,1 ,0,alpha = .5))
hist(logitPr[Xtest$Survived == 0,2], col = rgb(1,0,0,alpha = .5),add = 1)
v = mean(mean(logitPr[Xtest$Survived == 1,1]),mean(logitPr[Xtest$Survived == 0,2]))
lines(v=v, add = T)
logitPr = predict(fitLogit, newdata =Xtest, type = "prob")
hist(logitPr[Xtest$Survived == 1,1], col = rgb(0,1 ,0,alpha = .5))
hist(logitPr[Xtest$Survived == 0,2], col = rgb(1,0,0,alpha = .5),add = 1)
v = mean(mean(logitPr[Xtest$Survived == 1,1]),mean(logitPr[Xtest$Survived == 0,2]))
lines(v=v)
?lines
logitPr = predict(fitLogit, newdata =Xtest, type = "prob")
hist(logitPr[Xtest$Survived == 1,1], col = rgb(0,1 ,0,alpha = .5))
hist(logitPr[Xtest$Survived == 0,2], col = rgb(1,0,0,alpha = .5),add = 1)
v = mean(mean(logitPr[Xtest$Survived == 1,1]),mean(logitPr[Xtest$Survived == 0,2]))
abline(v=v)
logitPr = predict(fitLogit, newdata =Xtest, type = "prob")
hist(logitPr[Xtest$Survived == 1,1], col = rgb(0,1 ,0,alpha = .5))
hist(logitPr[Xtest$Survived == 0,2], col = rgb(1,0,0,alpha = .5),add = 1)
v = mean((logitPr[Xtest$Survived == 1,1]),(logitPr[Xtest$Survived == 0,2]))
logitPr = predict(fitLogit, newdata =Xtest, type = "prob")
hist(logitPr[Xtest$Survived == 1,1], col = rgb(0,1 ,0,alpha = .5))
hist(logitPr[Xtest$Survived == 0,2], col = rgb(1,0,0,alpha = .5),add = 1)
v = mean(logitPr[Xtest$Survived == 1,1])+mean(logitPr[Xtest$Survived == 0,2])
abline(v=v/2)
mean(logitPr[Xtest$Survived == 1,1])
mean(logitPr[Xtest$Survived == 0,2])
logitPr = predict(fitLogit, newdata =Xtest, type = "prob")
hist(logitPr[Xtest$Survived == 0,1], col = rgb(0,1 ,0,alpha = .5))
hist(logitPr[Xtest$Survived == 1,2], col = rgb(1,0,0,alpha = .5),add = 1)
v = mean(logitPr[Xtest$Survived == 0,1])+mean(logitPr[Xtest$Survived == 1,2])
abline(v=v/2)
View(logitPr)
mean(logitPr[Xtest$Survived == 0,1])
mean(logitPr[Xtest$Survived == 1,2])
logitPr = predict(fitLogit, newdata =Xtest, type = "prob")
hist(logitPr[Xtest$Survived == 0,1], col = rgb(0,1 ,0,alpha = .5))
hist(logitPr[Xtest$Survived == 1,1], col = rgb(1,0,0,alpha = .5),add = 1)
v = mean(logitPr[Xtest$Survived == 0,1])+mean(logitPr[Xtest$Survived == 1,1])
abline(v=v/2)
#decision bounds for QDA
qdaPr = predict(fitQda, newdata =Xtest, type = "prob")
hist(qdaPr[Xtest$Survived == 0,1], col = rgb(0,1 ,0,alpha = .5))
hist(qdaPr[Xtest$Survived == 1,1], col = rgb(1,0,0,alpha = .5),add = 1)
v = mean(qdaPr[Xtest$Survived == 0,1])+mean(qdaPr[Xtest$Survived == 1,1])
abline(v=v/2)
legend()
#decision bounds for QDA
qdaPr = predict(fitQda, newdata =Xtest, type = "prob")
hist(qdaPr[Xtest$Survived == 0,1], col = rgb(0,1 ,0,alpha = .5))
hist(qdaPr[Xtest$Survived == 1,1], col = rgb(1,0,0,alpha = .5),add = 1)
v = mean(qdaPr[Xtest$Survived == 0,1])+mean(qdaPr[Xtest$Survived == 1,1])
abline(v=v/2)
legend(0,60, legend = c("survided","died"), col = c(rgb(0,1 ,0), rgb(1,0,0))
#decision bounds for QDA
qdaPr = predict(fitQda, newdata =Xtest, type = "prob")
hist(qdaPr[Xtest$Survived == 0,1], col = rgb(0,1 ,0,alpha = .5))
hist(qdaPr[Xtest$Survived == 1,1], col = rgb(1,0,0,alpha = .5),add = 1)
v = mean(qdaPr[Xtest$Survived == 0,1])+mean(qdaPr[Xtest$Survived == 1,1])
abline(v=v/2)
legend(0,60, legend = c("survided","died"), col = c(rgb(0,1 ,0), rgb(1,0,0)))
#decision bounds for QDA
qdaPr = predict(fitQda, newdata =Xtest, type = "prob")
hist(qdaPr[Xtest$Survived == 0,1], col = rgb(0,1 ,0,alpha = .5))
hist(qdaPr[Xtest$Survived == 1,1], col = rgb(1,0,0,alpha = .5),add = 1)
v = mean(qdaPr[Xtest$Survived == 0,1])+mean(qdaPr[Xtest$Survived == 1,1])
abline(v=v/2)
legend(0,60, legend = c("survived","died"), fill = c(rgb(0,1 ,0), rgb(1,0,0)))
#decision bounds for QDA
qdaPr = predict(fitQda, newdata =Xtest, type = "prob")
hist(qdaPr[Xtest$Survived == 0,1], col = rgb(0,1 ,0,alpha = .5))
hist(qdaPr[Xtest$Survived == 1,1], col = rgb(1,0,0,alpha = .5),add = 1)
v = mean(qdaPr[Xtest$Survived == 0,1])+mean(qdaPr[Xtest$Survived == 1,1])
abline(v=v/2)
legend(0,60, legend = c("survived","died"), fill = c(rgb(0,1 ,0,.5), rgb(1,0,0,.5)))
?rg
View(qdaPr)
#decision bounds for QDA
qdaPr = predict(fitQda, newdata =Xtest, type = "prob")
hist(qdaPr[Xtest$Survived == 0,2], col = rgb(0,1 ,0,alpha = .5), xlab = "Probality of ")
hist(qdaPr[Xtest$Survived == 1,2], col = rgb(1,0,0,alpha = .5),add = 1)
v = mean(qdaPr[Xtest$Survived == 0,2])+mean(qdaPr[Xtest$Survived == 1,2])
abline(v=v/2)
legend(0,60, legend = c("survived","died"), fill = c(rgb(0,1 ,0,.5), rgb(1,0,0,.5)))
#decision bounds for QDA
qdaPr = predict(fitQda, newdata =Xtest, type = "prob")
hist(qdaPr[Xtest$Survived == 0,1], col = rgb(0,1 ,0,alpha = .5),)
hist(qdaPr[Xtest$Survived == 1,1], col = rgb(1,0,0,alpha = .5),add = 1)
v = mean(qdaPr[Xtest$Survived == 0,1])+mean(qdaPr[Xtest$Survived == 1,1])
abline(v=v/2)
legend(0,60, legend = c("survived","died"), fill = c(rgb(0,1 ,0,.5), rgb(1,0,0,.5)))
#decision bounds for QDA
qdaPr = predict(fitQda, newdata =Xtest, type = "prob")
hist(qdaPr[Xtest$Survived == 0,2], col = rgb(0,1 ,0,alpha = .5),)
hist(qdaPr[Xtest$Survived == 1,2], col = rgb(1,0,0,alpha = .5),add = 1)
v = mean(qdaPr[Xtest$Survived == 0,2])+mean(qdaPr[Xtest$Survived == 1,2])
abline(v=v/2)
legend(0,60, legend = c("survived","died"), fill = c(rgb(0,1 ,0,.5), rgb(1,0,0,.5)))
#decision bounds for QDA
qdaPr = predict(fitQda, newdata =Xtest, type = "prob")
hist(qdaPr[Xtest$Survived == 0,2], col = rgb(0,1 ,0,alpha = .5),)
hist(qdaPr[Xtest$Survived == 1,2], col = rgb(1,0,0,alpha = .5),add = 1)
v = mean(qdaPr[Xtest$Survived == 0,2])+mean(qdaPr[Xtest$Survived == 1,2])
abline(v=v/2)
legend(0,60, legend = c("died","survived"), fill = c(rgb(0,1 ,0,.5), rgb(1,0,0,.5)))
#decision bounds for QDA
qdaPr = predict(fitQda, newdata =Xtest, type = "prob")
hist(qdaPr[Xtest$Survived == 0,2], col = rgb(0,1 ,0,alpha = .5),
main = "QDA Decision Bounds", xlab = "Prob. of Survival")
hist(qdaPr[Xtest$Survived == 1,2], col = rgb(1,0,0,alpha = .5),add = 1)
v = mean(qdaPr[Xtest$Survived == 0,2])+mean(qdaPr[Xtest$Survived == 1,2])
abline(v=v/2)
legend(0.8,60, legend = c("died","survived"), fill = c(rgb(0,1 ,0,.5), rgb(1,0,0,.5)))
#decision bounds for logistic regression
logitPr = predict(fitLogit, newdata =Xtest, type = "prob")
hist(logitPr[Xtest$Survived == 0,2], col = rgb(0,1 ,0,alpha = .5),
main = "QDA Decision Bounds", xlab = "Prob. of Survival")
hist(logitPr[Xtest$Survived == 1,2], col = rgb(1,0,0,alpha = .5),add = 1)
v = mean(logitPr[Xtest$Survived == 0,2])+mean(logitPr[Xtest$Survived == 1,2])
abline(v=v/2)
legend(0.8,60, legend = c("died","survived"), fill = c(rgb(0,1 ,0,.5), rgb(1,0,0,.5)))
#decision bounds for logistic regression
logitPr = predict(fitLogit, newdata =Xtest, type = "prob")
hist(logitPr[Xtest$Survived == 0,2], col = rgb(0,1 ,0,alpha = .5),
main = "QDA Decision Bounds", xlab = "Prob. of Survival")
hist(logitPr[Xtest$Survived == 1,2], col = rgb(1,0,0,alpha = .5),add = 1)
v = mean(logitPr[Xtest$Survived == 0,2])+mean(logitPr[Xtest$Survived == 1,2])
abline(v=v/2)
legend(0.8,40, legend = c("died","survived"), fill = c(rgb(0,1 ,0,.5), rgb(1,0,0,.5)))
#decision bounds for QDA
qdaPr = predict(fitQda, newdata =Xtest, type = "prob")
hist(qdaPr[Xtest$Survived == 0,2], col = rgb(.8,1 ,.4,alpha = .5),
main = "QDA Decision Bounds", xlab = "Prob. of Survival")
hist(qdaPr[Xtest$Survived == 1,2], col = rgb(.8,.8,.6,alpha = .5),add = 1)
v = mean(qdaPr[Xtest$Survived == 0,2])+mean(qdaPr[Xtest$Survived == 1,2])
abline(v=v/2)
legend(0.8,60, legend = c("died","survived"), fill = c(rgb(0,1 ,0,.5), rgb(1,0,0,.5)))
#decision bounds for QDA
qdaPr = predict(fitQda, newdata =Xtest, type = "prob")
hist(qdaPr[Xtest$Survived == 0,2], col = rgb(.8,1 ,.4,alpha = .5),
main = "QDA Decision Bounds", xlab = "Prob. of Survival")
hist(qdaPr[Xtest$Survived == 1,2], col = rgb(1,.8,.6,alpha = .5),add = 1)
v = mean(qdaPr[Xtest$Survived == 0,2])+mean(qdaPr[Xtest$Survived == 1,2])
abline(v=v/2)
legend(0.8,60, legend = c("died","survived"), fill = c(rgb(0,1 ,0,.5), rgb(1,0,0,.5)))
#decision bounds for QDA
qdaPr = predict(fitQda, newdata =Xtest, type = "prob")
hist(qdaPr[Xtest$Survived == 0,2], col = rgb(.8,1 ,.4,alpha = .5),
main = "QDA Decision Bounds", xlab = "Prob. of Survival")
hist(qdaPr[Xtest$Survived == 1,2], col = rgb(1,.8,.6,alpha = .5),add = 1)
v = mean(qdaPr[Xtest$Survived == 0,2])+mean(qdaPr[Xtest$Survived == 1,2])
abline(v=v/2)
legend(0.8,60, legend = c("died","survived"), fill = c(rgb(.8,1 ,.4,.5), rgb(1,.8,.6,.5)))
#decision bounds for logistic regression
logitPr = predict(fitLogit, newdata =Xtest, type = "prob")
hist(logitPr[Xtest$Survived == 0,2], col = rgb(.8,1 ,.4,alpha = .5),
main = "Logistic Decision Bounds", xlab = "Prob. of Survival")
hist(logitPr[Xtest$Survived == 1,2], col = rgb(1,.8,.6,alpha = .5),add = 1)
v = mean(logitPr[Xtest$Survived == 0,2])+mean(logitPr[Xtest$Survived == 1,2])
abline(v=v/2)
legend(0.8,40, legend = c("died","survived"), fill = c(rgb(.8,1 ,.4,.5), rgb(1,.8,.6,.5)))
library(dplyr)
library(caret)
library(forecast)
library(naivebayes)
library(MASS)
library(dplyr)
library(caret)
library(forecast)
library(naivebayes)
library(MASS)
