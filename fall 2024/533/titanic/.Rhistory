forecast(sys2, h = 24, level = 0.95)
forecast(sys2, h = 24, level = 0.95)[,1]
forecast(sys2, h = 24, level = 0.95)
forecast(sys2, h = 24, level = 0.95)$'Point Forecast'
forecast(sys2, h = 24, level = 0.95) -> fore1
View(fore1)
sum(fore1$mean - series.val)
forecast(sys2, h = 24, level = 0.95) -> fore1
sum(fore1$mean - series.val)
sum((fore1$mean - series.val)^2)
sum((fore1$mean - series.val)^2)
forecast(sys2, h = 24, level = 0.95) -> fore1
forecast(sys4, h = 24, level = 0.95) -> fore2
forecast(sys5, h = 24, level = 0.95) -> fore3
sum((fore1$mean - series.val)^2)
sum((fore2$mean - series.val)^2)
sum((fore3$mean - series.val)^2)
reticulate::repl_python()
reticulate::repl_python()
Yes
reticulate::repl_python()
Yess
Yes
Yes
cancel
quir
quit
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
1+9/4
cbind(x1,x2)
knitr::opts_chunk$set(echo = TRUE)
# load data
data <- read.csv("hw1.csv", header = T)
attach(data)
cbind(x1,x2)
cov(cbind(x1,x2))
S <- cov(cbind(x1,x2))
Gamma = eigen(S)$vectors
lam = eigen(S)$values
Gamma;lam
S
?arrows()
plot(x1,x2,xlim = c(-6,6))
arrows(0,0,lam[1]*Gamma[1,1],lam[1]*Gamma[2,1],lwd=3.5,col="forestgreen")
arrows(0,0,lam[2]*Gamma[1,2],lam[2]*Gamma[2,2],lwd=3.5,col="red")
#
Cmat = cbind(x1,x2)%*%Gamma
Cmat[,1] -> c1
Cmat[,2] -> c2
# render models
mod4 = lm(y ~ c1 + c2)
mod5 = lm(y ~ c1)
mod6 = lm(y ~ c2)
# getting r^2
sprintf("r^2 for y ~ c1 + c2 : %f",summary(mod4)$r.squared)
sprintf("r^2 for y ~ c1 : %f",summary(mod5)$r.squared)
sprintf("r^2 for y ~ c2 : %f",summary(mod6)$r.squared)
summary(mod4)$r.squared - summary(mod1)$r.squared
# render models
mod1 = lm(y ~ x1 + x2)
mod2 = lm(y ~ x1)
mod3 = lm(y ~ x2)
# getting r^2
sprintf("r^2 for y ~ x1 + x2 : %f",summary(mod1)$r.squared)
sprintf("r^2 for y ~ x1 : %f",summary(mod2)$r.squared)
sprintf("r^2 for y ~ x2 : %f",summary(mod3)$r.squared)
summary(mod4)$r.squared - summary(mod1)$r.squared
gc()
setwd("~/Desktop/githubbahubba/CSUF/fall 2024/533/titanic")
X <- read.csv("train.csv",header = T)
View(X)
knitr::opts_chunk$set(echo = TRUE)
X <- read.csv("train.csv",header = T)
names(X)
names(X[,1])
names(X[,2])
names(X[1,2])
type(X)
is.data.frame(X)
library(dplyr)
names(X)
X <- select(data=X,
Survived,
Pclass,
Sex,
Age,
Fare,
SibSp,
Parch)
?select()
X <- X %>% select(Survived,
Pclass,
Sex,
Age,
Fare,
SibSp,
Parch)
View(X)
as.numeric(Sex)
as.numeric(X$Sex)
mean(X$Age)
sum(!is.na(X$Age))
sum(!is.na(X$Age))/n(!is.na(X$Age))
n(!is.na(X$Age))
sum(!is.na(X$Age))/dplyr::n(!is.na(X$Age))
sum(!is.na(X$Age))/count(!is.na(X$Age))
mean(!is.na(X$Age))
!is.na(X$Age)
X$Age[!is.na(X$Age)]
mean(X$Age[!is.na(X$Age)])
meanAge = mean(X$Age[!is.na(X$Age)])
meanAge = mean(X$Age[!is.na(X$Age)])
for(v in X$Age){
if(is.na(v) ==  1){v = meanAge}
}
View(X)
meanAge = mean(X$Age[!is.na(X$Age)])
for(i in 1:length(X$Age)){
if(is.na(X$Age[i]) == 1){X$Age[i] = meanAge}
}
View(X)
?case_when
for(i in 1:891){
if(X$Sex[i] == "Male"){X$Sex[i] = 1}
else{X$Sex[i] = 0}
}
View(X)
knitr::opts_chunk$set(echo = TRUE)
X <- read.csv("train.csv",header = T)
library(dplyr)
X <- X %>% select(Survived,
Pclass,
Sex,
Age,
Fare,
SibSp,
Parch)
meanAge = mean(X$Age[!is.na(X$Age)])
for(i in 1:length(X$Age)){
if(is.na(X$Age[i]) == 1){X$Age[i] = meanAge}
}
for(i in 1:891){
if(X$Sex[i] == "male"){X$Sex[i] = 1}
else{X$Sex[i] = 0}
}
891 * .8
trainIndex <- sample(1:891, size = 713, replace = F)
Xtrain <- X[trainIndex,]
Xtest <- X[-trainIndex,]
View(Xtest)
View(Xtrain)
?train()
library(caret)
# treain the logit
fitLogit <- train(Survived ~ .,
data= Xtrain)
# treain the logit
fitLogit <- train(Survived ~ .,
data= Xtrain,
method = "glm",
family = "binomial")
Xtrain$Survived <-as.factor(Xtrain$Survived)
Xtrain$Survived <-as.factor(Xtrain$Survived)
# train the logit
fitLogit <- train(Survived ~ .,
data= Xtrain,
method = "glm",
family = "binomial")
View(fitLogit)
# print summary
summary(fitLogit)
View(Xtrain)
Xtest <- Xtest %>%
mutate(logityhat = predict(fitLogit, newdata =., type = "raw"))
View(Xtest)
(qdayhat = predict(fitQda, newdata =., type = "raw"))
# accuracy
Xtest <- Xtest %>%
mutate(qdayhat = predict(fitQda, newdata =., type = "raw"))
# training on the QDA
fitQda <- train(method = "qda", Survived ~ ., data = Xtrain)
# accuracy
Xtest <- Xtest %>%
mutate(qdayhat = predict(fitQda, newdata =., type = "raw"))
View(Xtest)
# comparing accuracy
Xtest %>% accuracy(truth = Survived, estimate = logityhat)
library(yardstick)
library(forecast)
Xtest %>% accuracy(truth = Survived, estimate = logityhat)
# comparing accuracy
Xtest %>% accuracy(truth = Survived, estimate = logityhat)
?confusionMatrix(
)
Xtest %>% confusionMatrix(Survived,logityhat)
Xtest %>% confusionMatrix(Survived,logityhat)
confusionMatrix(Survived,logityhat,data = Xtrain)
confusionMatrix(Xtest$Survived,Xtest$logityhat)
# comparing accuracy
Xtest %>% accuracy(truth = Survived, estimate = logityhat)
# comparing accuracy
Xtest$Survived <-as.factor(Xtest$Survived)
Xtest %>% accuracy(truth = Survived, estimate = logityhat)
Xtest$logityhat <- as.factor(Xtest$Survived)
Xtest %>% accuracy(truth = Survived, estimate = logityhat)
knitr::opts_chunk$set(echo = TRUE)
X <- read.csv("train.csv",header = T)
library(dplyr)
library(caret)
library(forecast)
X <- X %>% select(Survived,
Pclass,
Sex,
Age,
Fare,
SibSp,
Parch)
meanAge = mean(X$Age[!is.na(X$Age)])
for(i in 1:length(X$Age)){
if(is.na(X$Age[i]) == 1){X$Age[i] = meanAge}
}
for(i in 1:891){
if(X$Sex[i] == "male"){X$Sex[i] = 1}
else{X$Sex[i] = 0}
}
trainIndex <- sample(1:891, size = 713, replace = F)
Xtrain <- X[trainIndex,]
Xtest <- X[-trainIndex,]
# make sure Survived is a factor
Xtrain$Survived <-as.factor(Xtrain$Survived)
# train the logit
fitLogit <- train(Survived ~ .,
data= Xtrain,
method = "glm",
family = "binomial")
# print summary
summary(fitLogit)
# doing this to get the accuracy
Xtest <- Xtest %>%
mutate(logityhat = predict(fitLogit, newdata =., type = "raw"))
# training on the QDA
fitQda <- train(method = "qda", Survived ~ ., data = Xtrain)
# accuracy
Xtest <- Xtest %>%
mutate(qdayhat = predict(fitQda, newdata =., type = "raw"))
# comparing accuracy
Xtest$Survived <-as.factor(Xtest$Survived)
Xtest$logityhat <- as.factor(Xtest$logityhat)
Xtest %>% accuracy(truth = Survived, estimate = logityhat)
# comparing accuracy
confusionMatrix(Xtest$logityhat,Xtest$Survived)
# comparing accuracy
confusionMatrix(Xtest$logityhat,Xtest$Survived)$overall$"Accuracy"
# comparing accuracy
confusionMatrix(Xtest$logityhat,Xtest$Survived)$overall$["Accuracy"]
# comparing accuracy
confusionMatrix(Xtest$logityhat,Xtest$Survived)$overall"Accuracy"
# comparing accuracy
confusionMatrix(Xtest$logityhat,Xtest$Survived)$overall["Accuracy"]
confusionMatrix(Xtest$qdayhat,Xtest$Survived)$overall["Accuracy"]
# comparing accuracy
confusionMatrix(Xtest$logityhat,Xtest$Survived)$overall["Accuracy"]
confusionMatrix(Xtest$qdayhat,Xtest$Survived)$overall["Accuracy"]
fitNb <- train(method = "nb", Survived ~ . , data = Xtest)
knitr::opts_chunk$set(echo = TRUE)
X <- read.csv("train.csv",header = T)
library(dplyr)
library(caret)
library(forecast)
library(naive)
library(naivebayes)
knitr::opts_chunk$set(echo = TRUE)
X <- read.csv("train.csv",header = T)
library(dplyr)
library(caret)
library(forecast)
library(naivebayes)
# doing this to get the accuracy
Xtest <- Xtest %>%
mutate(logityhat = predict(fitLogit, newdata =., type = "raw"))
knitr::opts_chunk$set(echo = TRUE)
X <- read.csv("train.csv",header = T)
library(dplyr)
library(caret)
library(forecast)
library(naivebayes)
X <- X %>% select(Survived,
Pclass,
Sex,
Age,
Fare,
SibSp,
Parch)
meanAge = mean(X$Age[!is.na(X$Age)])
for(i in 1:length(X$Age)){
if(is.na(X$Age[i]) == 1){X$Age[i] = meanAge}
}
for(i in 1:891){
if(X$Sex[i] == "male"){X$Sex[i] = 1}
else{X$Sex[i] = 0}
}
set.seed(533)
trainIndex <- sample(1:891, size = 713, replace = F)
Xtrain <- X[trainIndex,]
Xtest <- X[-trainIndex,]
# make sure Survived is a factor
Xtrain$Survived <-as.factor(Xtrain$Survived)
# train the logit
fitLogit <- train(Survived ~ .,
data= Xtrain,
method = "glm",
family = "binomial")
# print summary
summary(fitLogit)
# doing this to get the accuracy
Xtest <- Xtest %>%
mutate(logityhat = predict(fitLogit, newdata =., type = "raw"))
# confusion matrix
confusionMatrix(Xtest$logityhat,Xtest$Survived)
# doing this to get the accuracy
Xtest <- Xtest %>%
mutate(logityhat = predict(fitLogit, newdata =., type = "raw"))
# confusion matrix
confusionMatrix(Xtest$logityhat,Xtest$Survived)
# doing this to get the accuracy
Xtest <- Xtest %>%
mutate(logityhat = predict(fitLogit, newdata =., type = "raw"))
# confusion matrix
confusionMatrix(Xtest$logityhat,Xtest$Survived)
# doing this to get the accuracy
Xtest <- Xtest %>%
mutate(logityhat = predict(fitLogit, newdata =., type = "raw"))
# confusion matrix
confusionMatrix(Xtest$logityhat,Xtest$Survived)
# doing this to get the accuracy
Xtest <- Xtest %>%
mutate(logityhat = predict(fitLogit, newdata =., type = "raw"))
# confusion matrix
Xtest$Survived <- as.factor(Xtest$Survived)
confusionMatrix(Xtest$logityhat,Xtest$Survived)
confusionMatrix(Xtest$logityhat,Xtest$Survived) -> cm
View(cm)
confusionMatrix(Xtest$logityhat,Xtest$Survived)$table
confusionMatrix(Xtest$logityhat,Xtest$Survived)$table[1,1]
confusionMatrix(Xtest$logityhat,Xtest$Survived)$table
confusionMatrix(Xtest$logityhat,Xtest$Survived)$table -> cm.log
print('b \n p')
print('b /n p')
print('b n/ p')
print('b \n p')
print("b \n p")
# doing this to get the accuracy
Xtest <- Xtest %>%
mutate(logityhat = predict(fitLogit, newdata =., type = "raw"))
# confusion matrix
Xtest$Survived <- as.factor(Xtest$Survived)
confusionMatrix(Xtest$logityhat,Xtest$Survived)$table -> cm.log
# display for accuracy, precision, recall, f1score
table1 <- function(tab){
tab[1,1] -> tn
tab[2,2] -> tp
tab[1,2] -> fn
tab[2,1] -> fp
a = (tp+tn)/(tp+tn+fp+fn)
p = tp/(tp+fp)
r = tp/(tp+fn)
f1 = 2*p*r/(p+r)
sprintf("Accuracy: %f \nPrecision: %f \nRecall: %f \nF1: %f",a,p,r,f1)
}
table1(cm.log)
# doing this to get the accuracy
Xtest <- Xtest %>%
mutate(logityhat = predict(fitLogit, newdata =., type = "raw"))
# confusion matrix
Xtest$Survived <- as.factor(Xtest$Survived)
confusionMatrix(Xtest$logityhat,Xtest$Survived)$table -> cm.log
# display for accuracy, precision, recall, f1score
table1 <- function(tab){
tab[1,1] -> tn
tab[2,2] -> tp
tab[1,2] -> fn
tab[2,1] -> fp
a = (tp+tn)/(tp+tn+fp+fn)
p = tp/(tp+fp)
r = tp/(tp+fn)
f1 = 2*p*r/(p+r)
sprintf("Accuracy: %f Precision: %f Recall: %f F1: %f",a,p,r,f1)
}
table1(cm.log)
# doing this to get the accuracy
Xtest <- Xtest %>%
mutate(logityhat = predict(fitLogit, newdata =., type = "raw"))
# confusion matrix
Xtest$Survived <- as.factor(Xtest$Survived)
confusionMatrix(Xtest$logityhat,Xtest$Survived)$table -> cm.log
# display for accuracy, precision, recall, f1score
table1 <- function(tab){
tab[1,1] -> tn
tab[2,2] -> tp
tab[1,2] -> fn
tab[2,1] -> fp
a = (tp+tn)/(tp+tn+fp+fn)
p = tp/(tp+fp)
r = tp/(tp+fn)
f1 = 2*p*r/(p+r)
sprintf("Accuracy: %f | Precision: %f | Recall: %f | F1: %f",a,p,r,f1)
}
table1(cm.log)
# doing this to get the accuracy
Xtest <- Xtest %>%
mutate(logityhat = predict(fitLogit, newdata =., type = "raw"))
# confusion matrix
Xtest$Survived <- as.factor(Xtest$Survived)
confusionMatrix(Xtest$logityhat,Xtest$Survived)$table -> cm.log
# display for accuracy, precision, recall, f1score
table1 <- function(tab){
tab[1,1] -> tn
tab[2,2] -> tp
tab[1,2] -> fp
tab[2,1] -> fn
a = (tp+tn)/(tp+tn+fp+fn)
p = tp/(tp+fp)
r = tp/(tp+fn)
f1 = 2*p*r/(p+r)
sprintf("Accuracy: %f | Precision: %f | Recall: %f | F1: %f",a,p,r,f1)
}
table1(cm.log)
# training on the QDA
fitQda <- train(method = "qda", Survived ~ ., data = Xtrain)
# accuracy
Xtest <- Xtest %>%
mutate(qdayhat = predict(fitQda, newdata =., type = "raw"))
# comparing accuracy
confusionMatrix(Xtest$logityhat,Xtest$Survived)$overall["Accuracy"]
confusionMatrix(Xtest$qdayhat,Xtest$Survived)$overall["Accuracy"]
# doing this to get the accuracy
Xtest <- Xtest %>%
mutate(logityhat = predict(fitLogit, newdata =., type = "raw"))
# confusion matrix
Xtest$Survived <- as.factor(Xtest$Survived)
confusionMatrix(Xtest$logityhat,Xtest$Survived)$table -> cm.log
# display for accuracy, precision, recall, f1score
table1 <- function(tab,name){
tab[1,1] -> tn
tab[2,2] -> tp
tab[1,2] -> fp
tab[2,1] -> fn
a = (tp+tn)/(tp+tn+fp+fn)
p = tp/(tp+fp)
r = tp/(tp+fn)
f1 = 2*p*r/(p+r)
sprintf("for %s || Accuracy: %f | Precision: %f | Recall: %f | F1: %f",name,a,p,r,f1)
}
table1(cm.log,"Logistic Regression")
# doing this to get the accuracy
Xtest <- Xtest %>%
mutate(logityhat = predict(fitLogit, newdata =., type = "raw"))
# confusion matrix
Xtest$Survived <- as.factor(Xtest$Survived)
confusionMatrix(Xtest$logityhat,Xtest$Survived)$table -> cm.log
# display for accuracy, precision, recall, f1score
table1 <- function(tab,name){
tab[1,1] -> tn
tab[2,2] -> tp
tab[1,2] -> fp
tab[2,1] -> fn
a = (tp+tn)/(tp+tn+fp+fn)
p = tp/(tp+fp)
r = tp/(tp+fn)
f1 = 2*p*r/(p+r)
sprintf("%s || Accuracy: %f | Precision: %f | Recall: %f | F1: %f",name,a,p,r,f1)
}
table1(cm.log,"Logistic Regression")
confusionMatrix(Xtest$nbyhat,Xtest$Survived) -> cm.nb
fitNb <- train(method = "naive_bayes", Survived ~ . , data = Xtest)
Xtest <- Xtest %>%
mutate(nbyhat = predict(fitNb, newdata =., type = "raw"))
confusionMatrix(Xtest$nbyhat,Xtest$Survived) -> cm.nb
cm.nb$overall["Accuracy"]
table1(cm.nb,"Naive Bayes")
table1(cm.nb$table,"Naive Bayes")
table1(cm.log,"Logistic Regression")
table1(confusionMatrix(Xtest$qdayhat,Xtest$Survived)$table,"QDA")
table1(cm.nb$table,"Naive Bayes")
if(printtnr == 0){
sprintf("%s || Accuracy: %f | Precision: %f | Recall(TNR): %f | F1: %f",name,a,p,r,f1)
} else{
sprintf("%s || Accuracy: %f | Precision: %f | Recall(TNR): %f | F1: %f | TNR: %f",name,a,p,r,f1,tnr)
}}
# display for accuracy, precision, recall, f1score
table1 <- function(tab,name, printtnr = F){
tab[1,1] -> tn
tab[2,2] -> tp
tab[1,2] -> fp
tab[2,1] -> fn
a = (tp+tn)/(tp+tn+fp+fn)
p = tp/(tp+fp)
r = tp/(tp+fn)
f1 = 2*p*r/(p+r)
tnr = tn/(tn+fp)
if(printtnr == 0){
sprintf("%s || Accuracy: %f | Precision: %f | Recall(TNR): %f | F1: %f",name,a,p,r,f1)
} else{
sprintf("%s || Accuracy: %f | Precision: %f | Recall(TNR): %f | F1: %f | TNR: %f",name,a,p,r,f1,tnr)
}
}
table1(cm.log,"Logistic Regression")
table1(cm.log,"Logistic Regression",T)
table1(confusionMatrix(Xtest$qdayhat,Xtest$Survived)$table,"QDA",T)
table1(cm.nb$table,"Naive Bayes",T)
