# sample ACF for iid noise [N(0,1)]
pdf('SampleACF1.pdf')
X <- rnorm(100) # generating (independently) 100 realizations of N(0,1)
par(mfrow=c(2,1)) #dividing the page into 2 rows and one column
plot(X,type='l',main='iid noise') #plotting the data
acf(X,main='sample ACF for iid noise') # plotting the acf
dev.off()
# sample ACF for MA(1) process
pdf('SampleACF-MA1.pdf')
X <- arima.sim(list(order = c(0,0,1), ma = 0.85), n = 200) # simulating data from an MA(1) process
par(mfrow=c(2,1)) #dividing the page into 2 rows and one column
plot(X,type='l',main='simulated data from MA(1)') #plotting the data
acf(X,main='sample ACF for MA(1)') # plotting the acf
dev.off()
# sample ACF for MA(1) process
#pdf('SampleACF-AR1-NON.pdf')
X <- arima.sim(list(order = c(1,0,0), ar = .7), n = 200) # simulating data from an AR(1) process
par(mfrow=c(2,1)) #dividing the page into 2 rows and one column
plot(X,type='l',main='simulated data from AR(1)') #plotting the data
acf(X,main='sample ACF for AR(1)') # plotting the acf
#dev.off()
# sample ACF for data with trend
#pdf('SampleACF1-1.pdf')
a <- seq(1,100,length=200)
X <- 22-15*a+0.3*a^2+rnorm(200,500,50)
par(mfrow=c(2,1)) #dividing the page into 2 rows and one column
ts.plot(X)
acf(X)
#dev.off()
# sample ACF for data with trend and seasonal component
#pdf('SampleACF1-2.pdf')
a <- seq(1,10,length=200)
X <- 22-15*a+a^2+5*sin(20*a)+rnorm(200,20,2)
par(mfrow=c(2,1)) #dividing the page into 2 rows and one column
ts.plot(X)
acf(X)
#dev.off()
# sample ACF for US Accidental Deaths data
#pdf('SampleACF2.pdf')
data(USAccDeaths) #calling the data
par(mfrow=c(2,1)) #dividing the page into 2 rows and one column
plot(USAccDeaths,type='l',main='# of Accidental deaths in US') #plotting the data
acf(USAccDeaths,main='sample ACF for US accidental deaths data',lag.max=24) # plotting the acf
#dev.off()
# a simulation example with substantial deterministic periodicity
#pdf('SampleACF3.pdf')
X <- sin(1:200) #generating purely periodic data
par(mfrow=c(2,1))
plot(X,type='l')
acf(X)
#dev.off()
# Introducing noise to the previous case
#pdf('SampleACF4-4.pdf')
X <- sin(1:200)+rnorm(200,0,2) #0.5 is the standard deviation of the noise term. Change and see the effect on sample ACF
par(mfrow=c(2,1))
plot(X,type='l')
title(main=expression(sigma==2))
acf(X)
#dev.off()
# a simulation example with substantial deterministic periodicity
#pdf('SampleACF5.pdf')
X <- 1:500+100*sin(1:500) #generating data with trend and periodic component
par(mfrow=c(2,1))
plot(X,type='l')
acf(X)
#dev.off()
# sample ACF for iid noise [N(0,1)]
pdf('SampleACF1.pdf')
X <- rnorm(100) # generating (independently) 100 realizations of N(0,1)
par(mfrow=c(2,1)) #dividing the page into 2 rows and one column
plot(X,type='l',main='iid noise') #plotting the data
acf(X,main='sample ACF for iid noise') # plotting the acf
dev.off()
# sample ACF for MA(1) process
pdf('SampleACF-MA1.pdf')
X <- arima.sim(list(order = c(0,0,1), ma = 0.85), n = 200) # simulating data from an MA(1) process
par(mfrow=c(2,1)) #dividing the page into 2 rows and one column
plot(X,type='l',main='simulated data from MA(1)') #plotting the data
acf(X,main='sample ACF for MA(1)') # plotting the acf
dev.off()
?cumsum()
sample(c(-1,1),prob = (1/2,1/2))
sample(c(-1,1),prob = c(1/2,1/2))
?sample()]
?sample()
sample(c(-1,1),size = 1, prob = c(1/2,1/2))
sample(c(-1,1),size = 1, prob = c(1/2,1/2))
sample(c(-1,1),size = 1, prob = c(1/2,1/2))
sample(c(-1,1),size = 1, prob = c(1/2,1/2))
1:t
1:1
1:0
knitr::opts_chunk$set(echo = TRUE)
# initialize Svec
Svec = rep(0,501)
Sfunc <- function(t){ # create a fucntion for S_t
X = 0 # initialize X
for(k in 1:t){ # summation
X = X + sample(c(-1,1),size = 1, prob = c(1/2,1/2))
}
return(X)
}
# initialize Svec
Svec = rep(0,501)
# generate S_t's from 0 to 500
for(t in 2:501){
Svec[t] = Sfunc(t)
}
?plot()
# make graphics
plot(Svec,type = "l")
# make graphics
plot(Svec,type = "l",ylab = "S_t", xlab = "t")
# make graphics
plot(Svec,type = "l",ylab = "S_t", xlab = "t")
acf(Svec)
Sfunc <- function(t){ # create a fucntion for S_t
X = 0 # initialize X
for(k in 1:t){ # summation
X = X + sample(c(-1,1),size = 1, prob = c(1/2,1/2))
}
return(X)
}
# initialize Svec
Svec = rep(0,501)
# generate S_t's from 0 to 500
for(t in 1:500){
Svec[t+1] = Sfunc(t)
}
# make graphics
plot(Svec,type = "l",ylab = "S_t", xlab = "t")
acf(Svec)
# make graphics
plot.ts(Svec,type = "l",ylab = "S_t", xlab = "t")
# make graphics
plot.ts(cumsum(Svec),type = "l",ylab = "S_t", xlab = "t")
acf(Svec)
# initialize X
X = as.vector(sample(c(-1,1),500,prob = (.5,.5)))
# initialize X
X = as.vector(sample(c(-1,1),500,prob = c(.5,.5)))
# initialize X
X = as.vector(sample(c(-1,1),size = 500,prob = c(.5,.5)))
# initialize X
X = sample(c(-1,1),size = 500,prob = c(.5,.5))
# initialize X
sample(c(-1,1),size = 500,prob = c(.5,.5))
# initialize X
sample(c(-1,1),size = 500,prob = c(.5,.5),replace = T) ->
# initialize Svec
Svec = rep(0,501)
# initialize X
sample(c(-1,1),size = 500,prob = c(.5,.5),replace = T) -> X
# initialize Svec
Svec = c(0,X)
# initialize Svec
Svec = cumsum(c(0,X))
# make graphics
plot.ts(cumsum(Svec),type = "l",ylab = "S_t", xlab = "t")
acf(Svec)
# make graphics
plot.ts(Svec,type = "l",ylab = "S_t", xlab = "t")
acf(Svec)
# initialize X
sample(c(-1,1),size = 500,prob = c(.5,.5),replace = T) -> X
# initialize Svec
Svec = cumsum(c(0,X))
# make graphics
plot.ts(Svec,type = "l",ylab = "S_t", xlab = "t")
acf(Svec)
# running means
Svec_bar = Svec
for(i in 1:501){
mean(Svec[1:i]) -> Svec_bar[i]
}
plot(Svec_bar)
# initialize X
sample(c(-1,1),size = 500,prob = c(.5,.5),replace = T) -> X
# initialize Svec
Svec = cumsum(c(0,X))
par(mfrow=c(2,1))# make graphics
plot.ts(Svec,type = "l",ylab = "S_t", xlab = "t")
acf(Svec)
# initialize X
sample(c(-1,1),size = 500,prob = c(.5,.5),replace = T) -> X
# initialize Svec
Svec = cumsum(c(0,X))
par(mfrow=c(2,1))# make graphics
plot.ts(Svec,type = "l",ylab = "S_t", xlab = "t")
acf(Svec)
# initialize X
sample(c(-1,1),size = 500,prob = c(.5,.5),replace = T) -> X
# initialize Svec
Svec = cumsum(c(0,X))
# make graphics
plot.ts(Svec,type = "l",ylab = "S_t", xlab = "t")
acf(Svec)
# initialize X
sample(c(-1,1),size = 500,prob = c(.5,.5),replace = T) -> X
# initialize Svec
Svec = cumsum(c(0,X))
# make graphics
plot.ts(Svec,type = "l",ylab = "S_t", xlab = "t")
acf(Svec)
# running means
Svec_bar = Svec
for(i in 1:501){
mean(Svec[1:i]) -> Svec_bar[i]
}
# plot running means
plot(Svec_bar)
# initialize X
sample(c(-1,1),size = 500,prob = c(.5,.5),replace = T) -> X
# initialize Svec
Svec = cumsum(c(0,X))
# make graphics
plot.ts(Svec,type = "l",ylab = "S_t", xlab = "t")
acf(Svec)
set.seed(536.1)
# initialize X
sample(c(-1,1),size = 500,prob = c(.5,.5),replace = T) -> X
# initialize Svec
Svec = cumsum(c(0,X))
# make graphics
plot.ts(Svec,type = "l",ylab = "S_t", xlab = "t")
acf(Svec)
# running means
Svec_bar = Svec
for(i in 1:501){
mean(Svec[1:i]) -> Svec_bar[i]
}
# plot running means
plot(Svec_bar)
# plot running means
plot(Svec_bar,type = 'l')
data <- read.table("TotalSales-2.txt",header = T)
head(data)
data <- as.matrix(data)
head(data)
dim(data)
plot(data[1,])
plot(data[,1])
plot(data[,1],type = 'l')
time(V1)
time(data$V1)
time(data[,1])
head(time(data[,1]))
linear_fit = lm(data[,1] ~ time(data[,1]),data = data)
data <- read.table("TotalSales-2.txt",header = T)
dim(data)
plot(data[,1],type = 'l')
linear_fit = lm(data[,1] ~ time(data[,1]),data = data)
summary(linear_fit)
plot.ts(data[,1],type = 'l')
plot.ts(data[,1],type = 's')
plot.ts(data[,1],type = 'l')
plot.ts(data[,1],type = 's')
plot.ts(data[,1],type = 's')
abline(a=0.24812,b=152.18623)
?abline
plot.ts(data[,1],type = 's')
abline(b=0.24812,a=152.18623)
?ts()
plot.ts(data[,1],type = 's')
linear_fit = lm(data[,1] ~ time(data[,1]),data = data)
abline(linear_fit)
plot.ts(data[,1],type = 's')
linear_fit = lm(data[,1] ~ time(data[,1]),data = data)
abline(linear_fit)
linear_fit = lm(data[,1] ~ time(data[,1]),data = data)
summary(linear_fit)
?mod
?mod()
0%%4
1%%4
?mutate
?mutate()
library(dplyr)
?elseif
?ifelse
# consider seasonality
data$sea = rep(0,80)
for(i in 1:80){
if((1-i)%%4 == 0){data$sea[i] = "w"}
ifelse((1-i)%%4 == 1){data$sea[i] = "sp"}
# consider seasonality
data$sea = rep(0,80)
for(i in 1:80){
if((1-i)%%4 == 0){data$sea[i] = "w"
}ifelse((1-i)%%4 == 1){
# consider seasonality
data$sea = rep(0,80)
for(i in 1:80){
if((i-1)%%4 == 0){data$sea[i] = "w"
}ifelse((i-1)%%4 == 1){
0%%4
0%%4==0
80/4
seas <- rep(c("wi","sp","su","fa"),20)
data <- read.table("TotalSales-2.txt",header = T)
data$seas <- rep(c("wi","sp","su","fa"),20)
View(data)
plot.ts(data[,1],type = 's')
linear_fit = lm(data[,1] ~ time(data[,1]),data = data)
abline(linear_fit)
plot.ts(data[,1],type = 's')
linear_fit = lm(data[,1] ~ time(data[,1] + data$seas),data = data)
plot.ts(data[,1],type = 's')
linear_fit = lm(data[,1] ~ time(data[,1] + as.factor(data$seas)),data = data)
abline(linear_fit)
time <- time(data$X150.9)
View(data)
data$t <- time(data$X150.9)
View(data)
mean_wi = data$X150.9[data$seas = "wi"]
mean_wi <- data$X150.9[data$seas = "wi"]
mean_wi <- data$X150.9[data$seas == "wi"]
mean_sp <- data$X150.9[data$seas == "sp"]
mean_su <- data$X150.9[data$seas == "su"]
mean_fa <- data$X150.9[data$seas == "fa"]
plot(mean_wi,type = 'l', col = "skyblue")
line(mean_sp, col = "forestgreen")
plot(mean_wi,type = 'l', col = "skyblue")
lines(mean_sp, col = "forestgreen")
lines(mean_su, col = "red")
lines(mean_fa, col = "orange")
plot(mean_wi,type = 'l', col = "skyblue",ylab = "Data")
lines(mean_sp, col = "forestgreen")
lines(mean_su, col = "red")
lines(mean_fa, col = "orange")
data(AirPassengers) # Calling the built-in R data
head(AirPassengers)
plot(AirPassengers) # plotting the time-series data. Notice that the data is already in the form of a time series. To check this type AirPassengers and hit enter.
plot(log(AirPassengers))  # Plotting the log-transform of data
tim <- time(AirPassengers) #creates vector of time that TS was collected
cycle(AirPassengers) #gives the positions in the cycle of each observation
data$cyc <- cycle(data$X150.9)
View(data)
month <- as.factor(cycle(AirPassengers))
reg1 <- lm(log(AirPassengers)~tim+month)
plot(log(AirPassengers))
plot(log(AirPassengers))
points(tim,predict.lm(reg1),type='l',col='red')
import scipy
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
yes
Yes
no
reticulate::repl_python()
