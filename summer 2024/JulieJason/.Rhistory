knitr::opts_chunk$set(echo = TRUE)
series <- read.csv("/home/cern/Desktop/EMGdata_full.csv",header = T)
View(series)
unique(series)
plot.ts(series)
library(dplyr)
View(series)
names(series)
series %>% value_counts(TimeInSecond)
count = 1
v -> c()
count = 1
v <- c()
i = 1
for(r in 2:length(series$TimeInSecond)){
# if prev = current
if(series$TimeInSecond[r] == series$TimeInSecond[r-1]){
count  = count + 1
}
else{
v[i] = count
count  = 1
i = i + 1
}
}
unique(v)
View(series)
View(series)
unique(series$Event)
sum(series$Event[series$Event == "baseline deltoids"])
series$Event[series$Event == "baseline deltoids"]
series[series$Event == "baseline deltoids"]
series[series$Event == "baseline deltoids"]
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
N = length(series[1])
N = length(series[,1])
h = 0
for(r in 1:N){
if(series$Event == "baseline deltoids"){h = h +1}
}
h = 0
for(r in 1:N){
if(series$Event[r] == "baseline deltoids"){h = h +1}
}
?elseif
?ifelse
unique(series$Event) -> evn
evn[2]
evn[3]
evn[4]
evn = as.vector(unique(series$Event))
evn
bd = 0
irot = 0
irrs = 0
erot = 0
for(r in 1:N){
if(series$Event[r] == evn[4]){bd = bd +1} # baseline delts
ifelse(series$Event[r] == evn[6]){irot = irot + 1} # intern rot start
for(r in 1:N){
if(series$Event[r] == evn[4]){bd = bd +1} # baseline delts
ifelse(series$Event[r] == evn[6]){irot = irot + 1} # intern rot start
bd = 0
irot = 0
irrs = 0
erot = 0
for(r in 1:N){
if(series$Event[r] == evn[4]){bd = bd +1 # baseline delts
}ifelse(series$Event[r] == evn[6]){irot = irot + 1 # intern rot start
evn = as.vector(unique(series$Event))
bd = 0
irot = 0
irrs = 0
erot = 0
for(r in 1:N){
if(series$Event[r] == evn[4]){bd = bd +1 # baseline delts
}ifelse(series$Event[r] == evn[6]){irot = irot + 1 # intern rot start
bd = 0
irot = 0
irrs = 0
erot = 0
for(r in 1:N){
if(series$Event[r] == evn[4]){bd = bd +1 # baseline delts
}else if(series$Event[r] == evn[6]){irot = irot + 1 # intern rot start
}else if(series$Event[r] == evn[8]){irrs = irrs + 1 # internal rotation w/ resistance
}else if(series$Event[r] == evn[10]){erot = erot + 1} # external rotation)
}
bd;irot;irrs;erot
which(series$Event == env[4])
which(series$Event == evn[4])
for(i in 4:11){sprintf("%s ::: %d",evn[i],which(series$Event == evn[i]))}
?sprintf()
for(i in 4:11){sprintf("%s ::: %i",evn[i],which(series$Event == evn[i]))}
for(i in 4:11){
evn[i]
which(series$Event == evn[i])
}
for(i in 4:11){
print(evn[i])
print(which(series$Event == evn[i]))
}
POINTs <- c()
for(i in 4:11){
point = which(series$Event == evn[i])
print(evn[i])
print(point)
po[i-3] <- point
}
POINTs <- c()
for(i in 4:11){
point = which(series$Event == evn[i])
print(evn[i])
print(point)
POINTs[i-3] <- point
}
POINTs <- rbind(evn,po)
POINTs <- rbind(evn,POINTs)
View(POINTs)
POINTs <- c()
for(i in 4:11){
point = which(series$Event == evn[i])
print(evn[i])
print(point)
POINTs[i-3] <- point
}
POINTs <- rbind(evn[4:11],POINTs)
View(POINTs)
POINTs <- c()
for(i in 4:11){
POINTs[i-3] <- which(series$Event == evn[i])
}
POINTs <- rbind(evn[4:11],POINTs)
POINTs
View(POINTs)
STACK <- data.frame()
4%%2
names(STACK[,1]) -> c
names(STACK[,1]) <- chicken
names(STACK[,1]) <- "chicken"
col = data.frame(evn[i] = series[2,(POINTs[2,i]):(2,i+1)])
i=4
col = data.frame(evn[i] = series[2,(POINTs[2,i]):(POINTs[2,i+1])])
STACK <- data.frame()
for(i in 4:11){
if(i%%2 == 0){
STACK$evn[i]  = series[2,(POINTs[2,i]):(POINTs[2,i+1])]
}
}
STACK$evn[i]  = series[2,(POINTs[2,i]):(POINTs[2,i+1])]
STACK <- data.frame(NULL)
for(i in 4:11){
if(i%%2 == 0){
STACK$evn[i]  = series[2,(POINTs[2,i]):(POINTs[2,i+1])]
}
}
crap = data.frame(evn[i]  = series[2,(POINTs[2,i]):(POINTs[2,i+1])])
crap = data.frame(evn[4] = series[2,(POINTs[2,4]):(POINTs[2,5])])
as.character(env[4])
as.character(env[4])
as.character(evn[4])
crap = data.frame(as.character(evn[4]) = series[2,(POINTs[2,4]):(POINTs[2,5])])
crap = data.frame(as.character(evn[4]) = series[2,(POINTs[2,4]):(POINTs[2,5])])
head(series[2,(POINTs[2,i]):(POINTs[2,i+1]))
head(series[2,POINTs[2,i]:POINTs[2,i+1])
head(series[2,POINTs[2,i]:POINTs[2,i+1])
series[2,POINTs[2,i]:POINTs[2,i+1]
series[2,POINTs[2,i]:POINTs[2,i+1]
series[2,(POINTs[2,4]):(POINTs[2,5])
POINTs[2,4]
POINTs[2,4]
series[2,(as.numeric(POINTs[2,4]):as.numeric(POINTs[2,5])
q
series[2,(as.numeric(POINTs[2,4]):as.numeric(POINTs[2,5])
series
head(series)
head(series[,2])
series[(as.numeric(POINTs[2,4]):as.numeric(POINTs[2,5]),2]
series[(as.numeric(POINTs[2,4]):as.numeric(POINTs[2,5]),2]
series[(as.numeric(POINTs[2,4]):as.numeric(POINTs[2,5]),2]
POINTs
STACK <- data.frame("baseline deltoids" = series[1006325:1061121,2],
"internal rotation start pecs" = series[1237217:1258913,2],
"int rot w resistance pecs" = series[1439025:1469441,2],
"ext rot" = series[2257184:2318737,2]
)
bl.delt = series[1006325:1061121,2]
in.rot = series[1237217:1258913,2]
in.rot.res = series[1439025:1469441,2]
ex.rot = series[2257184:2318737,2]
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
par(mfrow=c(2,2))
plot.ts(bl.delt)
plot.ts(in.rot)
plot.ts(in.rot.res)
plot.ts(ex.rot)
par(mfrow=c(2,2))
plot.ts(abs(bl.delt))
plot.ts(abs(in.rot))
plot.ts(abs(in.rot.res))
plot.ts(abs(ex.rot))
#par(mfrow=c(2,2))
plot.ts(abs(bl.delt))
plot.ts(abs(in.rot))
plot.ts(abs(in.rot.res))
plot.ts(abs(ex.rot))
par(mfrow=c(2,2))
plot.ts(abs(bl.delt))
plot.ts(abs(in.rot))
plot.ts(abs(in.rot.res))
plot.ts(abs(ex.rot))
count = 1
v <- c()
i = 1
for(r in 2:length(series$TimeInSecond)){
# if prev = current
if(series$TimeInSecond[r] == series$TimeInSecond[r-1]){
count  = count + 1
}
else{
v[i] = count
count  = 1
i = i + 1
}
}
par(mfrow=c(2,2))
plot.ts(bl.delt)
plot.ts(in.rot)
plot.ts(in.rot.res)
plot.ts(ex.rot)
par(mfrow=c(2,2))
plot.ts(abs(bl.delt))
plot.ts(abs(in.rot))
plot.ts(abs(in.rot.res))
plot.ts(abs(ex.rot))
dat <- read.csv("/home/cern/Desktop/EMGdata_full.csv",header = T)
N = length(dat[,1])
# scan the names of flagged events
unique(dat$Event)
# the data we are primarily interested in is column 2
emg <- dat$EMG
# Row numbers of flagged events
event.times <- c(1006325, 1061121, 1237217, 1258913, 1439025, 1469441, 2257184, 2318737)
# Conditions, based on flagged event start/stop times
# Note that these events are of different lengths.
base.deltoid <- ts(emg[event.times[1]:event.times[2]])
IR.pecs <- ts(emg[event.times[3]:event.times[4]])
IR.pecs.resist <- ts(emg[event.times[5]:event.times[6]])
ER <- ts(emg[event.times[7]:event.times[8]])
# Plots of the first 10 seconds (2048 samples per second) of each condition.
# NOTE: Shoulder external rotation has been shifted forward 3 seconds
#  because nothing was happening in the first few seconds, likely the
#  event flag was triggered prior to the event.
par(mfrow=c(2,2))
plot(base.deltoid[0:20480], main = "Baseline deltoid activity",
ylim = c(-45,45), type='l')
plot(IR.pecs[0:20480], main = "Deltoid with pectoral activity",
ylim = c(-45,45), type='l')
plot(IR.pecs.resist[0:20480], main = "Deltoid with resisted pectoral activity",
ylim = c(-45,45), type='l')
plot(ER[6144:26624], main = "Shoulder external rotation",
ylim = c(-45,45), type='l')
par(mfrow=c(1,1))
# simply doing the absolute value of everything
par(mfrow=c(2,2))
plot(abs(base.deltoid[0:20480]), main = "Baseline deltoid activity",
ylim = c(-45,45), type='l')
plot(abs(IR.pecs[0:20480]), main = "Deltoid with pectoral activity",
ylim = c(-45,45), type='l')
plot(abs(IR.pecs.resist[0:20480]), main = "Deltoid with resisted pectoral activity",
ylim = c(-45,45), type='l')
plot(abs(ER[6144:26624]), main = "Shoulder external rotation",
ylim = c(-45,45), type='l')
# simply doing the absolute value of everything
#par(mfrow=c(2,2))
plot(abs(base.deltoid[0:20480]), main = "Baseline deltoid activity",
ylim = c(-45,45), type='l')
plot(abs(IR.pecs[0:20480]), main = "Deltoid with pectoral activity",
ylim = c(-45,45), type='l')
plot(abs(IR.pecs.resist[0:20480]), main = "Deltoid with resisted pectoral activity",
ylim = c(-45,45), type='l')
plot(abs(ER[6144:26624]), main = "Shoulder external rotation",
ylim = c(-45,45), type='l')
# simply doing the absolute value of everything
#par(mfrow=c(2,2))
plot(abs(base.deltoid[0:20480]), main = "Baseline deltoid activity",
type='l')
plot(abs(IR.pecs[0:20480]), main = "Deltoid with pectoral activity",
type='l')
plot(abs(IR.pecs.resist[0:20480]), main = "Deltoid with resisted pectoral activity",
type='l')
plot(abs(ER[6144:26624]), main = "Shoulder external rotation",
type='l')
install.packages("biosignalEMG")
library(biosignalEMG)
