gold = (1 + sqrt(5))/2
absg <- abs(f(theta1))
mre <- abs(theta1 - theta0)/max(1,abs(theta1))
store <- data.frame()
while(it < maxit && (absg > tolgrad || mre > tolerr)){
# secant method equation
theta2 <- theta1 - f(theta1)*(theta1 - theta0)/(f(theta1) - f(theta0))
# storing into dataframe
absg <- abs(f(theta1))
mre <- abs(theta1 - theta0)/max(1,abs(theta1))
rat <- abs(theta1-star)/(abs(theta1 - theta0))^(gold)
sigdig <- ceiling(-log10(abs(theta1 - star)/abs(star)))
# end of the loop
theta0 <- theta1
theta1 <- theta2
it = it + 1
row <- c(it,theta2,mre,absg,rat,sigdig)
store <- rbind(store,row)
}
# formatting dataframe
store <- data.frame(store) %>% set_names("Iteration","Theta","Relative Error","Gradient at Theta","Convergence Ratio","Sig. Digits") %>% mutate(
Iteration = sprintf("%02.f",Iteration),
Theta = sprintf("%12.12f",Theta),
`Relative Error` = sprintf("%.1e", `Relative Error`),
`Gradient at Theta` = sprintf("%.1e", `Gradient at Theta`),
`Convergence Ratio` = sprintf("%.3e",`Convergence Ratio`)
)
return(store)
}
# render derivative
f <- function(theta){
1997/(2 + theta) - 1811/(1-theta) + 32/theta
}
# build secant method
secM <- function(theta0,theta1,maxit,tolerr,tolgrad){
# input initials
it = 0
absg <- abs(f(theta1))
mre <- abs(theta1 - theta0)/max(1,abs(theta1))
store <- data.frame()
while(it < maxit && (absg > tolgrad || mre > tolerr)){
# secant method equation
theta2 <- theta1 - f(theta1)*(theta1 - theta0)/(f(theta1) - f(theta0))
# storing into dataframe
absg <- abs(f(theta2))
mre <- abs(theta1 - theta0)/max(1,abs(theta1))
# end of the loop
theta0 <- theta1
theta1 <- theta2
it = it + 1
row <- c(it,theta2,mre,absg)
store <- rbind(store,row)
}
# formatting dataframe
store <- data.frame(store) %>% set_names("Iteration","Theta","Relative Error","Gradient at Theta") %>% mutate(
Theta = sprintf("%12.12f",Theta),
`Relative Error` = sprintf("%.1e", `Relative Error`),
`Gradient at Theta` = sprintf("%.1e", `Gradient at Theta`)
)
return(store)
}
# start process
secM(theta0 = .02,.01,20,1e-6,1e-9)
secM2 <- function(theta0,theta1,maxit,tolerr,tolgrad,star){
# input initials
it = 0
gold = (1 + sqrt(5))/2
absg <- abs(f(theta1))
mre <- abs(theta1 - theta0)/max(1,abs(theta1))
store <- data.frame()
while(it < maxit && (absg > tolgrad || mre > tolerr)){
# secant method equation
theta2 <- theta1 - f(theta1)*(theta1 - theta0)/(f(theta1) - f(theta0))
# storing into dataframe
absg <- abs(f(theta2))
mre <- abs(theta1 - theta0)/max(1,abs(theta1))
rat <- abs(theta1-star)/(abs(theta1 - theta0))^(gold)
sigdig <- ceiling(-log10(abs(theta1 - star)/abs(star)))
# end of the loop
theta0 <- theta1
theta1 <- theta2
it = it + 1
row <- c(it,theta2,mre,absg,rat,sigdig)
store <- rbind(store,row)
}
# formatting dataframe
store <- data.frame(store) %>% set_names("Iteration","Theta","Relative Error","Gradient at Theta","Convergence Ratio","Sig. Digits") %>% mutate(
Iteration = sprintf("%02.f",Iteration),
Theta = sprintf("%12.12f",Theta),
`Relative Error` = sprintf("%.1e", `Relative Error`),
`Gradient at Theta` = sprintf("%.1e", `Gradient at Theta`),
`Convergence Ratio` = sprintf("%.3e",`Convergence Ratio`)
)
return(store)
}
thetstar <- (-1657 + sqrt(3728689))/7680
secM2(.02,.01,20,1e-6,1e-9,thetstar)
secM2 <- function(theta0,theta1,maxit,tolerr,tolgrad,star){
# input initials
it = 0
gold = (1 + sqrt(5))/2
absg <- abs(f(theta1))
mre <- abs(theta1 - theta0)/max(1,abs(theta1))
store <- data.frame()
while(it < maxit && (absg > tolgrad || mre > tolerr)){
# secant method equation
theta2 <- theta1 - f(theta1)*(theta1 - theta0)/(f(theta1) - f(theta0))
# storing into dataframe
absg <- abs(f(theta2))
mre <- abs(theta1 - theta0)/max(1,abs(theta1))
rat <- abs(theta1-star)/(abs(theta1 - theta0))^(gold)
sigdig <- ceiling(-log10(abs(theta1 - star)/abs(star)))
# end of the loop
theta0 <- theta1
theta1 <- theta2
it = it + 1
row <- c(it,theta2,rat,sigdig)
store <- rbind(store,row)
}
# formatting dataframe
store <- data.frame(store) %>% set_names("Iteration","Theta","Convergence Ratio","Sig. Digits") %>% mutate(
Iteration = sprintf("%02.f",Iteration),
Theta = sprintf("%12.12f",Theta),
`Convergence Ratio` = sprintf("%.3e",`Convergence Ratio`)
)
return(store)
}
thetstar <- (-1657 + sqrt(3728689))/7680
secM2(.02,.01,20,1e-6,1e-9,thetstar)
secM2 <- function(theta0,theta1,maxit,tolerr,tolgrad,star){
# input initials
it = 0
gold = (1 + sqrt(5))/2
absg <- abs(f(theta1))
mre <- abs(theta1 - theta0)/max(1,abs(theta1))
store <- data.frame()
while(it < maxit && (absg > tolgrad || mre > tolerr)){
# secant method equation
theta2 <- theta1 - f(theta1)*(theta1 - theta0)/(f(theta1) - f(theta0))
# storing into dataframe
absg <- abs(f(theta2))
mre <- abs(theta1 - theta0)/max(1,abs(theta1))
rat <- abs(theta1-star)/(abs(theta1 - theta0))^(gold)
sigdig <- -log10(abs(theta1 - star)/abs(star))
# end of the loop
theta0 <- theta1
theta1 <- theta2
it = it + 1
row <- c(it,theta2,rat,sigdig)
store <- rbind(store,row)
}
# formatting dataframe
store <- data.frame(store) %>% set_names("Iteration","Theta","Convergence Ratio","Sig. Digits") %>% mutate(
Iteration = sprintf("%02.f",Iteration),
Theta = sprintf("%12.12f",Theta),
`Convergence Ratio` = sprintf("%.3e",`Convergence Ratio`)
)
return(store)
}
thetstar <- (-1657 + sqrt(3728689))/7680
secM2(.02,.01,20,1e-6,1e-9,thetstar)
secM2 <- function(theta0,theta1,maxit,tolerr,tolgrad,star){
# input initials
it = 0
gold = (1 + sqrt(5))/2
absg <- abs(f(theta1))
mre <- abs(theta1 - theta0)/max(1,abs(theta1))
store <- data.frame()
while(it < maxit && (absg > tolgrad || mre > tolerr)){
# secant method equation
theta2 <- theta1 - f(theta1)*(theta1 - theta0)/(f(theta1) - f(theta0))
# storing into dataframe
absg <- abs(f(theta2))
mre <- abs(theta1 - theta0)/max(1,abs(theta1))
ratsl <- abs(theta1-star)/(abs(theta1 - theta0))
ratquad <- abs(theta1-star)/(abs(theta1 - theta0))^2
sigdig <- -log10(abs(theta1 - star)/abs(star))
# end of the loop
theta0 <- theta1
theta1 <- theta2
it = it + 1
row <- c(it,theta2,ratsl,ratquad,sigdig)
store <- rbind(store,row)
}
# formatting dataframe
store <- data.frame(store) %>% set_names("Iteration","Theta","Convergence Ratio","Convergence Ratio","Sig. Digits") %>% mutate(
Iteration = sprintf("%02.f",Iteration),
Theta = sprintf("%12.12f",Theta),
`Convergence Ratio` = sprintf("%.3e",`Convergence Ratio`)
)
return(store)
}
thetstar <- (-1657 + sqrt(3728689))/7680
secM2(.02,.01,20,1e-6,1e-9,thetstar)
secM2 <- function(theta0,theta1,maxit,tolerr,tolgrad,star){
# input initials
it = 0
gold = (1 + sqrt(5))/2
absg <- abs(f(theta1))
mre <- abs(theta1 - theta0)/max(1,abs(theta1))
store <- data.frame()
while(it < maxit && (absg > tolgrad || mre > tolerr)){
# secant method equation
theta2 <- theta1 - f(theta1)*(theta1 - theta0)/(f(theta1) - f(theta0))
# storing into dataframe
absg <- abs(f(theta2))
mre <- abs(theta1 - theta0)/max(1,abs(theta1))
ratsl <- abs(theta1-star)/(abs(theta1 - theta0))
ratquad <- abs(theta1-star)/(abs(theta1 - theta0))^2
sigdig <- -log10(abs(theta1 - star)/abs(star))
# end of the loop
theta0 <- theta1
theta1 <- theta2
it = it + 1
row <- c(it,theta2,ratsl,ratquad,sigdig)
store <- rbind(store,row)
}
# formatting dataframe
store <- data.frame(store) %>% set_names("Iteration","Theta","Convergence Ratio","Convergence Ratio Quad","Sig. Digits") %>% mutate(
Iteration = sprintf("%02.f",Iteration),
Theta = sprintf("%12.12f",Theta),
`Convergence Ratio` = sprintf("%.3e",`Convergence Ratio`)
)
return(store)
}
thetstar <- (-1657 + sqrt(3728689))/7680
secM2(.02,.01,20,1e-6,1e-9,thetstar)
secM2 <- function(theta0,theta1,maxit,tolerr,tolgrad,star){
# input initials
it = 0
gold = (1 + sqrt(5))/2
absg <- abs(f(theta1))
mre <- abs(theta1 - theta0)/max(1,abs(theta1))
store <- data.frame()
while(it < maxit && (absg > tolgrad || mre > tolerr)){
# secant method equation
theta2 <- theta1 - f(theta1)*(theta1 - theta0)/(f(theta1) - f(theta0))
# storing into dataframe
absg <- abs(f(theta2))
mre <- abs(theta1 - theta0)/max(1,abs(theta1))
ratsl <- abs(theta1-star)/(abs(theta1 - theta0))
ratquad <- abs(theta1-star)/(abs(theta1 - theta0))^2
sigdig <- -log10(abs(theta1 - star)/abs(star))
# end of the loop
theta0 <- theta1
theta1 <- theta2
it = it + 1
row <- c(it,theta2,ratsl,ratquad,sigdig)
store <- rbind(store,row)
}
# formatting dataframe
store <- data.frame(store) %>% set_names("Iteration","Theta","Convergence Ratio","Convergence Ratio Quad","Sig. Digits") %>% mutate(
Iteration = sprintf("%02.f",Iteration),
Theta = sprintf("%12.12f",Theta),
`Convergence Ratio` = sprintf("%.3e",`Convergence Ratio`)
)
return(store)
}
thetstar <- (-1657 + sqrt(3728689))/7680
secM2(.02,.01,20,1e-6,1e-9,thetstar)
secM2 <- function(theta0,theta1,maxit,tolerr,tolgrad,star){
# input initials
it = 0
gold = (1 + sqrt(5))/2
absg <- abs(f(theta1))
mre <- abs(theta1 - theta0)/max(1,abs(theta1))
store <- data.frame()
while(it < maxit && (absg > tolgrad || mre > tolerr)){
# secant method equation
theta2 <- theta1 - f(theta1)*(theta1 - theta0)/(f(theta1) - f(theta0))
# storing into dataframe
absg <- abs(f(theta2))
mre <- abs(theta1 - theta0)/max(1,abs(theta1))
ratsl <- abs(theta1-star)/(abs(theta1 - theta0))
ratquad <- abs(theta1-star)/(abs(theta1 - theta0))^2
sigdig <- -log10(abs(theta1 - star)/abs(star))
# end of the loop
theta0 <- theta1
theta1 <- theta2
it = it + 1
row <- c(it,theta2,ratsl,ratquad,sigdig)
store <- rbind(store,row)
}
# formatting dataframe
store <- data.frame(store) %>% set_names("Iteration","Theta","Convergence Ratio","Convergence Ratio Quad","Sig. Digits") %>% mutate(
Iteration = sprintf("%02.f",Iteration),
Theta = sprintf("%12.12f",Theta)
)
return(store)
}
thetstar <- (-1657 + sqrt(3728689))/7680
secM2(.02,.01,20,1e-6,1e-9,thetstar)
secM2 <- function(theta0,theta1,maxit,tolerr,tolgrad,star){
# input initials
it = 0
gold = (1 + sqrt(5))/2
absg <- abs(f(theta1))
mre <- abs(theta1 - theta0)/max(1,abs(theta1))
store <- data.frame()
while(it < maxit && (absg > tolgrad || mre > tolerr)){
# secant method equation
theta2 <- theta1 - f(theta1)*(theta1 - theta0)/(f(theta1) - f(theta0))
# storing into dataframe
absg <- abs(f(theta2))
mre <- abs(theta1 - theta0)/max(1,abs(theta1))
ratsl <- abs(theta1-star)/(abs(theta1 - theta0))
ratquad <- abs(theta1-star)/(abs(theta1 - theta0))^2
sigdig <- -log10(abs(theta1 - star)/abs(star))
# end of the loop
theta0 <- theta1
theta1 <- theta2
it = it + 1
row <- c(it,theta2,ratsl,ratquad,sigdig)
store <- rbind(store,row)
}
# formatting dataframe
store <- data.frame(store) %>% set_names("Iteration","Theta","Convergence Ratio Lin","Convergence Ratio Quad","Sig. Digits") %>% mutate(
Iteration = sprintf("%02.f",Iteration),
Theta = sprintf("%12.12f",Theta)
)
return(store)
}
thetstar <- (-1657 + sqrt(3728689))/7680
secM2(.02,.01,20,1e-6,1e-9,thetstar)
secM2(.02,.01,20,1e-6,1e-9,thetstar)[,3:4]
secM2(.02,.01,20,1e-16,1e-19,thetstar)[,3:4]
secM2(.02,.01,20,1e-6,1e-9,thetstar)[,3:4]
secM2(.02,.01,20,1e-8,1e-11,thetstar)[,3:4]
secM2(.02,.01,20,1e-9,1e-12,thetstar)[,3:4]
secM2(.02,.01,20,1e-10,1e-13,thetstar)[,3:4]
secM2(.02,.01,20,1e-10,1e-12,thetstar)[,3:4]
df <- secM2(.02,.01,20,1e-10,1e-12,thetstar)[,3:4]
dfc <- secM2(.02,.01,20,1e-10,1e-12,thetstar)[,3:4]
df.c <- secM2(.02,.01,20,1e-10,1e-12,thetstar)[,3:4]
df.c <- secM2(.02,.01,20,1e-10,1e-12,thetstar)
plot(df.c[,2],df.c[,3])
df.c <- secM2(.02,.01,20,1e-10,1e-12,thetstar)[,3:4]
plot(1:length(df.c[,1]),df.c[,1])
plot(1:length(df.c[,1]),df.c[,2])
thetstar <- (-1657 + sqrt(3728689))/7680
df.c <- secM2(.02,.01,20,1e-10,1e-12,thetstar)[,3:4]
plot(1:length(df.c[,1]),df.c[,1])
plot(1:length(df.c[,1]),df.c[,2])
thetstar <- (-1657 + sqrt(3728689))/7680
df.c <- secM2(.02,.01,20,1e-10,1e-12,thetstar)[,3:4]
plot(1:length(df.c[,1]),df.c[,1],-)
?plot()
thetstar <- (-1657 + sqrt(3728689))/7680
df.c <- secM2(.02,.01,20,1e-10,1e-12,thetstar)[,3:4]
plot(1:length(df.c[,1]),df.c[,1],"-k")
?plot()
thetstar <- (-1657 + sqrt(3728689))/7680
df.c <- secM2(.02,.01,20,1e-10,1e-12,thetstar)[,3:4]
plot(1:length(df.c[,1]),df.c[,1],type = b)
thetstar <- (-1657 + sqrt(3728689))/7680
df.c <- secM2(.02,.01,20,1e-10,1e-12,thetstar)[,3:4]
plot(1:length(df.c[,1]),df.c[,1],type = 'b')
plot(1:length(df.c[,1]),df.c[,2],type = 'b')
secM2 <- function(theta0,theta1,maxit,tolerr,tolgrad,star){
# input initials
it = 0
gold = (1 + sqrt(5))/2
absg <- abs(f(theta1))
mre <- abs(theta1 - theta0)/max(1,abs(theta1))
store <- data.frame()
while(it < maxit && (absg > tolgrad || mre > tolerr)){
# secant method equation
theta2 <- theta1 - f(theta1)*(theta1 - theta0)/(f(theta1) - f(theta0))
# storing into dataframe
absg <- abs(f(theta2))
mre <- abs(theta1 - theta0)/max(1,abs(theta1))
rat <- abs(theta1-star)/(abs(theta1 - theta0))^(gold)
sigdig <- -log10(abs(theta1 - star)/abs(star))
# end of the loop
theta0 <- theta1
theta1 <- theta2
it = it + 1
row <- c(it,theta2,rat,sigdig)
store <- rbind(store,row)
}
# formatting dataframe
store <- data.frame(store) %>% set_names("Iteration","Theta","Convergence Ratio","Sig. Digits") %>% mutate(
Iteration = sprintf("%02.f",Iteration),
Theta = sprintf("%12.12f",Theta),
`Convergence Ratio` = sprintf("%.3e",`Convergence Ratio`)
)
return(store)
}
secM2(-.01,.01,20,1e-6,1e-9,thetstar)
secM2(-.01,.01,10,1e-6,1e-9,thetstar)
secM2.c(-.01,.01,10,1e-6,1e-9,thetstar)
secM2.c(-.01,.01,10,1e-6,1e-9,thetstar)
secM2.c <- function(theta0,theta1,maxit,tolerr,tolgrad,star){
# input initials
it = 0
gold = (1 + sqrt(5))/2
absg <- abs(f(theta1))
mre <- abs(theta1 - theta0)/max(1,abs(theta1))
store <- data.frame()
while(it < maxit && (absg > tolgrad || mre > tolerr)){
# secant method equation
theta2 <- theta1 - f(theta1)*(theta1 - theta0)/(f(theta1) - f(theta0))
# storing into dataframe
absg <- abs(f(theta2))
mre <- abs(theta1 - theta0)/max(1,abs(theta1))
ratsl <- abs(theta1-star)/(abs(theta1 - theta0))
ratquad <- abs(theta1-star)/(abs(theta1 - theta0))^2
sigdig <- -log10(abs(theta1 - star)/abs(star))
# end of the loop
theta0 <- theta1
theta1 <- theta2
it = it + 1
row <- c(it,theta2,ratsl,ratquad,sigdig)
store <- rbind(store,row)
}
# formatting dataframe
store <- data.frame(store) %>% set_names("Iteration","Theta","Convergence Ratio Lin","Convergence Ratio Quad","Sig. Digits") %>% mutate(
Iteration = sprintf("%02.f",Iteration),
Theta = sprintf("%12.12f",Theta)
)
return(store)
}
secM2.c(-.01,.01,10,1e-6,1e-9,thetstar)
secM2.c(-1,1,10,1e-6,1e-9,thetstar)
secM2.c(-.1,.1,10,1e-6,1e-9,thetstar)
secM2.c(-.2,.2,10,1e-6,1e-9,thetstar)
plot(1:length(df.d[,1]),df.d[,1],type = 'b')
df.d[,3:4] <- secM2.c(-.2,.2,10,1e-6,1e-9,thetstar)
df.d <- secM2.c(-.2,.2,10,1e-6,1e-9,thetstar)[,3:4]
plot(1:length(df.d[,1]),df.d[,1],type = 'b')
plot(1:length(df.d[,1]),df.d[,2],type = 'b')
thetstar <- (-1657 + sqrt(3728689))/7680
df.c <- secM2.c(.02,.01,20,1e-10,1e-12,thetstar)[,3:4]
df.c
plot(1:length(df.c[,1]),df.c[,1],type = 'b')
plot(1:length(df.c[,1]),df.c[,2],type = 'b')
df.d <- secM2.c(-.2,.2,10,1e-6,1e-9,thetstar)[,3:4]
df.d
plot(1:length(df.d[,1]),df.d[,1],type = 'b')
plot(1:length(df.d[,1]),df.d[,2],type = 'b')
setwd("~/Desktop/githubbahubba/CSUF/spring 2024/MATH 534/HW3")
setwd("~/Desktop/githubbahubba/CSUF/spring 2024/MATH 536/HW1")
knitr::opts_chunk$set(echo = TRUE)
t.test(male_data, female_data, alternative = "two.sided")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
thedata <- file.path("~/Documents/Math 536", "HW1P1.csv")
data <- read.csv(thedata, header = TRUE)
library(tidyverse)
thedata <- file.path("~/Documents/Math 536", "HW1P1.csv")
data <- read.csv(thedata, header = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tinytex)
library(dplyr)
library(ggplot2)
library(GGally)
library(tidyverse)
# load data
data <- read.csv("HW1P1.csv")
# make a new column that is the difference between the two
male_vec <- data$Males
fem_vec <- na.omit(data$Females)
# check normality of the difference
qqnorm(male_vec)
qqnorm(fem_vec)
# let H_alt be mu > 0 with 99% confidence
# run student t.test
t.test(male_vec,fem_vec, alternative = "greater", paired = F, conf.level = .99)
# find population mean
BS.male_vec <- male_vec - mean(male_vec)
BS.fem_vec <- fem_vec - mean(fem_vec)
BS.pop.mean <- mean(male_vec) - mean(fem_vec)
# bootstrapping
xbars.diff <- rep(0,10000)
for (i in 1:10000){
sampleM <- sample(BS.male_vec,300, replace = T)
sampleF <- sample(BS.fem_vec,300, replace = T)
xbars.diff[i] <- mean(sampleM - sampleF)
}
# render histogram
hist(xbars.diff, breaks = 80)
# finding a p-value
pval <- length(xbars.diff[xbars.diff > BS.pop.mean])/10000
pval
#generate observations
obs <- rnorm(100000)
x_tiles <- rep(0,10000)
true_90th <- quantile(obs, .9)
for (i in 1:10000){
samp <- sample(obs,20,replace = T)
x_tiles[i] <- quantile(samp, .9)
}
hist(x_tiles, breaks = 160)
abline(v = true_90th,col = "red", lwd = 2)
# bootstrap now but with a larger sample size in each iteration
for (i in 1:10000){
samp <- sample(obs,200,replace = T)
x_tiles[i] <- quantile(samp, .9)
}
hist(x_tiles, breaks = 160)
abline(v = true_90th,col = "red", lwd = 2)
single.samp <- sample(obs,20,replace = T)
single.samp.90 <- quantile(single.samp,.9)
for (i in 1:10000){
samp <- sample(single.samp,20,replace = T)
x_tiles[i] <- quantile(samp, .9)
}
hist(x_tiles, breaks = 20)
abline(v = true_90th,col = "red", lwd = 2)
abline(v = single.samp.90,col = "forestgreen", lwd = 2)
# quantifying bias
bias <- mean(x_tiles) - single.samp.90
