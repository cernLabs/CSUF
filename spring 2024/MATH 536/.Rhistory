df <- csv.read('amb_waittime.csv')
df <- read.csv('amb_waittime.csv')
df
# testing to see if you think the true wait time is more than ten minutes
# nullhyp: wait is 10 minutes
S = 0
for (i in 1:300){}
for (i in 1:300){
if (df$Waittime[i] > 10.0){
S <- S + 1
}
else {
S <- S + 0
}
}
S
S/300
# I would like to sell my client a p-value
# Nichols way: Theoretical first
lenght(df$Waittime)
length(df$Waittime)
mean(df$Waittime)
sd(df$Waittime)
#h0: mu = 10, ha: mu > 10
z = (10-10.3284)/10.53669
pnorm(z)
z = (10.3284-10)/10.53669
pnorm(z)
z = (10.3284-10)*(sqrt(300))/10.53669
pnorm(z)
z = (10.3284-10)/(10.53669/sqrt(300))
pnorm(z)
pnorm(z,0,1,lower.tail = F)
pnorm(z, lower.tail = F)
# now do this same problem in simulation
## take random sample from our population (if the mean is equal to 10). for each value in the population subtract true mean then add 10
###take a sample of size 300 from our adjusted population with replacement, record sample mean
#### repeat step 2, 10000 times, record all 10000 sample means
##### histograms are our friends (should look roughly normal)
###### empirically compute what percentage of our simulated means under the h0 are greater than the original xbar of 10.32
# but... I don't have the population. step1 is doomed
# solution: create a pseudo-population (one that will have similar shape and variance characteristics to the original population but will have a different mean... that's okay, we adjust the mean anyway, no biggie).
# use the original sample with infinite replication of its observations as your new pseudo population  (bootstrapping). Our bootstrap population with have similar variance and shape to the true population but will be centered at the original xbar instead of the true mu
## take random sample from our ****pseudo/bootstrap population (if the mean is equal to 10). for each value in the population subtract true mean then add 10
BS.pop = df$Waittime
BS.pop = df$Waittime - mean(df$Waittime) + 10
sample.samp = sample(BS.pop,300,replace=T)
hist(BS.pop,breaks =20)
hist(df$Waittime, breaks =20)
single.xbar =  mean(single.samp)
single.xbar =  mean(sample.samp)
BS.xbars = rep(0,10000)
for (i in 1:10000){
sample.samp = sample(BS.pop,300, replace =T)
BS.xbars[i] = mean(sample.samp)
}
hist(BS.xbars,breaks=20)
lines(c(10,10),c(0,10000),lwd=2,col=2)
lines(c(10.34,10.34),c(0,10000),lwd=2,col=2)
pval = length(BS.xbars[BS.xbars>mean(df$Waittime)])/10000
pval
# omg it's soo close to the theoretical method
save()
save('0125class.r')
save('0125class.r')
quit()
