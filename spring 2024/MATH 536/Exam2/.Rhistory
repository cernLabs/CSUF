curve(sin(x), 0, pi/2, type = "l", add = TRUE, col="red")
# render f
f <- function(X){
8*X/(pi^2)
}
# get alpha
# Define the range of x-axis
x <- seq(from = 0, to = 2*pi, length.out = 100)
# Define the functions
y1 <- sin(x)/f(x)
# Create the plot
plot(x, y1, type = "l", col = "blue", lwd = 2,
xlim = c(0, 2*pi),
xlab = "x", ylab = "y",main = "g(x)/f(x)")
alpha = 1
ey = sin(Y)/alpha
fy = f(Y)
Ry = fy/ey
U <- runif(10000)
ind <- as.numeric(U<Ry)
Y <- Y*ind
Ynew <- Y[Y != 0]
Y <- acos(1 - runif(10000))
# render f
f <- function(X){
8*X/(pi^2)
}
# get alpha
# Define the range of x-axis
x <- seq(from = 0, to = 2*pi, length.out = 100)
# Define the functions
y1 <- sin(x)/f(x)
# Create the plot
plot(x, y1, type = "l", col = "blue", lwd = 2,
xlim = c(0, 2*pi),
xlab = "x", ylab = "y",main = "g(x)/f(x)")
alpha = pi^2/8
ey = sin(Y)/alpha
fy = f(Y)
Ry = fy/ey
U <- runif(10000,0,alpha)
ind <- as.numeric(U<Ry)
Y <- Y*ind
Ynew <- Y[Y != 0]
Y <- acos(1 - runif(10000))
alpha = pi^2/8
ey = sin(Y)/alpha
fy = f(Y)
Ry = fy/ey
U <- runif(10000,0,alpha)
# ind <- as.numeric(U<Ry)
# Y <- Y*ind
Ynew <- Y[U < R]
alpha = pi^2/8
ey = sin(Y)/alpha
fy = f(Y)
Ry = fy/ey
U <- runif(10000,0,alpha)
# ind <- as.numeric(U<Ry)
# Y <- Y*ind
Ynew <- Y[U < Ry]
alpha = pi^2/8
ey = sin(Y)/alpha
fy = f(Y)
Ry = fy/ey
U <- runif(10000,0,alpha)
Ynew <- Y[U < Ry]
alpha = pi^2/8
ey = sin(Y)/alpha
fy = f(Y)
Ry = fy/ey
U <- runif(10000,0,alpha)
X <- Y[U < Ry]
# render graphics
hist(X, freq = FALSE, breaks = 50)
curve(8*x/pi^2, 0, pi/2, type = "l", add = TRUE, col="red")
alpha = pi^2/8
ey = sin(Y)/alpha
fy = f(Y)
Ry = fy/ey
U <- runif(10000,0,1)
X <- Y[U < Ry]
# render graphics
hist(X, freq = FALSE, breaks = 50)
curve(8*x/pi^2, 0, pi/2, type = "l", add = TRUE, col="red")
alpha = pi^2/8
ey = sin(Y)/alpha
fy = f(Y)
Ry = fy/ey
U <- runif(10000,0,alpha)
X <- Y[U < Ry]
# render graphics
hist(X, freq = FALSE, breaks = 50)
curve(8*x/pi^2, 0, pi/2, type = "l", add = TRUE, col="red")
alpha = g(pi/2)/f(pi/2)
alpha = sin(pi/2)/f(pi/2)
ey = sin(Y)/alpha
fy = f(Y)
Ry = fy/ey
U <- runif(10000,0,alpha)
X <- Y[U < Ry]
# render f
f <- function(X){
8*X/(pi^2)
}
# get alpha
# Define the range of x-axis
x <- seq(from = 0, to = 2*pi, length.out = 100)
# Define the functions
y1 <- sin(x)/f(x)
# Create the plot
plot(x, y1, type = "l", col = "blue", lwd = 2,
xlim = c(0, pi/2),
xlab = "x", ylab = "y",main = "g(x)/f(x)")
# render graphics
hist(X, freq = FALSE, breaks = 50)
curve(8*x/pi^2, 0, pi/2, type = "l", add = TRUE, col="red")
# render graphics
hist(X, freq = FALSE, breaks = 50)
curve(8*x/pi^2, 0, pi/2, type = "l", add = TRUE, col="red")
# show the amount accepted
sprintf("&d of the 10,000 values that were generated were accepted",length(X))
# render graphics
hist(X, freq = FALSE, breaks = 50)
curve(8*x/pi^2, 0, pi/2, type = "l", add = TRUE, col="red")
# show the amount accepted
sprintf("%d of the 10,000 values that were generated were accepted",length(X))
# render graphics
hist(X, freq = FALSE, breaks = 50)
curve(8*x/pi^2, 0, pi/2, type = "l", add = TRUE, col="red")
# show the amount accepted
sprintf("%d of the 10000 values that were generated were accepted",length(X))
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(GGally)
library(car)
#import data
data0 <- read.csv("colon2017.csv")
data <- data0[,-c(1,2,3,4,6,7,16,17,20)]
# feature eng
data$Gender <- ifelse(data$Gender == "Male",1,0)
data$Race <- ifelse(data$Race == "white" | data$Race == "White" | data$Race == "W",1,0)
data$Operative.Length <- (data$Operative.Length)*24*60
ggcorr(data,label = TRUE)
# backward selection
logit.model= glm(Anastamotic.Leak ~ Gender+BMI+Age+Race+Tobacco+DM+CAD.PAD+Cancer+Albumin..g.dL.+Operative.Length,
data = data,
family = "binomial")
var_selection <- step(logit.model)
# render our final model
final.model = glm(Anastamotic.Leak ~ Gender+
BMI+
Age+
Tobacco+
DM+
Cancer+
Albumin..g.dL.+
Operative.Length,
family="binomial",data=data)
summary(final.model)
c(exp(0.086276 - 0.030349*1.96),exp(0.086276 + 0.030349*1.96))
# case studys
Case1 <-  data.frame(Gender = 0,Age = 35, BMI =20:50, Tobacco = 0, DM = 0, Cancer = 0, Albumin..g.dL. = 4.2, Operative.Length = 90)
Case2 <-  data.frame(Gender = 1,Age = 62, BMI =20:50, Tobacco = 1, DM = 1, Cancer = 0, Albumin..g.dL. = 2.8, Operative.Length = 210)
#Step six starts here.
BS.pstar1 = matrix(0,31,1000)
BS.pstar2 = matrix(0,31,1000)
#Step 1, create orig model
final.model = glm(Anastamotic.Leak ~ Gender+
BMI+
Age+
Tobacco+
DM+
Cancer+
Albumin..g.dL.+
Operative.Length,
family="binomial",data=data)
for(j in 1:1000){
#Step 2, resample the x's with replacement
n = length(data[,1])
ind = sample(1:n,n,replace=T)
BS.x = data.frame(Gender = data$Gender[ind],
BMI = data$BMI[ind],
Age = data$Age[ind],
Tobacco = data$Tobacco[ind],
DM = data$DM[ind],
Cancer = data$Cancer[ind],
Albumin..g.dL. = data$Albumin..g.dL.[ind],
Operative.Length = data$Operative.Length[ind])
#Step 3, Plug BS.x into orig model to get BS.phat
BS.phat = predict(final.model,newdata=BS.x,type="response")
#Step 4, Sample from (1,0) to get BS.y
BS.y = rep(0,n)
for(i in 1:n){
BS.y[i] = sample(c(1,0),1,prob=c(BS.phat[i],1-BS.phat[i]))
}
BS.data = data.frame(cbind(anastamotic.leak = BS.y,BS.x))
#Step 5, New model using BS.x and BS.y.  Compute BS.par
newmodel = glm(anastamotic.leak~Gender+BMI+Age+Tobacco+DM+Cancer+Albumin..g.dL.+Operative.Length,
data=BS.data,
family='binomial')
BS.pstar1[,j] = predict(newmodel,newdata=Case1,type="response")
BS.pstar2[,j] = predict(newmodel,newdata=Case2,type="response")
#Step 6, repeat.
}
BS.Pstar1.freq <- data.frame(NULL)
for(i in 1:31){
dfq <- cbind(BS.pstar1[,i],rep(i+19,31))
BS.Pstar1.freq <- rbind(BS.Pstar1.freq,dfq)
}
plot(BS.Pstar1.freq[,2],BS.Pstar1.freq[,1])
BS.Pstar2.freq <- data.frame(NULL)
for(i in 1:31){
dfq <- cbind(BS.pstar2[,i],rep(i+19,31))
BS.Pstar2.freq <- rbind(BS.Pstar2.freq,dfq)
}
plot(BS.Pstar2.freq[,2],BS.Pstar2.freq[,1])
# take the quantile from every iteration from  and taht will be your bound vector
# let's see how well the models predicts
residualPlot(final.model)
?quantile()
# take the quantile from every iteration from  and that will be your bound vector
for(i in 1:31){
# quantiles for Arizona
lower.quant1 <- quantile(BS.pstar1[i,],0.025)
upper.quant1 <- quantile(BS.pstar1[i,],0.975)
# quantiles for Richard
lower.quant2 <- quantile(BS.pstar2[i,],0.025)
upper.quant2 <- quantile(BS.pstar2[i,],0.975)
}
# take the quantile from every iteration from  and that will be your bound vector
lower.quant1 <- 1:31
upper.quant1 <- 1:31
lower.quant2 <- 1:31
upper.quant2 <- 1:31
for(i in 1:31){
# quantiles for Arizona
lower.quant1[i] <- quantile(BS.pstar1[i,],0.025)
upper.quant1[i] <- quantile(BS.pstar1[i,],0.975)
# quantiles for Richard
lower.quant2[i] <- quantile(BS.pstar2[i,],0.025)
upper.quant2[i] <- quantile(BS.pstar2[i,],0.975)
}
# map out these quantiles
plot(lower.quant1,1:31)
# map out these quantiles
plot(1:31,lower.quant1)
# map out these quantiles
plot(1:31,lower.quant1)
curve(1:31,upper.quant1)
# map out these quantiles
plot(1:31,lower.quant1)
line(1:31,upper.quant1)
# map out these quantiles
plot(1:31,lower.quant1)
plot(1:31,upper.quant1,add=T)
# map out these quantiles
plot(1:31,lower.quant1,style='l')
# map out these quantiles
plot(1:31,lower.quant1,type ='l')
# map out these quantiles
plot(1:31,lower.quant1,type ='l')
lines(1:31,upper.quant1)
# map out these quantiles
plot(1:31,lower.quant1,type ='l')
lines(1:31,upper.quant1)
# map out these quantiles
plot(1:31,lower.quant1,type ='l')
lines(1:31,upper.quant1)
# map out these quantiles
plot(1:31,lower.quant1,type ='l')
lines(1:31,upper.quant1)
# map out these quantiles
plot(1:31,lower.quant2,type ='l')
lines(1:31,upper.quant2)
# map out these quantiles
plot(1:31,lower.quant1,type ='l',lwd =3)
lines(1:31,upper.quant1)
# map out these quantiles
plot(1:31,lower.quant2,type ='l',lwd = 3)
lines(1:31,upper.quant2)
# map out these quantiles
plot(1:31,lower.quant1,type ='l',lwd =3)
lines(1:31,upper.quant1,type = 'l',lwd = 2)
# map out these quantiles
plot(1:31,lower.quant2,type ='l',lwd = 3)
lines(1:31,upper.quant2,type = 'l',lwd = 2)
# map out these quantiles
plot(1:31,lower.quant1,type ='l',lwd =3, color = "red")
lines(1:31,upper.quant1,type = 'l',lwd = 2)
# map out these quantiles
plot(1:31,lower.quant2,type ='l',lwd = 3, color = "red")
lines(1:31,upper.quant2,type = 'l',lwd = 2)
# map out these quantiles
plot(1:31,lower.quant1,type ='l',lwd =3, col = "red")
lines(1:31,upper.quant1,type = 'l',lwd = 2)
# map out these quantiles
plot(1:31,lower.quant2,type ='l',lwd = 3, col = "red")
lines(1:31,upper.quant2,type = 'l',lwd = 2)
# map out these quantiles
plot(1:31,lower.quant1,type ='l',lwd =3, col = "red")
lines(1:31,upper.quant1,type = 'l',lwd = 2, col = "blue")
# map out these quantiles
plot(1:31,lower.quant2,type ='l',lwd = 3, col = "red")
lines(1:31,upper.quant2,type = 'l',lwd = 2, col = "blue")
# map out these quantiles
plot(1:31,lower.quant1,ylim = c(0,1), type ='l',lwd =3, col = "red")
lines(1:31,upper.quant1,type = 'l',lwd = 2, col = "blue")
# map out these quantiles
plot(1:31,upper.quant2,ylim = c(0,1), type = 'l',lwd = 2, col = "blue")
line(1:31,lower.quant2,type ='l',lwd = 3, col = "red")
?type=
\
# map out these quantiles
plot(1:31,lower.quant1,ylim = c(min(lower.quant1),max(upper.quant1)), type ='-', col = "red")
?plot
# map out these quantiles
plot(1:31,lower.quant1,ylim = c(min(lower.quant1),max(upper.quant1)), type ='-', col = "red")
# map out these quantiles
plot(1:31,lower.quant1,ylim = c(min(lower.quant1),max(upper.quant1)), type ='p', col = "red")
lines(1:31,upper.quant1,type = 'p', col = 'red')
# map out these quantiles
plot(1:31,lower.quant2,ylim = c(min(lower.quant2),max(upper.quant2)),type ='p', col = "red")
lines(1:31,upper.quant2,type = 'p', col = "red")
# map out these quantiles
plot(1:31,lower.quant1,ylim = c(min(lower.quant1),max(upper.quant1)), type ='c', col = "red")
lines(1:31,upper.quant1,type = 'c', col = 'red')
# map out these quantiles
plot(1:31,lower.quant2,ylim = c(min(lower.quant2),max(upper.quant2)),type ='c', col = "red")
lines(1:31,upper.quant2,type = 'c', col = "red")
# map out these quantiles
plot(1:31,lower.quant1,ylim = c(min(lower.quant1),max(upper.quant1)), type ='l', col = "red")
lines(1:31,upper.quant1,type = 'l', col = 'red')
# map out these quantiles
plot(1:31,lower.quant2,ylim = c(min(lower.quant2),max(upper.quant2)),type ='l', col = "red")
lines(1:31,upper.quant2,type = 'l', col = "red")
# map out these quantiles
plot(20:50,lower.quant1,ylim = c(min(lower.quant1),max(upper.quant1)), type ='l', col = "red")
lines(20:50,upper.quant1,type = 'l', col = 'red')
# map out these quantiles
plot(20:50,lower.quant2,ylim = c(min(lower.quant2),max(upper.quant2)),type ='l', col = "red")
lines(20:50,upper.quant2,type = 'l', col = "red")
# map out these quantiles
segments(20:50,lower.quant1,ylim = c(min(lower.quant1),max(upper.quant1)), col = "red")
# map out these quantiles
plot(20:50,lower.quant1,ylim = c(min(lower.quant1),max(upper.quant1)), type ='l', col = "red")
lines(20:50,upper.quant1,type = 'l', col = 'red')
# map out these quantiles
plot(20:50,lower.quant2,ylim = c(min(lower.quant2),max(upper.quant2)),type ='l', col = "red")
lines(20:50,upper.quant2,type = 'l', col = "red")
# map out these quantiles
plot(20:50,lower.quant1,ylim = c(0,1),max(upper.quant1)), type ='l', col = "red")
# map out these quantiles
plot(20:50,lower.quant1,ylim = c(0,1), type ='l', col = "red")
lines(20:50,upper.quant1,type = 'l', col = 'red')
# map out these quantiles
plot(20:50,lower.quant2,ylim = c(0,1),type ='l', col = "red")
lines(20:50,upper.quant2,type = 'l', col = "red")
# map out these quantiles
plot(20:50,lower.quant1,ylim = c(0,1), type ='l', col = "red",
xlab = "BMI",
ylab = "Risk of Anastomotic Leak (Arizona)")
lines(20:50,upper.quant1,type = 'l', col = 'red')
# map out these quantiles
plot(20:50,lower.quant2,ylim = c(0,1),type ='l', col = "red",
xlab = "BMI",
ylab = "Risk of Anastomotic Leak (Richard)")
lines(20:50,upper.quant2,type = 'l', col = "red")
library(rpart)
library(adabag)
library(randomForest)
library(ROCR)
library(gbm)
x1 = rnorm(100,15,2)
x2 = rnorm(100,25,5)
x3 = sample(c(0,1),100,replace=T)
#The following code is just designed to provide us with some data for plotting to contextualize the conversation.  It is not necessary for fitting CART models.
#After creating three predictors x1,x2 and x3 and a response y (categorical) we save the data.frame as example.
x1 = rnorm(100,15,2)
x2 = rnorm(100,25,5)
x3 = sample(c(0,1),100,replace=T)
y = x1/90+x2/150+x3*.166666
y1 = round(y)
y1[sample(1:100,20,replace=F)]=1
y=y1
y = as.character(y)
y[y=="0"]="fail"
y[y=="1"]="success"
example = data.frame(y=as.factor(y),x1,x2,x3)
model.rf = randomForest(y~x1+x2+x3,data=example,ntree=100,mtry=2,control=rpart.control(minsplit=10,cp=.05))
predict(model.rf,newdata=example)
predict(model.rf,newdata=example,type='prob')
model.rf$votes
model.rf$err.rate
plot(model.rf)
prediction.rf = model.rf$predicted
table(prediction.rf,example$y)
model.ab = boosting(y~x1+x2+x3,data=example,mfinal=100,control=rpart.control(minsplit=10,cp=.02))
model.ab$votes
prediction.ab = model.ab$class
table(prediction.ab,example$y)
model.rf = randomForest(Ozone~Temp+Wind+Solar.R,data=data,ntree=100,mtry=2,control=rpart.control(minsplit=10,cp=.02))
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(GGally)
library(car)
#import data
data0 <- read.csv("colon2017.csv")
data <- data0[,-c(1,2,3,4,6,7,16,17,20)]
# feature eng
data$Gender <- ifelse(data$Gender == "Male",1,0)
data$Race <- ifelse(data$Race == "white" | data$Race == "White" | data$Race == "W",1,0)
data$Operative.Length <- (data$Operative.Length)*24*60
ggcorr(data,label = TRUE)
# backward selection
logit.model= glm(Anastamotic.Leak ~ Gender+BMI+Age+Race+Tobacco+DM+CAD.PAD+Cancer+Albumin..g.dL.+Operative.Length,
data = data,
family = "binomial")
var_selection <- step(logit.model)
# render our final model
final.model = glm(Anastamotic.Leak ~ Gender+
BMI+
Age+
Tobacco+
DM+
Cancer+
Albumin..g.dL.+
Operative.Length,
family="binomial",data=data)
summary(final.model)
c(exp(0.086276 - 0.030349*1.96),exp(0.086276 + 0.030349*1.96))
# case studys
Case1 <-  data.frame(Gender = 0,Age = 35, BMI =20:50, Tobacco = 0, DM = 0, Cancer = 0, Albumin..g.dL. = 4.2, Operative.Length = 90)
Case2 <-  data.frame(Gender = 1,Age = 62, BMI =20:50, Tobacco = 1, DM = 1, Cancer = 0, Albumin..g.dL. = 2.8, Operative.Length = 210)
#Step six starts here.
BS.pstar1 = matrix(0,31,1000)
BS.pstar2 = matrix(0,31,1000)
#Step 1, create orig model
final.model = glm(Anastamotic.Leak ~ Gender+
BMI+
Age+
Tobacco+
DM+
Cancer+
Albumin..g.dL.+
Operative.Length,
family="binomial",data=data)
for(j in 1:1000){
#Step 2, resample the x's with replacement
n = length(data[,1])
ind = sample(1:n,n,replace=T)
BS.x = data.frame(Gender = data$Gender[ind],
BMI = data$BMI[ind],
Age = data$Age[ind],
Tobacco = data$Tobacco[ind],
DM = data$DM[ind],
Cancer = data$Cancer[ind],
Albumin..g.dL. = data$Albumin..g.dL.[ind],
Operative.Length = data$Operative.Length[ind])
#Step 3, Plug BS.x into orig model to get BS.phat
BS.phat = predict(final.model,newdata=BS.x,type="response")
#Step 4, Sample from (1,0) to get BS.y
BS.y = rep(0,n)
for(i in 1:n){
BS.y[i] = sample(c(1,0),1,prob=c(BS.phat[i],1-BS.phat[i]))
}
BS.data = data.frame(cbind(anastamotic.leak = BS.y,BS.x))
#Step 5, New model using BS.x and BS.y.  Compute BS.par
newmodel = glm(anastamotic.leak~Gender+BMI+Age+Tobacco+DM+Cancer+Albumin..g.dL.+Operative.Length,
data=BS.data,
family='binomial')
BS.pstar1[,j] = predict(newmodel,newdata=Case1,type="response")
BS.pstar2[,j] = predict(newmodel,newdata=Case2,type="response")
#Step 6, repeat.
}
BS.Pstar1.freq <- data.frame(NULL)
for(i in 1:31){
dfq <- cbind(BS.pstar1[,i],rep(i+19,31))
BS.Pstar1.freq <- rbind(BS.Pstar1.freq,dfq)
}
plot(BS.Pstar1.freq[,2],BS.Pstar1.freq[,1])
BS.Pstar2.freq <- data.frame(NULL)
for(i in 1:31){
dfq <- cbind(BS.pstar2[,i],rep(i+19,31))
BS.Pstar2.freq <- rbind(BS.Pstar2.freq,dfq)
}
plot(BS.Pstar2.freq[,2],BS.Pstar2.freq[,1])
# take the quantile from every iteration from  and that will be your bound vector
lower.quant1 <- 1:31
upper.quant1 <- 1:31
lower.quant2 <- 1:31
upper.quant2 <- 1:31
for(i in 1:31){
# quantiles for Arizona
lower.quant1[i] <- quantile(BS.pstar1[i,],0.025)
upper.quant1[i] <- quantile(BS.pstar1[i,],0.975)
# quantiles for Richard
lower.quant2[i] <- quantile(BS.pstar2[i,],0.025)
upper.quant2[i] <- quantile(BS.pstar2[i,],0.975)
}
# map out these quantiles
plot(20:50,lower.quant1,ylim = c(0,1), type ='l', col = "red",
xlab = "BMI",
ylab = "Risk of Anastomotic Leak (Arizona)")
lines(20:50,upper.quant1,type = 'l', col = 'red')
# map out these quantiles
plot(20:50,lower.quant2,ylim = c(0,1),type ='l', col = "red",
xlab = "BMI",
ylab = "Risk of Anastomotic Leak (Richard)")
lines(20:50,upper.quant2,type = 'l', col = "red")
# let's see how well the models predicts
residualPlot(final.model)
