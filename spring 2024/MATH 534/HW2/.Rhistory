newtM(mme, FALSE)
#starting at -2.7
newtM(-2.7,T)
# render graph
plot(df1$θ,df1$final)
# setting up theta
theta_vec <- seq(-pi,pi,length = 200)
#intialize dataframe
df1 <- data.frame()
# make dataset to graph later
for (i in 1:200){
df1 <- bind_rows(df1,newtM(theta_vec[i],T))
}
# render graph
plot(df1$θ,df1$final)
# render graph
plot(df1$θ,df1$final)
# setting up theta
theta_vec <- seq(-pi,pi,length = 200)
#intialize dataframe
df1 <- data.frame()
# make dataset to graph later
for (i in 1:200){
df1 <- bind_rows(df1,newtM(theta_vec[i],T))
}
# clean data
df1 <- select(df1,c("\u03b8",final))
# render graph
plot(df1$θ,df1$final)
View(df1)
# setting up theta
theta_vec <- seq(-pi,pi,length = 200)
#intialize dataframe
df1 <- data.frame()
# make dataset to graph later
for (i in 1:200){
df1 <- bind_rows(df1,newtM(theta_vec[i],T))
}
# clean data
df1 <- select(df1,c("\u03b8",final))
df1 <- distinct(df1)
# render graph
plot(df1$θ,df1$final)
View(df1)
df1 <- distinct(df1)
View(df1)
# setting up theta
theta_vec <- seq(-pi,pi,length = 200)
#intialize dataframe
df1 <- data.frame()
# make dataset to graph later
for (i in 1:200){
df1 <- bind_rows(df1,newtM(theta_vec[i],T))
}
# clean data
df1 <- select(df1,c("Initial \u03b8",final))
df1 <- distinct(df1)
# render graph
plot(df1$`Initial θ`,df1$final)
# render graph
plot(df1$`Initial Theta`,df1$final, xlab = "Intial Theta", ylab = "Final Theta")
# render graph
plot(df1$`Initial Theta`,df1$final, xlab = "Intial Theta", ylab = "Final Theta")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
# placing in the information
# building the functions
f <- function(theta){
x <- c(3.91, 4.85, 2.28, 4.06, 3.70, 4.04, 5.46,
3.53, 2.28, 1.96, 2.53, 3.88, 2.22, 3.47,
4.82, 2.46, 2.99, 2.54, 0.52, 2.50)
llh <- 0
for (i in x){
llh <- llh + log(
(1 - cos(i - theta))/(2*pi)
)
}
return(llh)
}
# setup sequences
theta_vec <- seq(-pi,pi,length=100)
# setup y-values
y <-  f(theta_vec)
# render plot
plot(theta_vec, y, type = 'l' ,main = "Log Likelihood Function", xlab = "Theta", ylab = "Likelyhood(Theta)")
# setup newtons method
ell <- function(theta){
S <- 0
x <- c(3.91, 4.85, 2.28, 4.06, 3.70, 4.04, 5.46,
3.53, 2.28, 1.96, 2.53, 3.88, 2.22, 3.47,
4.82, 2.46, 2.99, 2.54, 0.52, 2.50)
for (i in x){
S <- S + log((1/2*pi)*(1-cos(i-theta)))
}
return(S)
}
dell <- function(theta){
S <- 0
x <- c(3.91, 4.85, 2.28, 4.06, 3.70, 4.04, 5.46,
3.53, 2.28, 1.96, 2.53, 3.88, 2.22, 3.47,
4.82, 2.46, 2.99, 2.54, 0.52, 2.50)
for (i in x){
S <- S + (2*pi*sin(i-theta))/(cos(i-theta)-1)
}
return(S)
}
ddell <- function(theta){
S <- 0
x <- c(3.91, 4.85, 2.28, 4.06, 3.70, 4.04, 5.46,
3.53, 2.28, 1.96, 2.53, 3.88, 2.22, 3.47,
4.82, 2.46, 2.99, 2.54, 0.52, 2.50)
for (i in x){
S <- S + (2*pi)/(cos(i-theta)-1)
}
return(S)
}
x <- c(3.91, 4.85, 2.28, 4.06, 3.70, 4.04, 5.46,
3.53, 2.28, 1.96, 2.53, 3.88, 2.22, 3.47,
4.82, 2.46, 2.99, 2.54, 0.52, 2.50)
# newton's method
newtM <- function(theta0,ipo){
# initialization
init_theta <- theta0
it <- 0
stop <- 0
df <- data.frame()
# begin the while loop
while (it < 1000 & stop == 0){
theta1 <- theta0 - (dell(theta0))/(ddell(theta0))
it = it + 1
absg <- abs(dell(theta0))
mre <- abs(theta1 - theta0)/max(1,abs(theta1))
row <- c(it,theta1,mre,absg,init_theta)
df <- rbind(df, row)
if (mre < 1*exp(-6) &  absg <  1*exp(-9)){
stop <- 1
theta0 <- theta1
}
else {
stop  = 0
theta0 <- theta1
}
}
names(df) <- c("Iteration","Theta","Relative Error","Gradient at Theta","Initial Theta")
df$final <- theta1
if(ipo == FALSE){
df <- select(df, c("Iteration","Theta","Relative Error","Gradient at Theta"))
}
return(df)
}
# starting at MME
mme <- asin(mean(x) - pi)
newtM(mme, FALSE)
# starting at 2.7
newtM(2.7,FALSE)
#starting at -2.7
newtM(-2.7,T)
# setting up theta
theta_vec <- seq(-pi,pi,length = 200)
#intialize dataframe
df1 <- data.frame()
# make dataset to graph later
for (i in 1:200){
df1 <- bind_rows(df1,newtM(theta_vec[i],T))
}
# clean data
df1 <- select(df1,c("Initial Theta",final))
df1 <- distinct(df1)
# render graph
plot(df1$`Initial Theta`,df1$final, xlab = "Intial Theta", ylab = "Final Theta")
library(tidyverse)
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
include = FALSE
)
library(dplyr)
library(tidyverse)
# starting at 2.7
newtM(2.7,T)
# starting at 2.7
newtM(2.7,F)
#starting at -2.7
newtM(-2.7,F)
x <- c(3.91, 4.85, 2.28, 4.06, 3.70, 4.04, 5.46,
3.53, 2.28, 1.96, 2.53, 3.88, 2.22, 3.47,
4.82, 2.46, 2.99, 2.54, 0.52, 2.50)
# newton's method
newtM <- function(theta0,ipo){
# initialization
init_theta <- theta0
it <- 0
stop <- 0
df <- data.frame()
# begin the while loop
while (it < 1000 & stop == 0){
theta1 <- theta0 - (dell(theta0))/(ddell(theta0))
it = it + 1
absg <- abs(dell(theta0))
mre <- abs(theta1 - theta0)/max(1,abs(theta1))
row <- c(it,theta1,mre,absg,init_theta)
df <- rbind(df, row)
if (mre < 1*exp(-6) &  absg <  1*exp(-9)){
stop <- 1
theta0 <- theta1
}
else {
stop  = 0
theta0 <- theta1
}
}
df <- data.frame(df) %>% setnames("Iteration","Theta","Relative Error","Gradient at Theta","Initial Theta") %>% mutate(
Theta = round(Theta, digits = 12),
`Relative Error` = sprintf("%.1e", `Relative Error`),
`Gradient at Theta` = sprintf("%.1e", `Gradient at theta`)
)
df$final <- theta1
if(ipo == FALSE){
df <- select(df, c("Iteration","Theta","Relative Error","Gradient at Theta"))
}
return(df)
}
# starting at MME
mme <- asin(mean(x) - pi)
newtM(mme, F)
x <- c(3.91, 4.85, 2.28, 4.06, 3.70, 4.04, 5.46,
3.53, 2.28, 1.96, 2.53, 3.88, 2.22, 3.47,
4.82, 2.46, 2.99, 2.54, 0.52, 2.50)
# newton's method
newtM <- function(theta0,ipo){
# initialization
init_theta <- theta0
it <- 0
stop <- 0
df <- data.frame()
# begin the while loop
while (it < 1000 & stop == 0){
theta1 <- theta0 - (dell(theta0))/(ddell(theta0))
it = it + 1
absg <- abs(dell(theta0))
mre <- abs(theta1 - theta0)/max(1,abs(theta1))
row <- c(it,theta1,mre,absg,init_theta)
df <- rbind(df, row)
if (mre < 1*exp(-6) &  absg <  1*exp(-9)){
stop <- 1
theta0 <- theta1
}
else {
stop  = 0
theta0 <- theta1
}
}
df <- data.frame(df) %>% set_names("Iteration","Theta","Relative Error","Gradient at Theta","Initial Theta") %>% mutate(
Theta = round(Theta, digits = 12),
`Relative Error` = sprintf("%.1e", `Relative Error`),
`Gradient at Theta` = sprintf("%.1e", `Gradient at theta`)
)
df$final <- theta1
if(ipo == FALSE){
df <- select(df, c("Iteration","Theta","Relative Error","Gradient at Theta"))
}
return(df)
}
# starting at MME
mme <- asin(mean(x) - pi)
newtM(mme, F)
x <- c(3.91, 4.85, 2.28, 4.06, 3.70, 4.04, 5.46,
3.53, 2.28, 1.96, 2.53, 3.88, 2.22, 3.47,
4.82, 2.46, 2.99, 2.54, 0.52, 2.50)
# newton's method
newtM <- function(theta0,ipo){
# initialization
init_theta <- theta0
it <- 0
stop <- 0
df <- data.frame()
# begin the while loop
while (it < 1000 & stop == 0){
theta1 <- theta0 - (dell(theta0))/(ddell(theta0))
it = it + 1
absg <- abs(dell(theta0))
mre <- abs(theta1 - theta0)/max(1,abs(theta1))
row <- c(it,theta1,mre,absg,init_theta)
df <- rbind(df, row)
if (mre < 1*exp(-6) &  absg <  1*exp(-9)){
stop <- 1
theta0 <- theta1
}
else {
stop  = 0
theta0 <- theta1
}
}
df <- data.frame(df) %>% set_names("Iteration","Theta","Relative Error","Gradient at Theta","Initial Theta") %>% mutate(
Theta = round(Theta, digits = 12),
`Relative Error` = sprintf("%.1e", `Relative Error`),
`Gradient at Theta` = sprintf("%.1e", `Gradient at Theta`)
)
df$final <- theta1
if(ipo == FALSE){
df <- select(df, c("Iteration","Theta","Relative Error","Gradient at Theta"))
}
return(df)
}
# starting at MME
mme <- asin(mean(x) - pi)
newtM(mme, F)
# starting at 2.7
newtM(2.7,F)
#starting at -2.7
newtM(-2.7,F)
# setting up theta
theta_vec <- seq(-pi,pi,length = 200)
#intialize dataframe
df1 <- data.frame()
# make dataset to graph later
for (i in 1:200){
df1 <- bind_rows(df1,newtM(theta_vec[i],T))
}
# clean data
df1 <- select(df1,c("Initial Theta",final))
df1 <- distinct(df1)
# render graph
plot(df1$`Initial Theta`,df1$final, xlab = "Intial Theta", ylab = "Final Theta")
# render plot
p0 <- plot(theta_vec, y, type = 'l' ,main = "Log Likelihood Function", xlab = "Theta", ylab = "Likelyhood(Theta)")
# placing in the information
# building the functions
f <- function(theta){
x <- c(3.91, 4.85, 2.28, 4.06, 3.70, 4.04, 5.46,
3.53, 2.28, 1.96, 2.53, 3.88, 2.22, 3.47,
4.82, 2.46, 2.99, 2.54, 0.52, 2.50)
llh <- 0
for (i in x){
llh <- llh + log(
(1 - cos(i - theta))/(2*pi)
)
}
return(llh)
}
# setup sequences
theta_vec <- seq(-pi,pi,length=100)
# setup y-values
y <-  f(theta_vec)
# render plot
p0 <- plot(theta_vec, y, type = 'l' ,main = "Log Likelihood Function", xlab = "Theta", ylab = "Likelyhood(Theta)")
p0
# render plot
plot(theta_vec, y, type = 'l' ,main = "Log Likelihood Function", xlab = "Theta", ylab = "Likelyhood(Theta)")
# render graph
plot(df1$`Initial Theta`,df1$final, xlab = "Intial Theta", ylab = "Final Theta")
plot(theta_vec, y, type = 'l' ,main = "Log Likelihood Function", xlab = "Theta", ylab = "Likelyhood(Theta)")
# render graph
plot(df1$`Initial Theta`,df1$final, xlab = "Intial Theta", ylab = "Final Theta")
plot(theta_vec, y, type = 'l' ,main = "Log Likelihood Function", xlab = "Theta", ylab = "Likelyhood(Theta)", add = TRUE)
# render graph
plot(df1$`Initial Theta`,df1$final, xlab = "Intial Theta", ylab = "Final Theta")
plot(theta_vec, y, type = 'l' ,main = "Log Likelihood Function", xlab = "Theta", ylab = "Likelyhood(Theta)")
plot(df1$`Initial Theta`,df1$final, xlab = "Intial Theta", ylab = "Final Theta",add = TRUE)
# render graph
plot(df1$`Initial Theta`,df1$final, xlab = "Intial Theta", ylab = "Final Theta")
plot(theta_vec, y, type = 'l' ,main = "Log Likelihood Function", xlab = "Theta", ylab = "Likelyhood(Theta)")
par(new = TRUE)
plot(df1$`Initial Theta`,df1$final, xlab = "Intial Theta", ylab = "Final Theta")
par(new = FALSE)
plot(theta_vec, y, type = 'l' ,main = "Log Likelihood Function", xlab = "Theta", ylab = "Likelyhood(Theta)",color = 'red')
# render graph
plot(df1$`Initial Theta`,df1$final, xlab = "Intial Theta", ylab = "Final Theta")
plot(theta_vec, y, type = 'l' ,main = "Log Likelihood Function", xlab = "Theta", ylab = "Likelyhood(Theta)",color = 'red')
par(new = TRUE)
plot(df1$`Initial Theta`,df1$final, xlab = "Intial Theta", ylab = "Final Theta")
par(new = FALSE)
# render graph
plot(df1$`Initial Theta`,df1$final, xlab = "Intial Theta", ylab = "Final Theta")
plot(theta_vec, y, type = 'l' ,main = "Log Likelihood Function", xlab = "Theta", ylab = "Likelyhood(Theta)",col = 'red')
par(new = TRUE)
plot(df1$`Initial Theta`,df1$final, xlab = "Intial Theta", ylab = "Final Theta")
par(new = FALSE)
# render graph
plot(df1$`Initial Theta`,df1$final, xlab = "Intial Theta", ylab = "Final Theta")
plot(theta_vec, y, type = 'l' ,main = "Log Likelihood Function", xlab = "", ylab = "",col = 'red')
par(new = TRUE)
plot(df1$`Initial Theta`,df1$final, xlab = "Intial Theta", ylab = "Final Theta")
par(new = FALSE)
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
include = FALSE
)
library(dplyr)
library(tidyverse)
# placing in the information
# building the functions
f <- function(theta){
x <- c(3.91, 4.85, 2.28, 4.06, 3.70, 4.04, 5.46,
3.53, 2.28, 1.96, 2.53, 3.88, 2.22, 3.47,
4.82, 2.46, 2.99, 2.54, 0.52, 2.50)
llh <- 0
for (i in x){
llh <- llh + log(
(1 - cos(i - theta))/(2*pi)
)
}
return(llh)
}
# setup sequences
theta_vec <- seq(-pi,pi,length=100)
# setup y-values
y <-  f(theta_vec)
# render plot
plot(theta_vec, y, type = 'l' ,main = "Log Likelihood Function", xlab = "Theta", ylab = "Likelyhood(Theta)")
# setup newtons method
ell <- function(theta){
S <- 0
x <- c(3.91, 4.85, 2.28, 4.06, 3.70, 4.04, 5.46,
3.53, 2.28, 1.96, 2.53, 3.88, 2.22, 3.47,
4.82, 2.46, 2.99, 2.54, 0.52, 2.50)
for (i in x){
S <- S + log((1/2*pi)*(1-cos(i-theta)))
}
return(S)
}
dell <- function(theta){
S <- 0
x <- c(3.91, 4.85, 2.28, 4.06, 3.70, 4.04, 5.46,
3.53, 2.28, 1.96, 2.53, 3.88, 2.22, 3.47,
4.82, 2.46, 2.99, 2.54, 0.52, 2.50)
for (i in x){
S <- S + (2*pi*sin(i-theta))/(cos(i-theta)-1)
}
return(S)
}
ddell <- function(theta){
S <- 0
x <- c(3.91, 4.85, 2.28, 4.06, 3.70, 4.04, 5.46,
3.53, 2.28, 1.96, 2.53, 3.88, 2.22, 3.47,
4.82, 2.46, 2.99, 2.54, 0.52, 2.50)
for (i in x){
S <- S + (2*pi)/(cos(i-theta)-1)
}
return(S)
}
x <- c(3.91, 4.85, 2.28, 4.06, 3.70, 4.04, 5.46,
3.53, 2.28, 1.96, 2.53, 3.88, 2.22, 3.47,
4.82, 2.46, 2.99, 2.54, 0.52, 2.50)
# newton's method
newtM <- function(theta0,ipo){
# initialization
init_theta <- theta0
it <- 0
stop <- 0
df <- data.frame()
# begin the while loop
while (it < 1000 & stop == 0){
theta1 <- theta0 - (dell(theta0))/(ddell(theta0))
it = it + 1
absg <- abs(dell(theta0))
mre <- abs(theta1 - theta0)/max(1,abs(theta1))
row <- c(it,theta1,mre,absg,init_theta)
df <- rbind(df, row)
if (mre < 1*exp(-6) &  absg <  1*exp(-9)){
stop <- 1
theta0 <- theta1
}
else {
stop  = 0
theta0 <- theta1
}
}
df <- data.frame(df) %>% set_names("Iteration","Theta","Relative Error","Gradient at Theta","Initial Theta") %>% mutate(
Theta = round(Theta, digits = 12),
`Relative Error` = sprintf("%.1e", `Relative Error`),
`Gradient at Theta` = sprintf("%.1e", `Gradient at Theta`)
)
df$final <- theta1
if(ipo == FALSE){
df <- select(df, c("Iteration","Theta","Relative Error","Gradient at Theta"))
}
return(df)
}
# starting at MME
mme <- asin(mean(x) - pi)
newtM(mme, F)
# starting at 2.7
newtM(2.7,F)
#starting at -2.7
newtM(-2.7,F)
# setting up theta
theta_vec <- seq(-pi,pi,length = 200)
#intialize dataframe
df1 <- data.frame()
# make dataset to graph later
for (i in 1:200){
df1 <- bind_rows(df1,newtM(theta_vec[i],T))
}
# clean data
df1 <- select(df1,c("Initial Theta",final))
df1 <- distinct(df1)
# render graph
plot(df1$`Initial Theta`,df1$final, xlab = "Intial Theta", ylab = "Final Theta")
plot(theta_vec, y, type = 'l' ,main = "Log Likelihood Function", xlab = "", ylab = "",col = 'red')
# render graph
plot(df1$`Initial Theta`,df1$final, xlab = "Intial Theta", ylab = "Final Theta")
plot(theta_vec, y, type = 'l' ,main = "Log Likelihood Function", xlab = "", ylab = "",col = 'red')
# setup y-values
y <-  f(theta_vec)
# render graph
plot(df1$`Initial Theta`,df1$final, xlab = "Intial Theta", ylab = "Final Theta")
plot(theta_vec, y, type = 'l' ,main = "Log Likelihood Function", xlab = "", ylab = "",col = 'red')
par(new = TRUE)
plot(df1$`Initial Theta`,df1$final, xlab = "Intial Theta", ylab = "Final Theta")
par(new = FALSE)
