# pulling in data
dose <- c(0,2,10,50,250)
at <- c(111,105,124,104,90)
ti <- c(4,4,11,13,60)
data <- cbind(dose,at,ti)
X <- cbind(1,dose,dose^2)

# render IRWLS math
binomIRWLS <- function(m,X,beta){
  E = exp(-X%*%beta)
  p = 1 - E
  f = m*p
  J <- cbind(m*E,m*(X[,2])*E,m*(X[,3])*E)
  var <- m*p*(1-p)
  W <- diag(as.numeric(1/var))
  list(f=f, J=J, W=W)
}


# render algorithm
DJShaarvi <- function(y,m,X,beta0,W=1,maxit,tolerr = 1e-06){
  for(it in 1:maxit){
    
    # initial
    f = binomIRWLS(m,X,beta0)$f
    J = binomIRWLS(m,X,beta0)$J
    W = binomIRWLS(m,X,beta0)$W
    
    #print heading
    print(sprintf('iteration = %3.0f   beta_0 = %6.6f  beta_1 = %6.6f  beta_2 = %6.6f',
                  it,beta0[1],beta0[2],beta0[3]))
    
    # mathematics
    direc <- solve(t(J)%*%W%*%J)%*%t(J)%*%W%*%(y-f)	
    beta1 = beta0 + direc
    
    # get threshhold
    mre <- max(abs(beta1 - beta0)/abs(pmax(1,abs(beta0))))
    if(mre < tolerr){break}
    
    # cycle beta
    beta0 <- beta1
  }
  beta0
}

# run algorithm
beta_init = c(.01,.01,.00001)
DJShaarvi(y,m = data[,2],X,beta_init,W=1,maxit=100)
