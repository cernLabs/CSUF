beta1 = beta0 + direc
# get threshhold
mre <- max(abs(beta1 - beta0)/abs(pmax(1,abs(beta0))))
if(mre < tolerr){break}
# cycle beta
beta0 <- beta1
}
beta0
}
# run algorithm
beta0 = c(.01,.01,.01)
DJShaarvi(X[,3],X[,2],X,beta_init,W=1,maxit=100)
f = binomIRWLS(m,X,beta0)$f
J = binomIRWLS(m,X,beta0)$J
W = binomIRWLS(m,X,beta0)$W
direc <- solve(t(J)%*%W%*%J)%*%t(J)%*%W%*%(y-f)
W
# run algorithm
beta0 = c(.01,.01,.01)
DJShaarvi(data[,3],data[,2],X,beta_init,W=1,maxit=100)
# run algorithm
beta0 = c(.01,.01,.000001)
DJShaarvi(data[,3],data[,2],X,beta_init,W=1,maxit=100)
# run algorithm
beta_init = c(.01,.01,.000001)
DJShaarvi(data[,3],data[,2],X,beta_init,W=1,maxit=100)
beta_0=c(-0.061612,-0.052290,0.002337)
beta0=c(-0.061612,-0.052290,0.002337)
# initial
f = binomIRWLS(m,X,beta0)$f
J = binomIRWLS(m,X,beta0)$J
W = binomIRWLS(m,X,beta0)$W
J
W
t(J) %*% W
as.numeric(t(J))
as.numeric(W)
binomIRWLS <- function(m,X,beta){
E = exp(-X%*%beta)
p = 1 - E
f = m*p
J <-cbind(m*E,m*(-X[,2])*E,m*(-X[,3])*E)
var <- m*p*(1-p)
W <- diag(as.numeric(1/(f*(1-p))))
list(f=f, J=J, W=W)
}
beta0=c(-0.061612,-0.052290,0.002337)
f = binomIRWLS(m,X,beta0)$f
J = binomIRWLS(m,X,beta0)$J
W = binomIRWLS(m,X,beta0)$W
W
JacfW_binomial(beta0,X,data[,2])$W
ddt_data = data.frame("Dose-(ppm)" = c(0,2,10,50,250),
"Animals-Tested" = c(111,105,124,104,90),
"Tumor-Incidence" = c(4,4,11,13,60))
View(ddt_data)
View(data)
View(ddt_data)
View(data)
View(ddt_data)
View(data)
ddt_data_matrix = as.matrix(ddt_data) # takes our data frame and turns it into matrix
View(ddt_data_matrix)
data = ddt_data_matrix # relabel data
X = cbind(matrix(1,n,1),data[,1],data[,1]^2) # gives us a matrix of covariates - dose of drug
View(Wt)
View(X)
y = (ddt_data_matrix[,3]) # gives our response variable - number of tumors
beta_initial=c(0.01,0.01,0.00001) # initial beta values for b0,b1,b2
a = GN(y, X, m = data[,2], beta_initial, Wt = 1, maxit = 100)
beta_init = c(.01,.01,.00001)
DJShaarvi(y,m = data[,2],X,beta_init,W=1,maxit=100)
binomIRWLS <- function(m,X,beta){
xt = X%*%beta # n by 1 of data times beta
E = exp(-xt) # n by 1 of our exponential function
p_i = 1 - E # gives us proportion
f = m * p_i # our Binomial PDF
J = cbind(m*E, X[,2]*m*E, (X[,3])*m*E) # our beta0, beta1, beta2 matrices
W = diag(as.numeric(1/(f*(1-p_i))))
}
binomIRWLS <- function(m,X,beta){
xt = X%*%beta # n by 1 of data times beta
E = exp(-xt) # n by 1 of our exponential function
p_i = 1 - E # gives us proportion
f = m * p_i # our Binomial PDF
J = cbind(m*E, X[,2]*m*E, (X[,3])*m*E) # our beta0, beta1, beta2 matrices
W = diag(as.numeric(1/(f*(1-p_i))))
}
beta_init = c(.01,.01,.00001)
DJShaarvi(y,m = data[,2],X,beta_init,W=1,maxit=100)
binomIRWLS <- function(m,X,beta){
xt = X%*%beta # n by 1 of data times beta
E = exp(-xt) # n by 1 of our exponential function
p_i = 1 - E # gives us proportion
f = m * p_i # our Binomial PDF
J = cbind(m*E, X[,2]*m*E, (X[,3])*m*E) # our beta0, beta1, beta2 matrices
W = diag(as.numeric(1/(f*(1-p_i))))
list(f=f, J=J, W=W)
}
# run algorithm
beta_init = c(.01,.01,.00001)
DJShaarvi(y,m = data[,2],X,beta_init,W=1,maxit=100)
binomIRWLS <- function(m,X,beta){
xt = X%*%beta # n by 1 of data times beta
E = exp(-xt) # n by 1 of our exponential function
p_i = 1 - E # gives us proportion
f = m * p_i # our Binomial PDF
J = cbind(m*E, X[,2]*m*E, (X[,3])*m*E) # our beta0, beta1, beta2 matrices
var = m*p_i*(1-p_i)
W = diag(as.numeric(1/(f*(1-p_i))))
list(f=f, J=J, W=W)
}
# run algorithm
beta_init = c(.01,.01,.00001)
DJShaarvi(y,m = data[,2],X,beta_init,W=1,maxit=100)
binomIRWLS <- function(m,X,beta){
E = exp(-X%*%beta)
p = 1 - E
f = m*p
J <- cbind(m*E,m*(X[,2])*E,m*(X[,3])*E)
var <- m*p*(1-p)
W <- diag(as.numeric(1/var))
list(f=f, J=J, W=W)
}
# run algorithm
beta_init = c(.01,.01,.00001)
DJShaarvi(y,m = data[,2],X,beta_init,W=1,maxit=100)
knitr::opts_chunk$set(echo = TRUE)
# pulling in data
dose <- c(0,2,10,50,250)
at <- c(111,105,124,104,90)
ti <- c(4,4,11,13,60)
data <- cbind(dose,at,ti)
X <- cbind(1,dose,dose^2)
# render IRWLS math
binomIRWLS <- function(m,X,beta){
E = exp(-X%*%beta)
p = 1 - E
f = m*p
J <- cbind(m*E,m*(X[,2])*E,m*(X[,3])*E)
var <- m*p*(1-p)
W <- diag(as.numeric(1/var))
list(f=f, J=J, W=W)
}
# render algorithm
DJShaarvi <- function(y,m,X,beta0,W=1,maxit,tolerr = 1e-06){
for(it in 1:maxit){
# initial
f = binomIRWLS(m,X,beta0)$f
J = binomIRWLS(m,X,beta0)$J
W = binomIRWLS(m,X,beta0)$W
#print heading
print(sprintf('iteration = %3.0f   beta_0 = %6.6f  beta_1 = %6.6f  beta_2 = %6.6f',
it,beta0[1],beta0[2],beta0[3]))
# mathematics
direc <- solve(t(J)%*%W%*%J)%*%t(J)%*%W%*%(y-f)
beta1 = beta0 + direc
# get threshhold
mre <- max(abs(beta1 - beta0)/abs(pmax(1,abs(beta0))))
if(mre < tolerr){break}
# cycle beta
beta0 <- beta1
}
beta0
}
# pulling in data
dose <- c(0,2,10,50,250)
at <- c(111,105,124,104,90)
ti <- c(4,4,11,13,60)
data <- cbind(dose,at,ti)
X <- cbind(1,dose,dose^2)
# render IRWLS math
binomIRWLS <- function(m,X,beta){
E = exp(-X%*%beta)
p = 1 - E
f = m*p
J <- cbind(m*E,m*(X[,2])*E,m*(X[,3])*E)
var <- m*p*(1-p)
W <- diag(as.numeric(1/var))
list(f=f, J=J, W=W)
}
# render algorithm
DJShaarvi <- function(y,m,X,beta0,W=1,maxit,tolerr = 1e-06){
for(it in 1:maxit){
# initial
f = binomIRWLS(m,X,beta0)$f
J = binomIRWLS(m,X,beta0)$J
W = binomIRWLS(m,X,beta0)$W
#print heading
print(sprintf('iteration = %3.0f   beta_0 = %6.6f  beta_1 = %6.6f  beta_2 = %6.6f',
it,beta0[1],beta0[2],beta0[3]))
# mathematics
direc <- solve(t(J)%*%W%*%J)%*%t(J)%*%W%*%(y-f)
beta1 = beta0 + direc
# get threshhold
mre <- max(abs(beta1 - beta0)/abs(pmax(1,abs(beta0))))
if(mre < tolerr){break}
# cycle beta
beta0 <- beta1
}
beta0
}
# run algorithm
beta_init = c(.01,.01,.00001)
DJShaarvi(y,m = data[,2],X,beta_init,W=1,maxit=100)
?sprintf
# pulling in data
dose <- c(0,2,10,50,250)
at <- c(111,105,124,104,90)
ti <- c(4,4,11,13,60)
data <- cbind(dose,at,ti)
X <- cbind(1,dose,dose^2)
# render IRWLS math
binomIRWLS <- function(m,X,beta){
E = exp(-X%*%beta)
p = 1 - E
f = m*p
J <- cbind(m*E,m*(X[,2])*E,m*(X[,3])*E)
var <- m*p*(1-p)
W <- diag(as.numeric(1/var))
list(f=f, J=J, W=W)
}
# render algorithm
DJShaarvi <- function(y,m,X,beta0,W=1,maxit,tolerr = 1e-06){
for(it in 1:maxit){
# initial
f = binomIRWLS(m,X,beta0)$f
J = binomIRWLS(m,X,beta0)$J
W = binomIRWLS(m,X,beta0)$W
#print heading
print(sprintf('iteration = %3.0f   beta_0 = %6.6f  beta_1 = %6.6f  beta_2 = %6.6f',
it,beta0[1],beta0[2],beta0[3]))
# mathematics
direc <- solve(t(J)%*%W%*%J)%*%t(J)%*%W%*%(y-f)
beta1 = beta0 + direc
# get threshhold
mre <- max(abs(beta1 - beta0)/abs(pmax(1,abs(beta0))))
if(mre < tolerr){break}
# cycle beta
beta0 <- beta1
}
print(sprintf("The MLE's are beta_1 = %f, beta_2=%f, beta_3 = %f",
beta0[1],
beta0[2],
beta0[3]))
}
# run algorithm
beta_init = c(.01,.01,.00001)
DJShaarvi(y,m = data[,2],X,beta_init,W=1,maxit=100)
proportion <- data[,3]/data[,2]
ppm <- data[,1]
plot(ppm,proportion)
x = seq(0,250,.1)
lines(t,1 - exp(-0.045944 - 0.001627*t - 0.000010*t^2),col='red')
lines(t,1 - exp(-0.045944 - 0.001627*t - 0.000010*t^2),col='forestgreen')
proportion <- data[,3]/data[,2]
ppm <- data[,1]
plot(ppm,proportion)
x = seq(0,250,.1)
lines(t,1 - exp(-0.045944 - 0.001627*t - 0.000010*t^2),col='forestgreen')
proportion <- data[,3]/data[,2]
ppm <- data[,1]
plot(ppm,proportion)
x = seq(0,250,.1)
lines(t,1 - exp(-0.045944 - 0.001627*x - 0.000010*x^2),col='forestgreen')
proportion <- data[,3]/data[,2]
ppm <- data[,1]
plot(ppm,proportion)
x = seq(0,250,.1)
lines(t,1 - 1/exp(0.045944 + 0.001627*x + 0.000010*x^2),col='forestgreen')
data2 <- read.table('blowBF.txt')
data2 <-as.matrix(cbind(data2,log(data2[,1])))
log(data2[,1])
data2[,1]
data2 <- read.table('blowBF.txt',head=T)
View(data2)
log(data2[,1])
# getting data
data2 <- read.table('blowBF.txt',head=T)
X2 <- cbind(1,data2[,2],log(data2[,1]))
# IRWLS setup
bernIRLWS <- function(X,B){
E = exp(X%*%B)
p = E/(1+E)
f = p
var = p*(1-p)
J <- cbind(E/(1+E)^2,X[,2]*E/(1+E)^2,X[,3]*E/(1+E)^2)
W <- diag(as.numeric(1/var))
list(f=f, W=W, J=J)
}
# render algorithm
DJShaarvi2 <- function(y,X,beta0,W=1,maxit,tolerr = 1e-06){
for(it in 1:maxit){
# initial
f = bernIRLWS(X,beta0)$f
J = bernIRLWS(X,beta0)$J
W = bernIRLWS(X,beta0)$W
#print heading
print(sprintf('iteration = %3.0f   beta_0 = %6.6f  beta_1 = %6.6f  beta_2 = %6.6f',
it,beta0[1],beta0[2],beta0[3]))
# mathematics
direc <- solve(t(J)%*%W%*%J)%*%t(J)%*%W%*%(y-f)
beta1 = beta0 + direc
# get threshhold
mre <- max(abs(beta1 - beta0)/abs(pmax(1,abs(beta0))))
if(mre < tolerr){break}
# cycle beta
beta0 <- beta1
}
print(sprintf("The MLE's are beta_1 = %f, beta_2=%f, beta_3 = %f",
beta0[1],
beta0[2],
beta0[3]))
}
# look for MLEs
DJShaarvi2(data2[,3],X2,beta_init,maxit=500)
View(bernIRLWS)
data
?seq
?outer
library(plot3D)
library(plot3D)
knitr::opts_chunk$set(echo = TRUE)
library(plot3d)
knitr::opts_chunk$set(echo = TRUE)
library(plot3D)
# 3-d rendering
# initials for graphing
X_1 <- X2[,2]
X_2 <- X2[,3]
# pi function
PI <- function(x1,x2){
E <- exp(-9.562085 + 4.508593*x1 + 3.197563*x2)
return(E/(1+E))
}
# ranges
x1 = seq(0,1,0.01)
x2 = seq(min(X_2),max(X_2),0.01)
x3 = outer(x1,x2,FUN = PI)
# render 3d plot
persp3D(x1,x2,x3)
persp3D(x1,x2,x3,
xlab = "Severity of Storm",
ylab = "log(Diameter of Tree)")
```
# render 3d plot
persp3D(x1,x2,x3,
xlab = "Severity of Storm",
ylab = "log(Tree Diameter)")
persp3D(x1,x2,x3,
xlab = "Severity of Storm",
ylab = "log(Tree Diameter)",
zlab = "Prob. Tree Fell")
# render 3d plot
persp3D(x1,x2,x3,
xlab = "Severity",
ylab = "log(Diameter)",
zlab = "Prob. Tree Fell")
# render 3d plot
persp3D(x1,x2,x3,
xlab = "Severity",
ylab = "log(Diameter)",
zlab = "Prob. Tree Fell",
theta = 45, phi = 25)
# render 3d plot
persp3D(x1,x2,x3,
xlab = "Severity",
ylab = "log(Diameter)",
zlab = "Prob. Tree Fell",
theta = 0, phi = 0)
# render 3d plot
persp3D(x1,x2,x3,
xlab = "Severity",
ylab = "log(Diameter)",
zlab = "Prob. Tree Fell",
theta = 0, phi = 90)
# render 3d plot
persp3D(x1,x2,x3,
xlab = "Severity",
ylab = "log(Diameter)",
zlab = "Prob. Tree Fell",
theta = 0, phi = 0)
# render 3d plot
persp3D(x1,x2,x3,
xlab = "Severity",
ylab = "log(Diameter)",
zlab = "Prob. Tree Fell",
theta = 45, phi = 45)
?persp3D
library(rgl)
persp3D(x1,x2,x3,
xlab = "Severity",
ylab = "log(Diameter)",
zlab = "Prob. Tree Fell",
theta = 45, phi = 45)
axis3d("x", n = 4)
axis3d("y", n = 4)
axis3d("z", n = 4)
# render 3d plot
persp3D(x1,x2,x3,
xlab = "Severity",
ylab = "log(Diameter)",
zlab = "Prob. Tree Fell",
theta = 45, phi = 45, add = T)
persp3D(x1,x2,x3,
xlab = "Severity",
ylab = "log(Diameter)",
zlab = "Prob. Tree Fell",
theta = 45, phi = 45)
axis3d("x", n = 4, add=T)
axis3d("y", n = 4, add=T)
# render 3d plot
persp3D(x1,x2,x3,
main = "Probability that Tree ",
xlab = "Severity",
ylab = "log(Diameter)",
zlab = "Prob. Tree Fell",
theta = 45, phi = 60)
# render 3d plot
persp3D(x1,x2,x3,
main = "Speculative Probability that Tree Falls",
xlab = "Severity",
ylab = "log(Diameter)",
zlab = "Prob. Tree Fell",
theta = 45, phi = 60)
# render 3d plot
persp3D(x1,x2,x3,
main = "Speculative Probability that Tree Falls",
xlab = "Severity",
ylab = "log(Diameter)",
zlab = "Prob. Tree Fell",
theta = 45, phi = 20)
# render 3d plot
persp3D(x1,x2,x3,
main = "Speculative Probability that Tree Falls",
xlab = "Severity",
ylab = "log(Diameter)",
zlab = "Prob. Tree Fell",
theta = 45, phi = 25)
# render 3d plot
persp3D(x1,x2,x3,
main = "Speculative Probability that Tree Falls",
xlab = "Severity",
ylab = "log(Diameter)",
zlab = "Prob. Tree Fell",
theta = 45, phi = 25)
View(X2)
View(data2)
# render 3d plot
persp3D(x1,x2,x3,
main = "Speculative Probability that Tree Falls",
xlab = "Severity",
ylab = "log(Diameter)",
zlab = "Prob. Tree Fell",
theta = 45, phi = 10)
# render 3d plot
persp3D(x1,x2,x3,
main = "Speculative Probability that Tree Falls",
xlab = "Severity",
ylab = "log(Diameter)",
zlab = "Prob. Tree Fell",
theta = 45, phi = 33)
PI(.3,log(10))
PI(.3,10)
PI(.3,log(33))
PI(.3,log(10))
proportion <- data[,3]/data[,2] #ratio of number of incidents and the number tested.
ppm <- data[,1]
plot(ppm,proportion)
x = seq(0,250,.1)
lines(t,1 - 1/exp(0.045944 + 0.001627*x + 0.000010*x^2),col='forestgreen')
?persp3D
# 3-d rendering
# initials for graphing
X_1 <- X2[,2]
X_2 <- X2[,3]
# pi function
PI <- function(x1,x2){
E <- exp(-9.562085 + 4.508593*x1 + 3.197563*x2)
return(E/(1+E))
}
# ranges
x1 = seq(0,1,0.01)
x2 = seq(min(X_2),max(X_2),0.01)
x3 = outer(x1,x2,FUN = PI)
# render 3d plot
persp3d(x1,x2,x3,
main = "Speculative Probability that Tree Falls",
xlab = "Severity",
ylab = "log(Diameter)",
zlab = "Prob. Tree Fell",
theta = 45, phi = 33)
# 3-d rendering
# initials for graphing
X_1 <- X2[,2]
X_2 <- X2[,3]
# pi function
PI <- function(x1,x2){
E <- exp(-9.562085 + 4.508593*x1 + 3.197563*x2)
return(E/(1+E))
}
# ranges
x1 = seq(0,1,0.01)
x2 = seq(min(X_2),max(X_2),0.01)
x3 = outer(x1,x2,FUN = PI)
# render 3d plot
persp3D(x1,x2,x3,
main = "Speculative Probability that Tree Falls",
xlab = "Severity",
ylab = "log(Diameter)",
zlab = "Prob. Tree Fell",
theta = 45, phi = 33)
